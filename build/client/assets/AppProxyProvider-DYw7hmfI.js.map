{"version":3,"file":"AppProxyProvider-DYw7hmfI.js","sources":["../../../node_modules/@shopify/shopify-app-remix/dist/esm/react/const.mjs","../../../node_modules/@shopify/shopify-app-remix/dist/esm/react/components/RemixPolarisLink.mjs","../../../node_modules/@shopify/shopify-app-remix/dist/esm/react/components/AppProvider/AppProvider.mjs","../../../node_modules/@shopify/shopify-app-remix/dist/esm/react/components/AppProxyProvider/AppProxyProvider.mjs"],"sourcesContent":["const APP_BRIDGE_URL = 'https://cdn.shopify.com/shopifycloud/app-bridge.js';\n\nexport { APP_BRIDGE_URL };\n//# sourceMappingURL=const.mjs.map\n","import { jsx } from 'react/jsx-runtime';\nimport React from 'react';\nimport { Link } from '@remix-run/react';\n\nconst RemixPolarisLink = React.forwardRef((props, ref) => (jsx(Link, { ...props, to: props.url ?? props.to, ref: ref })));\n\nexport { RemixPolarisLink };\n//# sourceMappingURL=RemixPolarisLink.mjs.map\n","import { jsxs, Fragment, jsx } from 'react/jsx-runtime';\nimport { AppProvider as AppProvider$1 } from '@shopify/polaris';\nimport englishI18n from '@shopify/polaris/locales/en.json' with { type: 'json' };\nimport { APP_BRIDGE_URL } from '../../const.mjs';\nimport { RemixPolarisLink } from '../RemixPolarisLink.mjs';\n\n/**\n * Sets up the Polaris `AppProvider` and injects the App Bridge script.\n *\n * This component extends the [`AppProvider`](https://polaris.shopify.com/components/utilities/app-provider) component\n * from Polaris, and accepts all of its props except for `linkComponent`, which is overridden to use the Remix `Link`\n * component.\n *\n * {@link https://polaris.shopify.com/components/utilities/app-provider}\n * {@link https://shopify.dev/tools/app-bridge}\n *\n * @example\n * <caption>Set up AppProvider.</caption>\n * <description>Wrap your app in the `AppProvider` component and pass in your API key.</description>\n * ```ts\n * // /app/routes/**\\/*.ts\n * import {authenticate} from '~/shopify.server';\n * import {AppProvider} from '@shopify/shopify-app-remix/react';\n *\n * export async function loader({ request }) {\n *   await authenticate.admin(request);\n *\n *   return json({ apiKey: process.env.SHOPIFY_API_KEY });\n * }\n *\n * export default function App() {\n *   const { apiKey } = useLoaderData();\n *\n *   return (\n *     <AppProvider isEmbeddedApp apiKey={apiKey}>\n *       <Outlet />\n *     </AppProvider>\n *   );\n * }\n * ```\n *\n * @example\n * <caption>Localize Polaris components.</caption>\n * <description>Pass in a different locale for Polaris to translate its components.</description>\n * ```ts\n * // /app/routes/**\\/*.ts\n * import {authenticate} from '~/shopify.server';\n * import {AppProvider} from '@shopify/shopify-app-remix/react';\n *\n * export async function loader({ request }) {\n *   await authenticate.admin(request);\n *\n *   return json({\n *     apiKey: process.env.SHOPIFY_API_KEY,\n *     polarisTranslations: require(\"@shopify/polaris/locales/fr.json\"),\n *   });\n * }\n *\n * export default function App() {\n *   const { apiKey, polarisTranslations } = useLoaderData();\n *\n *   return (\n *     <AppProvider apiKey={apiKey} i18n={polarisTranslations}>\n *       <Outlet />\n *     </AppProvider>\n *   );\n * }\n * ```\n */\nfunction AppProvider(props) {\n    const { children, apiKey, i18n, isEmbeddedApp = true, __APP_BRIDGE_URL = APP_BRIDGE_URL, ...polarisProps } = props;\n    return (jsxs(Fragment, { children: [isEmbeddedApp && jsx(\"script\", { src: __APP_BRIDGE_URL, \"data-api-key\": apiKey }), jsx(AppProvider$1, { ...polarisProps, linkComponent: RemixPolarisLink, i18n: i18n || englishI18n, children: children })] }));\n}\n\nexport { AppProvider };\n//# sourceMappingURL=AppProvider.mjs.map\n","import { jsxs, jsx } from 'react/jsx-runtime';\nimport { createContext, useState, useEffect } from 'react';\n\nconst AppProxyProviderContext = createContext(null);\n/**\n * Sets up a page to render behind a Shopify app proxy, enabling JavaScript and CSS to be loaded from the app.\n *\n * Also provides components that enable using other components such as links and forms within proxies.\n *\n * > Caution:\n * Because Remix doesn't support URL rewriting, any route using this component should <b>match the pathname of the proxy\n * URL exactly</b>, and <b>end in a trailing slash</b> (e.g., `https://<shop>/apps/proxy/`).\n *\n * @example\n * <caption>Wrap a route with an AppProxyProvider component.</caption>\n * <description>Wrap your route component in the `AppProxyProvider` component and pass in your app URL.</description>\n * ```ts\n * // /app/routes/**\\/*.ts\n * import {authenticate} from '~/shopify.server';\n * import {AppProxyProvider} from '@shopify/shopify-app-remix/react';\n *\n * export async function loader({ request }) {\n *   await authenticate.public.appProxy(request);\n *\n *   return json({ appUrl: process.env.SHOPIFY_APP_URL });\n * }\n *\n * export default function App() {\n *   const { appUrl } = useLoaderData();\n *\n *   return (\n *     <AppProxyProvider appUrl={appUrl}>\n *       Page content\n *     </AppProxyProvider>\n *   );\n * }\n * ```\n */\nfunction AppProxyProvider(props) {\n    const { children, appUrl } = props;\n    const [requestUrl, setRequestUrl] = useState();\n    useEffect(() => setRequestUrl(new URL(window.location.href)), [setRequestUrl]);\n    return (jsxs(AppProxyProviderContext.Provider, { value: { appUrl, requestUrl, formatUrl: formatProxyUrl(requestUrl) }, children: [jsx(\"base\", { href: appUrl }), children] }));\n}\nfunction formatProxyUrl(requestUrl) {\n    return (url, addOrigin = true) => {\n        if (!url) {\n            return url;\n        }\n        let finalUrl = url;\n        if (addOrigin && requestUrl && finalUrl.startsWith('/')) {\n            finalUrl = new URL(`${requestUrl.origin}${url}`).href;\n        }\n        if (!finalUrl.endsWith('/')) {\n            finalUrl = `${finalUrl}/`;\n        }\n        return finalUrl;\n    };\n}\n\nexport { AppProxyProvider, AppProxyProviderContext };\n//# sourceMappingURL=AppProxyProvider.mjs.map\n"],"names":["APP_BRIDGE_URL","RemixPolarisLink","React","props","ref","jsx","Link","AppProvider","children","apiKey","i18n","isEmbeddedApp","__APP_BRIDGE_URL","polarisProps","jsxs","Fragment","AppProvider$1","englishI18n","createContext"],"mappings":"mmUAAMA,EAAiB,qDCIjBC,EAAmBC,EAAM,WAAW,CAACC,EAAOC,IAASC,EAAAA,IAAIC,EAAM,CAAE,GAAGH,EAAO,GAAIA,EAAM,KAAOA,EAAM,GAAI,IAAKC,CAAK,CAAA,CAAE,ECiExH,SAASG,EAAYJ,EAAO,CAClB,KAAA,CAAE,SAAAK,EAAU,OAAAC,EAAQ,KAAAC,EAAM,cAAAC,EAAgB,GAAM,iBAAAC,EAAmBZ,EAAgB,GAAGa,CAAA,EAAiBV,EAC7G,OAAQW,OAAKC,EAAAA,SAAU,CAAE,SAAU,CAACJ,GAAiBN,MAAI,SAAU,CAAE,IAAKO,EAAkB,eAAgBH,CAAO,CAAC,EAAGJ,EAAAA,IAAIW,EAAe,CAAE,GAAGH,EAAc,cAAeZ,EAAkB,KAAMS,GAAQO,EAAa,SAAAT,CAAoB,CAAA,CAAC,EAAG,CACrP,CCrEgCU,EAAAA,cAAc,IAAI","x_google_ignoreList":[0,1,2,3]}