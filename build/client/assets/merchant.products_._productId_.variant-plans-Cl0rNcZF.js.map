{"version":3,"file":"merchant.products_._productId_.variant-plans-Cl0rNcZF.js","sources":["../../../node_modules/rizzui/dist/action-icon.js","../../../app/shared/products/edit-variant-plans/components/VariantPlanHeader.tsx","../../../node_modules/rizzui/dist/box.js","../../../app/shared/products/edit-variant-plans/components/VariantSellingPlanActions.tsx","../../../app/shared/products/edit-variant-plans/components/VariantPlanListTable/index.tsx","../../../app/shared/products/edit-variant-plans/components/VariantSellingPlanListing.tsx","../../../app/shared/products/edit-variant-plans/components/VariantSellingPlanManager.tsx","../../../app/shared/products/edit-variant-plans/index.tsx","../../../app/routes/merchant.products_.$productId_.variant-plans.tsx"],"sourcesContent":["'use strict';var chunk5UK7MZZQ_js=require('./chunk-5UK7MZZQ.js');require('./chunk-KYJ5NO63.js'),require('./chunk-XG4FE63T.js'),require('./chunk-ASMPPBDR.js'),require('./chunk-NHF3VARK.js');Object.defineProperty(exports,\"ActionIcon\",{enumerable:true,get:function(){return chunk5UK7MZZQ_js.a}});","import { Link, useParams } from \"@remix-run/react\";\r\nimport { VariantPlanHeaderProps } from \"../types\";\r\nimport { Flex } from \"rizzui/flex\";\r\n// import { ActionIcon } from \"rizzui/action-icon\";\r\nimport { FaArrowLeft } from \"react-icons/fa6\";\r\nimport { Title } from \"rizzui/typography\";\r\nimport { ActionIcon } from \"rizzui/action-icon\";\r\n\r\nconst VariantPlanHeader = ({ product }: VariantPlanHeaderProps) => {\r\n    const { title } = product;\r\n    const { productId } = useParams();\r\n\r\n    return (\r\n        <Flex className=\"w-full\">\r\n            <Link to={`/merchant/products/${productId}`}>\r\n                <ActionIcon variant={\"outline\" as any}>\r\n                    <FaArrowLeft />\r\n                </ActionIcon>\r\n            </Link>\r\n            <Title>Manage variant plans for {title}</Title>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default VariantPlanHeader","'use strict';var chunk6H56GZLN_js=require('./chunk-6H56GZLN.js');require('./chunk-ASMPPBDR.js'),require('./chunk-NHF3VARK.js');Object.defineProperty(exports,\"Box\",{enumerable:true,get:function(){return chunk6H56GZLN_js.a}});","import { Box } from \"rizzui/box\";\r\nimport { Button } from \"rizzui/button\";\r\nimport { Flex } from \"rizzui/flex\";\r\nimport { Loader } from \"rizzui/loader\";\r\n\r\ninterface VariantSellingPlanActionsProps {\r\n    disabled: boolean;\r\n    handleDiscardChanges: () => void;\r\n    handleSaveChanges: () => void;\r\n    isLoading: boolean;\r\n    setIsLoading: (isLoading: boolean) => void;\r\n}\r\n\r\nconst VariantSellingPlanActions = ({\r\n    disabled,\r\n    handleDiscardChanges,\r\n    handleSaveChanges,\r\n    isLoading,\r\n    setIsLoading\r\n}: VariantSellingPlanActionsProps) => {\r\n    return (\r\n        <Flex>\r\n            <Box className=\"ms-auto flex gap-4\">\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={handleDiscardChanges}\r\n                    variant={'outline' as any}\r\n                    color='danger'\r\n                >\r\n                    Discard changes\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={handleSaveChanges}\r\n                    isLoading={isLoading}\r\n                    loader={<Loader variant=\"spinner\" />}\r\n                >\r\n                    Save Changes\r\n                </Button>\r\n            </Box>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default VariantSellingPlanActions","import VariantDetailColumns from './VariantDetailColumns';\r\nimport { ProductVariantNode, SellingPlanEdge } from 'app/types/product/ProductNode';\r\nimport { Checkbox, Table } from 'rizzui';\r\n\r\ninterface VariantPlanListTableProps {\r\n    sellingPlans: SellingPlanEdge[];\r\n    tableData: ProductVariantNode[];\r\n    handleCheckboxChange: (variantId: string, planId: string, checked: boolean) => void;\r\n    variantCheckboxes: Record<string, boolean>;\r\n    handleAllVariantsChange: any,\r\n    allVariantsChecked:any\r\n}\r\n\r\nconst VariantPlanListTable = ({\r\n    sellingPlans,\r\n    tableData,\r\n    handleCheckboxChange,\r\n    variantCheckboxes,\r\n    handleAllVariantsChange,\r\n    allVariantsChecked\r\n}: VariantPlanListTableProps) => {\r\n    return (\r\n        <Table>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.Head>Variant Title</Table.Head>\r\n                    {sellingPlans.map((plan: SellingPlanEdge) => (\r\n                        <Table.Head key={plan.node.id}>{plan.node.name}</Table.Head>\r\n                    ))}\r\n                </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n                <Table.Row>\r\n                    <Table.Head>All</Table.Head>\r\n                    {sellingPlans.map((plan: SellingPlanEdge, planIndex: number) => (\r\n                        <Table.Head key={plan.node.id}>\r\n                            <Checkbox\r\n                                checked={allVariantsChecked[planIndex]}\r\n                                onChange={(e) => handleAllVariantsChange(planIndex, e.target.checked)}\r\n                            />\r\n                        </Table.Head>\r\n                    ))}\r\n                </Table.Row>\r\n\r\n                {tableData.map((variant: ProductVariantNode) => (\r\n                    <Table.Row key={variant.id}>\r\n                        <Table.Cell>\r\n                            <VariantDetailColumns variant={variant} />\r\n                        </Table.Cell>\r\n                        {sellingPlans.map((plan: SellingPlanEdge) => {\r\n                            const key = `${variant.id}-${plan.node.id}`;\r\n                            return (\r\n                                <Table.Cell key={key}>\r\n                                    <Checkbox\r\n                                        checked={variantCheckboxes[key] || false}\r\n                                        onChange={(e) => handleCheckboxChange(variant.id, plan.node.id, e.target.checked)}\r\n                                    />\r\n                                </Table.Cell>\r\n                            );\r\n                        })}\r\n                    </Table.Row>\r\n                ))}\r\n            </Table.Body>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default VariantPlanListTable","import { useFetcher, useNavigate, useSearchParams } from \"@remix-run/react\";\r\nimport { VariantSellingPlanListingProps } from \"../types\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport VariantSellingPlanActions from \"./VariantSellingPlanActions\";\r\nimport { ConfirmationModal } from \"../../selling-plan-groups/components/ConfirmationModal\";\r\nimport VariantPlanListTable from \"./VariantPlanListTable\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nconst VariantSellingPlanListing: React.FC<VariantSellingPlanListingProps> = ({ product }) => {\r\n    const { variants: { nodes }, id } = product;\r\n    const [searchParams] = useSearchParams();\r\n    const groupId = searchParams.get('groupId');\r\n\r\n    const selectedGroup = nodes\r\n        .flatMap((variant) => variant.sellingPlanGroups.edges)\r\n        .find((edge) => edge.node.id === `gid://shopify/SellingPlanGroup/${groupId}`);\r\n    const sellingPlans = selectedGroup?.node.sellingPlans.edges || [];\r\n    const [allVariantsChecked, setAllVariantsChecked] = useState<boolean[]>(sellingPlans.map(() => false));\r\n    const [variantCheckboxes, setVariantCheckboxes] = useState<{ [key: string]: boolean }>({});\r\n    const [originalVariantCheckboxes, setOriginalVariantCheckboxes] = useState<{ [key: string]: boolean }>({});\r\n    const [isModified, setIsModified] = useState(false);\r\n    const [showConfirmationModal, setShowConfirmationModal] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const tableData = useMemo(() => (nodes ? nodes : []), [product]);\r\n    const fetcher = useFetcher<any>();\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        const initialCheckboxes: { [key: string]: boolean } = {};\r\n        console.log('sellingPlans', sellingPlans);\r\n        tableData.forEach((variant) => {\r\n            sellingPlans.forEach((plan: any) => {\r\n                const key = `${variant.id}-${plan.node.id}`;\r\n\r\n                // Default assumption: Use existing selling plan assignment\r\n                let hasSellingPlan = variant.sellingPlanGroups.edges\r\n                    .find((edge: any) => edge.node.id === `gid://shopify/SellingPlanGroup/${groupId}`)\r\n                    ?.node.sellingPlans.edges.some((edge: any) => edge.node.id === plan.node.id);\r\n\r\n                // Retrieve metafields (if available)\r\n                const metafieldNodes = plan?.node?.metafields?.nodes || [];\r\n                const restrictedMetafield = metafieldNodes.find((m: any) => m.key === \"restrictedVariants\");\r\n                const addedMetafield = metafieldNodes.find((m: any) => m.key === \"addedVariants\");\r\n\r\n                // If metafields exist, override the default state\r\n                if (metafieldNodes.length > 0) {\r\n                    const restrictedVariants = restrictedMetafield ? JSON.parse(restrictedMetafield.value) : [];\r\n                    const addedVariants = addedMetafield ? JSON.parse(addedMetafield.value) : [];\r\n\r\n                    if (restrictedVariants.includes(variant.id)) {\r\n                        hasSellingPlan = false; // Uncheck if in restrictedVariants\r\n                    } else if (addedVariants.includes(variant.id)) {\r\n                        hasSellingPlan = true; // Check if in addedVariants\r\n                    }\r\n                }\r\n\r\n                initialCheckboxes[key] = hasSellingPlan || false;\r\n            });\r\n        });\r\n\r\n        setVariantCheckboxes(initialCheckboxes);\r\n        setOriginalVariantCheckboxes(initialCheckboxes); // Store the original state\r\n\r\n        // Check if all variants are selected for each plan\r\n        const initialAllVariantsChecked = sellingPlans.map((plan) =>\r\n            tableData.every((variant) => initialCheckboxes[`${variant.id}-${plan.node.id}`])\r\n        );\r\n\r\n        setAllVariantsChecked(initialAllVariantsChecked);\r\n        setIsModified(false); // Reset modification tracking\r\n    }, [tableData, sellingPlans, groupId]);\r\n\r\n\r\n    const handleCheckboxChange = (variantId: string, planId: string, checked: boolean) => {\r\n        setVariantCheckboxes((prev) => {\r\n            const newCheckboxes = { ...prev, [`${variantId}-${planId}`]: checked };\r\n            const allChecked = tableData.every((variant) => newCheckboxes[`${variant.id}-${planId}`]);\r\n\r\n            setAllVariantsChecked((prev) => {\r\n                const newAllVariantsChecked = [...prev];\r\n                const planIndex = sellingPlans.findIndex((plan) => plan.node.id === planId);\r\n                if (planIndex !== -1) {\r\n                    newAllVariantsChecked[planIndex] = allChecked;\r\n                }\r\n                return newAllVariantsChecked;\r\n            });\r\n\r\n            setIsModified(true); // Mark changes as modified\r\n            return newCheckboxes;\r\n        });\r\n    };\r\n\r\n    const handleDiscardChanges = () => {\r\n        setVariantCheckboxes(originalVariantCheckboxes); // Reset to original values\r\n        setIsModified(false);\r\n    };\r\n\r\n    const handleAllVariantsChange = (planIndex: number, checked: boolean) => {\r\n        setAllVariantsChecked((prev) => {\r\n            const newAllVariantsChecked = [...prev];\r\n            newAllVariantsChecked[planIndex] = checked;\r\n            return newAllVariantsChecked;\r\n        });\r\n\r\n        setVariantCheckboxes((prev) => {\r\n            const newCheckboxes = { ...prev };\r\n            tableData.forEach((variant) => {\r\n                const key = `${variant.id}-${sellingPlans[planIndex].node.id}`;\r\n                newCheckboxes[key] = checked;\r\n            });\r\n            return newCheckboxes;\r\n        });\r\n\r\n        setIsModified(true);\r\n    };\r\n\r\n    const handleSaveChanges = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            const transformedVariantData = transformShopifyData(variantCheckboxes);\r\n            const variantData = {\r\n                groupId,\r\n                transformedVariantData\r\n            }\r\n            const formData = new FormData();\r\n            formData.append(\"variantData\", JSON.stringify(variantData));\r\n            formData.append(\"productId\", id!);\r\n            formData.append(\"appId\", product.currentAppInstallation.app.id);\r\n            fetcher.submit(formData, {\r\n                method: \"POST\",\r\n                action: `.`,\r\n                encType: \"multipart/form-data\",\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('Failed to save changes:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n                setTimeout(() => {\r\n                    navigate(-1); \r\n                }, 1000); \r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    const transformShopifyData = (data: any) => {\r\n        let result: { [key: string]: { sellingPlanId: string; restrictedVariants: string[]; addedVariants: string[] } } = {};\r\n\r\n        for (let key in data) {\r\n            let [variantId, sellingPlanId] = key.split('-gid://shopify/SellingPlan/');\r\n            // variantId = variantId.replace(\"gid://shopify/ProductVariant/\", \"\"); // Extract variant ID\r\n            sellingPlanId = `gid://shopify/SellingPlan/${sellingPlanId}`; // Construct selling plan ID\r\n\r\n            if (!result[sellingPlanId]) {\r\n                result[sellingPlanId] = {\r\n                    sellingPlanId: sellingPlanId,\r\n                    restrictedVariants: [],\r\n                    addedVariants: []\r\n                };\r\n            }\r\n\r\n            if (data[key]) {\r\n                result[sellingPlanId].addedVariants.push(variantId);\r\n            } else {\r\n                result[sellingPlanId].restrictedVariants.push(variantId);\r\n            }\r\n        }\r\n\r\n        return Object.values(result);\r\n    }\r\n\r\n    return (\r\n        <div className='w-full flex flex-col gap-4'>\r\n            <VariantSellingPlanActions\r\n                disabled={!isModified}\r\n                handleDiscardChanges={() => setShowConfirmationModal(true)}\r\n                handleSaveChanges={handleSaveChanges}\r\n                isLoading={isLoading}\r\n                setIsLoading={setIsLoading}\r\n            />\r\n            <div className=\"w-full border border-muted rounded-md\">\r\n                <VariantPlanListTable\r\n                    sellingPlans={sellingPlans}\r\n                    tableData={tableData}\r\n                    handleCheckboxChange={handleCheckboxChange}\r\n                    variantCheckboxes={variantCheckboxes}\r\n                    handleAllVariantsChange={handleAllVariantsChange}\r\n                    allVariantsChecked={allVariantsChecked}\r\n                />\r\n            </div>\r\n\r\n            {/* Action Buttons */}\r\n            <VariantSellingPlanActions\r\n                disabled={!isModified}\r\n                handleDiscardChanges={() => setShowConfirmationModal(true)}\r\n                handleSaveChanges={handleSaveChanges}\r\n                isLoading={isLoading}\r\n                setIsLoading={setIsLoading}\r\n            />\r\n\r\n            <ConfirmationModal\r\n                isOpen={showConfirmationModal}\r\n                title=\"Discard Changes\"\r\n                message=\"Are you sure you want to discard all changes?\"\r\n                onConfirm={handleDiscardChanges}\r\n                onCancel={() => {\r\n                    setShowConfirmationModal(false)\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VariantSellingPlanListing","import { Flex } from \"rizzui/flex\";\r\nimport { VariantSellingPlanManagerProps } from \"../types\";\r\nimport VariantSellingPlanListing from \"./VariantSellingPlanListing\";\r\n\r\nconst VariantSellingPlanManager: React.FC<VariantSellingPlanManagerProps> = ({ product }) => {\r\n    return (\r\n        <Flex className=\"mt-5\" direction=\"col\">\r\n            <VariantSellingPlanListing product={product} />\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default VariantSellingPlanManager","import { ProductSingleNode } from \"app/types/product/ProductNode\"\r\nimport VariantPlanHeader from \"./components/VariantPlanHeader\"\r\nimport VariantSellingPlanManager from \"./components/VariantSellingPlanManager\"\r\n\r\ninterface VariantPlanHeaderProps {\r\n    product: ProductSingleNode\r\n}\r\n\r\nexport default function EditVariantPlans({ product }: VariantPlanHeaderProps) {\r\n    return (\r\n        <div className=\"position-relative\">\r\n            <VariantPlanHeader product={product} />\r\n            <VariantSellingPlanManager product={product} />\r\n        </div>\r\n    )\r\n}\r\n","import { ActionFunctionArgs, json } from \"@remix-run/node\";\r\nimport { ERROR_MESSAGES } from \"./merchant.products_.$productId_.plans\";\r\nimport createPlanAPIUtils from \"app/shared/products/create-plans/createPlanAPIUtils\";\r\nimport { UPDATE_SELLING_PLAN_GROUP } from \"app/graphql/mutations/sellingPlans/sellingPlanGroupUpdate\";\r\nimport { generateGraphQLId, ShopifyObjectType } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { useIsMounted } from \"app/packages/hooks/use-is-mounted\";\r\nimport { useAtom } from \"jotai\";\r\nimport { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport { productAtom } from \"app/states/productAtom\";\r\nimport { Loader } from \"rizzui/loader\";\r\nimport EditVariantPlans from \"app/shared/products/edit-variant-plans\";\r\n\r\nexport async function action({\r\n    request,\r\n    params\r\n}: ActionFunctionArgs) {\r\n    if (request.method !== \"POST\") {\r\n        return json({ error: ERROR_MESSAGES.METHOD_NOT_ALLOWED }, { status: 405 });\r\n    }\r\n\r\n    try {\r\n        const admin = await createPlanAPIUtils.authenticateRequest(request);\r\n        if (!admin) return json({ error: ERROR_MESSAGES.UNAUTHORIZED }, { status: 401 });\r\n        const formData = await request.formData();\r\n        const productId = formData.get(\"productId\")?.toString();\r\n        const appGraphqlId = formData.get(\"appId\")?.toString();\r\n        const variantData = formData.get(\"variantData\")?.toString();\r\n        if (!variantData || !productId || !appGraphqlId) return json({ error: ERROR_MESSAGES.REQUIRED_PARAMS_MISSING }, { status: 400 });\r\n        const variantDataJson = JSON.parse(variantData) as Record<any, unknown>;\r\n        const variables = generateRemoveVariantVariables(variantDataJson);\r\n        const result = await createPlanAPIUtils.executeShopifyMutation(\r\n            UPDATE_SELLING_PLAN_GROUP,\r\n            admin,\r\n            variables\r\n        );\r\n        const userErrors = result?.data?.sellingPlanGroupCreate?.userErrors || [];\r\n        if (userErrors.length > 0) {\r\n            return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n        }\r\n\r\n        return json({ success: true }, { status: 200 });\r\n\r\n    } catch (error) {\r\n        console.error(\"Unexpected error:\", error);\r\n        return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n    }\r\n}\r\n\r\nconst generateRemoveVariantVariables = (variantData: Record<any, unknown>) => {\r\n    const { groupId, transformedVariantData } = variantData;\r\n\r\n    const graphqlGroupId = generateGraphQLId(Number(groupId), ShopifyObjectType.SellingPlanGroup);\r\n    const sellingPlansToUpdate = prepareInputUpdateSellingPlans(transformedVariantData)\r\n    return {\r\n        variables: {\r\n            id: graphqlGroupId,\r\n            input: {\r\n                sellingPlansToUpdate\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst prepareInputUpdateSellingPlans = (transformedVariantData: any) => {\r\n    return transformedVariantData.map((plan: any) => ({\r\n        id: plan.sellingPlanId,\r\n        metafields: [\r\n            {\r\n                value:JSON.stringify(plan.restrictedVariants),\r\n                type: \"list.variant_reference\",\r\n                key: \"restrictedVariants\",\r\n                namespace: \"billion-grid-app\"\r\n            },\r\n            {\r\n                value: JSON.stringify(plan.addedVariants),\r\n                type: \"list.variant_reference\",\r\n                key: \"addedVariants\",\r\n                namespace: \"billion-grid-app\"\r\n            }\r\n        ]\r\n    }));\r\n}\r\n\r\nconst SelectVariantPlansHome: React.FC = () => {\r\n    const isMounted = useIsMounted();\r\n    const [product] = useAtom<ProductSingleNode>(productAtom);\r\n\r\n    if (!isMounted) return null;\r\n\r\n    if (!product) {\r\n        return (\r\n            <div className=\"flex justify-center items-center h-screen flex-col\">\r\n                <Loader variant='spinner' className=\"h-8 w-8\" />\r\n                <span className=\"ml-2\">Need to load data here...</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <EditVariantPlans product={product} />\r\n};\r\n\r\n\r\nexport default SelectVariantPlansHome;"],"names":["chunk5UK7MZZQ_js","require$$0","exports","VariantPlanHeader","product","title","productId","useParams","jsxs","Flex","jsx","Link","ActionIcon","FaArrowLeft","Title","chunk6H56GZLN_js","VariantSellingPlanActions","disabled","handleDiscardChanges","handleSaveChanges","isLoading","setIsLoading","Box","Button","Loader","VariantPlanListTable","sellingPlans","tableData","handleCheckboxChange","variantCheckboxes","handleAllVariantsChange","allVariantsChecked","Table","plan","planIndex","Checkbox","e","variant","VariantDetailColumns","key","VariantSellingPlanListing","nodes","id","searchParams","useSearchParams","groupId","selectedGroup","edge","setAllVariantsChecked","useState","setVariantCheckboxes","originalVariantCheckboxes","setOriginalVariantCheckboxes","isModified","setIsModified","showConfirmationModal","setShowConfirmationModal","useMemo","fetcher","useFetcher","navigate","useNavigate","useEffect","initialCheckboxes","hasSellingPlan","_a","metafieldNodes","_c","_b","restrictedMetafield","m","addedMetafield","restrictedVariants","addedVariants","initialAllVariantsChecked","variantId","planId","checked","prev","newCheckboxes","allChecked","newAllVariantsChecked","transformedVariantData","transformShopifyData","variantData","formData","error","toast","data","result","sellingPlanId","ConfirmationModal","VariantSellingPlanManager","EditVariantPlans","SelectVariantPlansHome","isMounted","useIsMounted","useAtom","productAtom","className","children"],"mappings":"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","x_google_ignoreList":[0,2]}