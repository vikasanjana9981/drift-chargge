{"version":3,"file":"merchant.products-CpkxYIyJ.js","sources":["../../../app/packages/utils/replace-underscore-dash.ts","../../../app/packages/components/table-utils/get-status-badge.tsx","../../../app/packages/ui/avatar-card.tsx","../../../app/packages/components/table-utils/get-purchase-type-badge.tsx","../../../app/packages/utils/format-date.ts","../../../app/packages/ui/date-cell.tsx","../../../app/shared/products/product-list/columns.tsx","../../../app/types/product/filtersData.ts","../../../app/shared/products/product-list/filters.tsx","../../../app/shared/products/product-list/table.tsx","../../../app/shared/products/index.tsx","../../../app/routes/merchant.products.tsx"],"sourcesContent":["export function replaceUnderscoreDash(str: string) {\n  return str.replace(/[_-]/g, \" \");\n}\n","\"use client\";\n\nimport cn from \"app/packages/utils/class-names\";\nimport { Badge, Flex, Text } from \"rizzui\";\nimport { replaceUnderscoreDash } from \"app/packages/utils/replace-underscore-dash\";\n\nconst statusColors = {\n  success: [\"text-green-dark\", \"bg-green-dark\"],\n  warning: [\"text-orange-dark\", \"bg-orange-dark\"],\n  danger: [\"text-red-dark\", \"bg-red-dark\"],\n  default: [\"text-gray-600\", \"bg-gray-600\"],\n};\n\nconst allStatus = {\n  online: statusColors.success,\n  offline: statusColors.default,\n  pending: statusColors.warning,\n  paid: statusColors.success,\n  overdue: statusColors.danger,\n  completed: statusColors.success,\n  cancelled: statusColors.danger,\n  publish: statusColors.success,\n  unpublished: statusColors.danger,\n  approved: statusColors.success,\n  rejected: statusColors.danger,\n  active: statusColors.success,\n  deactivated: statusColors.danger,\n  on_going: statusColors.warning,\n  at_risk: statusColors.danger,\n  delayed: statusColors.default,\n  draft: statusColors.default,\n  refunded: statusColors.default,\n};\n\nexport type StatusTypes = keyof typeof allStatus;\n\nexport function getStatusBadge(status: string) {\n  const statusLower = status.toLowerCase() as StatusTypes;\n  if (statusLower in allStatus) {\n    return (\n      <Flex align=\"center\" gap=\"2\" className=\"w-auto\">\n        <Badge renderAsDot className={allStatus[statusLower][1]} />\n        <Text\n          className={cn(\"font-medium capitalize\", allStatus[statusLower][0])}\n        >\n          {replaceUnderscoreDash(statusLower)}\n        </Text>\n      </Flex>\n    );\n  }\n  return (\n    <Flex align=\"center\" gap=\"2\" className=\"w-auto\">\n      <Badge renderAsDot className=\"bg-gray-600\" />\n      <Text className=\"font-medium capitalize text-gray-600\">\n        {replaceUnderscoreDash(statusLower)}\n      </Text>\n    </Flex>\n  );\n}\n","\"use client\";\n\nimport { Text, Avatar, AvatarProps } from \"rizzui\";\nimport cn from \"../utils/class-names\";\n\ninterface AvatarCardProps {\n  src: string;\n  name: string;\n  className?: string;\n  nameClassName?: string;\n  avatarProps?: AvatarProps;\n  description?: React.ReactNode;\n}\n\nexport default function AvatarCard({\n  src,\n  name,\n  className,\n  description,\n  avatarProps,\n  nameClassName,\n}: AvatarCardProps) {\n  return (\n    <figure className={cn(\"flex items-center gap-3\", className)}>\n      <Avatar name={name} src={src} {...avatarProps} />\n      <figcaption className=\"grid gap-0.5\">\n        <Text\n          className={cn(\n            \"font-lexend text-sm font-medium text-gray-900 dark:text-gray-700\",\n            nameClassName\n          )}\n        >\n          {name}\n        </Text>\n        {description && (\n          <Text className=\"text-[13px] text-gray-500\">{description}</Text>\n        )}\n      </figcaption>\n    </figure>\n  );\n}\n","\"use client\";\n\nimport cn from \"app/packages/utils/class-names\";\nimport { Badge, Flex } from \"rizzui\";\nimport { replaceUnderscoreDash } from \"app/packages/utils/replace-underscore-dash\";\n\nconst statusColors = {\n  subscription: [\"text-blue-600\", \"bg-blue-600\"],\n  onetime: [\"text-gray-600\", \"bg-gray-600\"],\n};\n\nexport function getPurchaseTypeBadge(purchaseType: any) {\n  const { oneTime, subscriptions } = purchaseType;\n\n  // If neither oneTime nor subscriptions exist, return null\n  if (!oneTime && !subscriptions) {\n    return null;\n  }\n\n  return (\n    <Flex direction={subscriptions && oneTime ? \"col\" : \"row\"} justify=\"center\" align=\"center\" gap=\"2\" className=\"w-auto\">\n      {subscriptions && (\n        <Badge className={cn(\"px-2 py-1 text-white\", statusColors.subscription[1])}>\n          {replaceUnderscoreDash(\"Subscription\")}\n        </Badge>\n      )}\n      {oneTime && (\n        <Badge className={cn(\"px-2 py-1 text-white\", statusColors.onetime[1])}>\n          {replaceUnderscoreDash(\"One-Time\")}\n        </Badge>\n      )}\n    </Flex>\n  );\n}\n","import dayjs from 'dayjs';\n\nexport function formatDate(\n  date?: Date,\n  format: string = 'DD MMM, YYYY'\n): string {\n  if (!date) return '';\n  return dayjs(date).format(format);\n}\n","import cn from '../utils/class-names';\nimport { formatDate } from '../utils/format-date';\n\ninterface DateCellProps {\n  date: Date;\n  className?: string;\n  dateFormat?: string;\n  dateClassName?: string;\n  timeFormat?: string;\n  timeClassName?: string;\n}\n\nexport default function DateCell({\n  date,\n  className,\n  timeClassName,\n  dateClassName,\n  dateFormat = 'MMMM D, YYYY',\n  timeFormat = 'h:mm A',\n}: DateCellProps) {\n  return (\n    <div className={cn('grid gap-1', className)}>\n      <time\n        dateTime={formatDate(date, 'YYYY-MM-DD')}\n        className={cn('font-medium text-gray-700', dateClassName)}\n      >\n        {formatDate(date, dateFormat)}\n      </time>\n      <time\n        dateTime={formatDate(date, 'HH:mm:ss')}\n        className={cn('text-[13px] text-gray-500', timeClassName)}\n      >\n        {formatDate(date, timeFormat)}\n      </time>\n    </div>\n  );\n}\n","'use client';\n\nimport { getStatusBadge } from 'app/packages/components/table-utils/get-status-badge';\nimport AvatarCard from 'app/packages/ui/avatar-card';\nimport { createColumnHelper } from '@tanstack/react-table';\nimport { Checkbox, Text } from 'rizzui';\nimport { Link } from '@remix-run/react';\nimport { TableData } from 'app/types/product/tableData';\nimport { getPurchaseTypeBadge } from 'app/packages/components/table-utils/get-purchase-type-badge';\nimport DateCell from 'app/packages/ui/date-cell';\n\nconst columnHelper = createColumnHelper<TableData>();\n\nexport const productsListColumns = [\n  columnHelper.display({\n    id: 'select',\n    size: 50,\n    header: ({ table }) => (\n      <Checkbox\n        className=\"ps-3.5\"\n        aria-label=\"Select all rows\"\n        checked={table.getIsAllPageRowsSelected()}\n        onChange={() => table.toggleAllPageRowsSelected()}\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        className=\"ps-3.5\"\n        aria-label=\"Select row\"\n        checked={row.getIsSelected()}\n        onChange={() => row.toggleSelected()}\n      />\n    ),\n  }),\n\n  columnHelper.display({\n    id: 'product',\n    size: 300,\n    header: 'Product',\n    cell: ({ row }) => (\n      <AvatarCard\n        src={row.original.image.url || ''}\n        name={row.original.title}\n        description={`${row.original.variantsCount} variants`}\n        avatarProps={{\n          name: row.original.title,\n          size: 'lg',\n          className: 'rounded-lg',\n        }}\n      />\n\n    ),\n  }),\n\n  columnHelper.display({\n    id: 'status',\n    size: 150,\n    header: 'Shopify status',\n    enableSorting: false,\n    cell: ({ row }) => {\n      return (\n        <div>\n          <div>\n            <span>Product</span>\n            <span>\n              {getStatusBadge(row.original.status)}\n            </span>\n          </div>\n        </div>\n      )\n    }\n  }),\n\n  columnHelper.display({\n    id: 'purchase_type',\n    size: 150,\n    header: 'Purchase types',\n    cell: ({ row }) => {\n      const { purchaseType } = row.original;\n      return getPurchaseTypeBadge(purchaseType)\n    }\n  }),\n\n  columnHelper.display({\n    id: 'frquencies',\n    size: 150,\n    header: 'Selling Plans ',\n    cell: ({ row }) => <Text className=\"text-sm\">{row.original.sellingPlanGroupsCount}</Text>,\n  }),\n\n  columnHelper.display({\n    id: 'createdAt',\n    size: 150,\n    header: 'Created At',\n    cell: ({ row }) => <DateCell date={new Date(row.original.createdAt)} />,\n  }),\n  \n];\n","export enum ProductStatus {\r\n    ACTIVE = \"ACTIVE\",\r\n    ARCHIVED = \"ARCHIVED\",\r\n    DRAFT = \"DRAFT\",\r\n}\r\n\r\nexport enum ProductPublicationStatus {\r\n    APPROVED = \"approved\",\r\n    REJECTED = \"rejected\",\r\n    NEEDS_ACTION = \"needs_action\",\r\n    AWAITING_REVIEW = \"awaiting_review\",\r\n    PUBLISHED = \"published\",\r\n    DEMOTED = \"demoted\",\r\n    SCHEDULED = \"scheduled\",\r\n    PROVISIONALLY_PUBLISHED = \"provisionally_published\",\r\n}\r\n\r\n// Corrected Mapping for Display Labels\r\nexport const ProductPublicationStatusLabels: Record<ProductPublicationStatus, string> = {\r\n    [ProductPublicationStatus.APPROVED]: \"Approved\",\r\n    [ProductPublicationStatus.REJECTED]: \"Rejected\",\r\n    [ProductPublicationStatus.NEEDS_ACTION]: \"Needs Action\",\r\n    [ProductPublicationStatus.AWAITING_REVIEW]: \"Awaiting Review\",\r\n    [ProductPublicationStatus.PUBLISHED]: \"Published\",\r\n    [ProductPublicationStatus.DEMOTED]: \"Demoted\",\r\n    [ProductPublicationStatus.SCHEDULED]: \"Scheduled\",\r\n    [ProductPublicationStatus.PROVISIONALLY_PUBLISHED]: \"Provisionally Published\",\r\n};\r\n\r\n// Fixed `publicationStatusOptions` Mapping\r\nexport const publicationStatusOptions = Object.values(ProductPublicationStatus).map((status) => ({\r\n    value: status,\r\n    label: ProductPublicationStatusLabels[status],\r\n}));\r\n\r\n\r\n// Mapping object for display labels\r\nexport const ProductStatusLabels: Record<ProductStatus, string> = {\r\n    [ProductStatus.ACTIVE]: \"Active\",\r\n    [ProductStatus.ARCHIVED]: \"Archived\",\r\n    [ProductStatus.DRAFT]: \"Draft\",\r\n};\r\n\r\nexport const statusOptions = Object.values(ProductStatus).map((status) => ({\r\n    value: status,\r\n    label: ProductStatusLabels[status],\r\n}));\r\n\r\n\r\nexport type FiltersHandlerType = {\r\n    handleStatusChange: (selectedStatus: string | null) => void;\r\n    handleQuerySearch: (query: string, type?: string, SearchByOptions?: { label: string; value: string }[]) => void;\r\n    handlePublishedStatusChange: (query: string) => void;\r\n};\r\n\r\nexport enum PublishedStatus {\r\n    PUBLISHED = \"published\",\r\n    UNPUBLISHED = \"unpublished\",\r\n    \r\n}\r\nexport const PublishedStatusLabels: Record<PublishedStatus, string> = {\r\n    [PublishedStatus.PUBLISHED]: \"Published\",\r\n    [PublishedStatus.UNPUBLISHED]: \"Unpublished\",\r\n};\r\nexport const publishedStatusOptions = Object.values(PublishedStatus).map((status) => ({\r\n    value: status,\r\n    label: PublishedStatusLabels[status], // Use readable labels\r\n}));\r\n\r\nexport enum MainAppFilters {\r\n    QUERY = \"query\",\r\n    STORESTATUS = 'onlineStoreStatus',\r\n    CUSTOMEREMAIL = 'customerEmail',\r\n    ID = 'id',\r\n    STATUS = 'status',\r\n    UPDATEDATE = 'updatedAt',\r\n    CREATEDATE = 'createdAt',\r\n    LASTBILLINGATTEMPTERROR = 'lastBillingAttemptError',\r\n}","'use client';\n\nimport DateFiled from 'app/packages/components/controlled-table/date-field';\nimport PriceField from 'app/packages/components/controlled-table/price-field';\nimport StatusField from 'app/packages/components/controlled-table/status-field';\nimport { FilterDrawerView } from 'app/packages/components/controlled-table/table-filter';\nimport ToggleColumns from 'app/packages/components/table-utils/toggle-columns';\nimport { getDateRangeStateValues } from 'app/packages/utils/get-formatted-date';\nimport { type Table as ReactTableType } from '@tanstack/react-table';\nimport { useEffect, useState } from 'react';\nimport {\n  PiFunnel,\n  PiMagnifyingGlassBold,\n  PiTrash,\n  PiTrashDuotone,\n} from 'react-icons/pi';\nimport { Badge, Button, Flex, Input, Text } from 'rizzui';\nimport { FiltersHandlerType, ProductPublicationStatus, ProductPublicationStatusLabels, ProductStatus, ProductStatusLabels, publicationStatusOptions, PublishedStatus, PublishedStatusLabels, publishedStatusOptions, statusOptions } from 'app/types/product/filtersData';\nimport { messages } from 'app/config/messages';\nimport { useSearchParams } from '@remix-run/react';\nimport { useDebounce } from 'app/packages/hooks/use-debounce';\n\ninterface TableToolbarProps<T extends Record<string, any>> {\n  table: ReactTableType<T>;\n  filtersHanlder: FiltersHandlerType\n}\n\nexport default function Filters<TData extends Record<string, any>>({\n  table,\n  filtersHanlder\n}: TableToolbarProps<TData>) {\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const isMultipleSelected = table.getSelectedRowModel().rows.length > 1;\n  const {\n    options: { meta },\n  } = table;\n\n  const { handleQuerySearch, handleStatusChange, handlePublishedStatusChange } = filtersHanlder\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchValue, setSearchValue] = useState(searchParams.get('query') ?? \"\");\n  const debouncedSearch = useDebounce(searchValue, 300); // ✅ Apply debounce\n\n  // Apply debounced value to the table filter\n  useEffect(() => {\n    handleQuerySearch(debouncedSearch);\n  }, [debouncedSearch]);\n\n  const clearFilters = () => {\n    table.resetGlobalFilter();\n    table.resetColumnFilters();\n    setSearchValue(\"\"); \n    handleQuerySearch(\"\"); \n    handleStatusChange(null); \n    handlePublishedStatusChange(''); \n    setSearchParams({});\n  };\n\n  return (\n    <Flex align=\"center\" justify=\"between\" className=\"mb-4\">\n      <Input\n        type=\"search\"\n        placeholder={messages.products.filters.search.placeholder}\n        value={searchValue}\n        onClear={() => setSearchValue('')}\n        onChange={(e) => setSearchValue(e.target.value)}\n        inputClassName=\"h-9\"\n        clearable={true}\n        prefix={<PiMagnifyingGlassBold className=\"size-4\" />}\n      />\n\n      <FilterDrawerView\n        isOpen={openDrawer}\n        drawerTitle={messages.products.filters.title}\n        setOpenDrawer={setOpenDrawer}\n      >\n        <div className=\"grid grid-cols-1 gap-6\">\n          <FilterElements table={table} filtersHanlder={filtersHanlder} />\n        </div>\n      </FilterDrawerView>\n\n      <Flex align=\"center\" gap=\"3\" className=\"w-auto\">\n        {isMultipleSelected ? (\n          <Button\n            color=\"danger\"\n            variant={\"outline\" as any}\n            className=\"h-[34px] gap-2 text-sm\"\n            onClick={() => { }}\n          >\n            <PiTrash size={18} />\n            Delete\n          </Button>\n        ) : null}\n\n        <Button\n          variant={\"outline\" as any}\n          onClick={() => setOpenDrawer(!openDrawer)}\n          className=\"h-9 pe-3 ps-2.5\"\n        >\n          <PiFunnel className=\"me-1.5 size-[18px]\" strokeWidth={1.7} />\n          Filters\n        </Button>\n\n        <Button variant={\"flat\" as any} className=\"h-9 bg-gray-200/70\" onClick={clearFilters}>\n          <PiTrashDuotone className=\"me-1.5 h-[17px] w-[17px]\" /> Clear Filters\n        </Button>\n\n        <ToggleColumns table={table} />\n      </Flex>\n    </Flex>\n  );\n}\n\nfunction FilterElements<T extends Record<string, any>>({\n  table,\n  filtersHanlder\n}: TableToolbarProps<T>) {\n  // const priceFieldValue = (table.getColumn('amount')?.getFilterValue() ?? [\n  //   '',\n  //   '',\n  // ]) as string[];\n  // const createdDate = table.getColumn('createdAt')?.getFilterValue() ?? ([null, null] as any);\n  // const dueDate = table.getColumn('dueDate')?.getFilterValue() ?? ([null, null] as any);\n  // const isFiltered = table.getState().globalFilter || table.getState().columnFilters.length > 0;\n  const { handleStatusChange, handlePublishedStatusChange } = filtersHanlder\n  const [searchParams] = useSearchParams();\n\n  return (\n    <>\n      <StatusField\n        options={statusOptions}\n        value={searchParams.get('status')}\n        onChange={(value: string) => {\n          handleStatusChange(value);\n        }\n        }\n        getOptionValue={(option: { value: any }) => option.value}\n        getOptionDisplayValue={(option: { value: any }) =>\n          renderOptionDisplayValue(option.value)\n        }\n        displayValue={(selected: any) => renderOptionDisplayValue(selected)}\n        dropdownClassName=\"!z-20 h-auto top-15\"\n        className={'w-auto'}\n        label={`${messages.products.filters.status.title}`}\n      />\n\n      <StatusField\n        options={publishedStatusOptions}\n        value={searchParams.get('onlineStoreStatus')}\n        onChange={(value: string) => {\n          handlePublishedStatusChange(value);\n        }\n        }\n        getOptionValue={(option: { value: any }) => option.value}\n        getOptionDisplayValue={(option: { value: any }) =>\n          renderPublishedStatusOption(option.value)\n        }\n        displayValue={(selected: any) => renderPublishedStatusOption(selected)}\n        dropdownClassName=\"!z-20 h-auto top-15\"\n        className={'w-auto'}\n        label={`${messages.products.filters.publishedStatus.title}`}\n      />\n\n\n\n\n      {/* <PriceField\n        value={priceFieldValue}\n        onChange={(v) => table.getColumn('amount')?.setFilterValue(v)}\n        label=\"Amount\"\n      /> */}\n      {/* <DateFiled\n        selectsRange\n        dateFormat={'dd-MMM-yyyy'}\n        className=\"w-full\"\n        placeholderText=\"Select created date\"\n        endDate={getDateRangeStateValues(createdDate[1])!}\n        selected={getDateRangeStateValues(createdDate[0])}\n        startDate={getDateRangeStateValues(createdDate[0])!}\n        onChange={(date) => table.getColumn('createdAt')?.setFilterValue(date)}\n        inputProps={{\n          label: 'Created Date',\n        }}\n      /> */}\n      {/* {isFiltered && (\n        <Button\n          size=\"sm\"\n          onClick={() => {\n            table.resetGlobalFilter();\n            table.resetColumnFilters();\n          }}\n          variant={\"flat\" as any}\n          className=\"h-9 bg-gray-200/70\"\n        >\n          <PiTrashDuotone className=\"me-1.5 h-[17px] w-[17px]\" /> Clear\n        </Button>\n      )} */}\n    </>\n  );\n}\n\n\nexport function renderPublishedStatusOption(value: PublishedStatus) {\n  switch (value) {\n    case PublishedStatus.PUBLISHED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"success\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-green-dark\">\n            {PublishedStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case PublishedStatus.UNPUBLISHED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"danger\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-red-dark\">\n            {PublishedStatusLabels[value]}\n          </Text>\n        </div>\n      );\n\n  }\n}\n\n\nexport function renderPublicationStatusOption(value: ProductPublicationStatus) {\n  switch (value) {\n    case ProductPublicationStatus.APPROVED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"success\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-green-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.REJECTED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"danger\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-red-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.NEEDS_ACTION:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"warning\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-orange-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.AWAITING_REVIEW:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"info\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-blue-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.PUBLISHED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"primary\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-blue-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.DEMOTED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"info\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-gray-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.SCHEDULED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"secondary\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-purple-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.PROVISIONALLY_PUBLISHED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"secondary\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-gray-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    default:\n      return (\n        <div className=\"flex items-center\">\n          <Badge renderAsDot className=\"bg-gray-400\" />\n          <Text className=\"ms-2 font-medium capitalize text-gray-600\">\n            Unknown\n          </Text>\n        </div>\n      );\n  }\n}\n\n\n\nexport function renderOptionDisplayValue(value: ProductStatus) {\n  switch (value) {\n    case ProductStatus.ACTIVE:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"success\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-green-dark\">\n            {ProductStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductStatus.ARCHIVED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"warning\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-orange-dark\">\n            {ProductStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductStatus.DRAFT:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"danger\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-red-dark\">\n            {ProductStatusLabels[value]}\n          </Text>\n        </div>\n      );\n  }\n}\n","'use client';\n\nimport { useTanStackTable } from 'app/packages/components/table/custom/use-TanStack-Table';\nimport TablePagination from 'app/packages/components/table/pagination';\nimport { productsListColumns } from './columns';\nimport Filters from './filters';\nimport TableFooter from 'app/packages/components/table/footer';\nimport { TableClassNameProps } from 'app/packages/components/table/table-types';\nimport cn from 'app/packages/utils/class-names';\nimport {  ProductSingleNode } from 'app/types/product/ProductNode';\nimport { useNavigate } from '@remix-run/react';\nimport { useEffect, useMemo } from 'react';\nimport { TableData } from 'app/types/product/tableData';\nimport { FiltersHandlerType } from 'app/types/product/filtersData';\nimport { usePaginationAndFilterHandlers } from 'app/packages/hooks/use-pagination-and-filters-handler';\nimport { extractNumericId } from 'app/packages/utils/shopifyIdUtils';\nimport { getSellingPlanGroup } from '../product-edit/utils/sellingPlansGroupUtils';\nimport MainTable from 'app/packages/components/table';\n\nexport default function ProductsTable({\n  pageSize,\n  hideFilters = false,\n  hidePagination = false,\n  hideFooter = false,\n  classNames = {\n    container: 'border border-muted rounded-md',\n    rowClassName: 'last:border-0 cursor-pointer',\n  },\n  paginationClassName,\n  responseData\n}: {\n  pageSize?: number;\n  hideFilters?: boolean;\n  hidePagination?: boolean;\n  hideFooter?: boolean;\n  classNames?: TableClassNameProps;\n  paginationClassName?: string;\n  responseData: any\n}) {\n\n  const {\n    handlePageSizeChange,\n    handlePageChange,\n    handleStatusChange,\n    handlePublishedStatusChange,\n    handleQuerySearch,\n  } = usePaginationAndFilterHandlers();\n  const navigate = useNavigate();\n\n  const { response: { products: { pageInfo } } } = responseData;\n\n  // Transform GraphQL response to fit `useTanStackTable`\n  const tableData = useMemo(() => (responseData ? transformShopifyProducts(responseData, navigate) : []), [responseData]);\n\n\n  const { table, setData } = useTanStackTable<TableData>({\n    tableData: tableData,\n    columnConfig: productsListColumns,\n    options: {\n      initialState: {\n        pagination: {\n          pageIndex: 0,\n          pageSize: pageSize,\n        },\n      },\n      enableColumnResizing: false,\n    },\n  });\n\n  const selectedData = table\n    .getSelectedRowModel()\n    .rows.map((row) => row.original);\n\n  function handleExportData() {\n    console.log('handleExportData products table')\n  }\n\n  const filtersHanlder: FiltersHandlerType = {\n    handleStatusChange,\n    handleQuerySearch,\n    handlePublishedStatusChange\n  }\n\n  // Update table data here \n  useEffect(() => {\n    setData(tableData)\n  }, [tableData, setData]);\n\n  return (\n    <>\n      {!hideFilters && <Filters table={table} filtersHanlder={filtersHanlder} />}\n      <MainTable table={table} variant=\"modern\" classNames={classNames} />\n      {!hideFooter && <TableFooter table={table} onExport={handleExportData} />}\n      {!hidePagination && (\n        <TablePagination\n          table={table}\n          className={cn('py-4', paginationClassName)}\n          onPageSizeChange={handlePageSizeChange}\n          pageInfo={pageInfo}\n          onPageChange={(cursor, action) => handlePageChange(cursor, action)}\n        />\n      )}\n    </>\n  );\n}\n\nconst transformShopifyProducts = (responseData: any, navigate: any): TableData[] => {\n  const { response: { products } } = responseData;\n  \n  return products.edges.map(({ node }: any) => ({\n    id: node.id, // Ensure each row has a unique `id`\n    title: node.title,\n    handle: node.handle,\n    createdAt: node.createdAt,\n    requiresSellingPlan: node.requiresSellingPlan,\n    status: node.status,\n    image: {\n      url: node.featuredMedia?.preview?.image?.url,\n      alt: node.featuredMedia?.alt\n    },\n    variantsCount: node?.variantsCount?.count,\n    onlineStorePreviewUrl: node?.onlineStorePreviewUrl,\n    numericId: extractNumericId(node.id),\n    purchaseType: getSellingPlanGroups(node, responseData),\n    sellingPlanGroupsCount: getSellingPlanGroupsCount(node, responseData),\n    onRowClick: () => navigate(`/merchant/products/${extractNumericId(node.id)}`)\n  }));\n};\n\nconst getSellingPlanGroupsCount = (node: ProductSingleNode, responseData: any) => {\n  const appIdGraphQL = responseData?.response?.currentAppInstallation?.app?.id || \"\";\n  const appIdNumeric = extractNumericId(appIdGraphQL);\n\n  const filteredPlans = node.sellingPlanGroups.edges.filter(\n    (edge: any) => extractNumericId(edge.node.appId) === appIdNumeric\n  );\n\n  return filteredPlans.length\n}\n\nconst getSellingPlanGroups = (node: ProductSingleNode, responseData: any) => {\n  if (!node?.sellingPlanGroups?.edges?.length) {\n    return { oneTime: false, subscriptions: false };\n  }\n\n  const appIdGraphQL = responseData?.response?.currentAppInstallation?.app?.id || \"\";\n  const appIdNumeric = extractNumericId(appIdGraphQL);\n\n  const filteredPlans = node.sellingPlanGroups.edges.filter(\n    (edge: any) => extractNumericId(edge.node.appId) === appIdNumeric\n  );\n\n  const hasOneTimeGroup = Boolean(getSellingPlanGroup(filteredPlans as any, \"Onetime Plan Group\"));\n  const hasSubscriptionGroups =\n    Boolean(getSellingPlanGroup(filteredPlans as any, \"PayPerShipment Plan Group\")) ||\n    Boolean(getSellingPlanGroup(filteredPlans as any, \"PrePaid Plan Group\"));\n\n  return {\n    oneTime: hasOneTimeGroup,\n    subscriptions: hasSubscriptionGroups,\n  };\n};\n","import { routes } from 'app/config/routes';\r\nimport PageHeader from '../page-header';\r\nimport { Link } from '@remix-run/react';\r\nimport ProductsTable from './product-list/table';\r\nimport { PageInfo, ProductsQueryResponse } from 'app/types/product/ProductNode';\r\n\r\nconst pageHeader = {\r\n  title: 'Products',\r\n  breadcrumb: [\r\n    {\r\n      href: routes.products.products,\r\n      name: 'Products',\r\n    },\r\n    {\r\n      name: 'List',\r\n    },\r\n  ],\r\n};\r\n\r\nexport default function Products({\r\n  responseData,\r\n  first\r\n}: {\r\n  responseData: any,\r\n  first: number\r\n  \r\n}) {\r\n  return (\r\n    <>\r\n      <PageHeader title={pageHeader.title} breadcrumb={pageHeader.breadcrumb}>\r\n        <div className=\"mt-4 flex items-center gap-3 lg:mt-0\">\r\n          <Link\r\n            to={routes.products.products}\r\n            className=\"w-full lg:w-auto\"\r\n          >\r\n          </Link>\r\n        </div>\r\n      </PageHeader>\r\n\r\n      <ProductsTable responseData={responseData} pageSize={first}  />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n","import { LoaderFunctionArgs, redirect } from '@remix-run/node';\r\nimport { useLoaderData, useMatches } from '@remix-run/react';\r\nimport { PRODUCTS_QUERY } from 'app/graphql/queries/products/queryProducts';\r\nimport { CURRENT_APP_INSTALLATION } from 'app/graphql/queries/queryCurrentAppInstallation';\r\nimport { CURRENT_SHOP } from 'app/graphql/queries/queryShop';\r\nimport { useIsMounted } from 'app/packages/hooks/use-is-mounted';\r\nimport { getAuthCookie, mergeQueryParams } from 'app/packages/utils/cookieAuth';\r\nimport Products from 'app/shared/products';\r\nimport { authenticate } from 'app/shopify.server';\r\nimport { MainAppFilters, ProductStatus } from 'app/types/product/filtersData';\r\nimport { ProductFilterQuery } from 'app/types/product/productFilterQuery';\r\nimport { ProductsQueryResponse } from 'app/types/product/ProductNode';\r\nimport { ProductPaginationNextParams } from 'app/types/product/productPagination';\r\nimport { ProductQueryVariables, ProductSortKeys } from 'app/types/product/productQueryTypes';\r\nimport { AdminApiContextWithoutRest } from 'node_modules/@shopify/shopify-app-remix/dist/ts/server/clients';\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n  const cookieHeader = request.headers.get(\"Cookie\");\r\n  const authData = await getAuthCookie(cookieHeader);\r\n  if (!authData) {\r\n    throw redirect(\"/auth/login\");\r\n  }\r\n\r\n  const url = new URL(request.url);\r\n  const first = Number(url.searchParams.get(\"first\")) || 10;\r\n  const action = url.searchParams.get(\"action\");\r\n  const cursor = url.searchParams.get(\"cursor\") || null;\r\n\r\n  // Determine whether to use `after` or `before`\r\n  const after = action === \"next\" ? cursor : null;\r\n  const before = action === \"prev\" ? cursor : null;\r\n\r\n  // Extract query filters from URL\r\n  const filters: ProductFilterQuery = {\r\n    status: url.searchParams.get(\"status\") as ProductStatus || undefined,\r\n    query: url.searchParams.get(\"query\") || undefined,\r\n    onlineStoreStatus: url.searchParams.get(\"onlineStoreStatus\") || undefined\r\n  };\r\n\r\n  // Generate Shopify-compatible query string\r\n  const shopifyQuery = generateShopifyQuery(filters);\r\n\r\n  // Create a new request with merged query parameters\r\n  const updatedRequest = mergeQueryParams(request, authData.query);\r\n  const response = await authenticate.admin(updatedRequest);\r\n\r\n  if (!response || !response.admin) {\r\n    throw new Error(\"Authentication failed: Admin data missing\");\r\n  }\r\n\r\n  const { admin } = response;\r\n\r\n  // Await the critical data required to render initial state of the page\r\n  const criticalData = await loadCriticalData(admin, { first, after, before }, shopifyQuery);\r\n\r\n  return {\r\n    apiKey: process.env.SHOPIFY_API_KEY || \"\",\r\n    response: criticalData,\r\n    first\r\n  };\r\n};\r\n\r\n/**\r\n * Load data necessary for rendering content above the fold. This is the critical data\r\n * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.\r\n * @param {AdminInstance}\r\n */\r\nconst loadCriticalData = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  pagination: ProductPaginationNextParams,\r\n  query?: string | null\r\n) => {\r\n  //  Generate variables dynamically in the required format\r\n  const variables = generatePaginationVariables(pagination, query);\r\n  const [\r\n    response,\r\n    appResponse,\r\n    shopResponse\r\n  ] = await Promise.all([\r\n    admin.graphql(PRODUCTS_QUERY, variables),\r\n    admin.graphql(CURRENT_APP_INSTALLATION),\r\n    admin.graphql(CURRENT_SHOP),\r\n  ]);\r\n  const [\r\n    { data: { products } },\r\n    { data: { currentAppInstallation } },\r\n    { data: { shop } }\r\n  ] = await Promise.all([\r\n    response.json(),\r\n    appResponse.json(),\r\n    shopResponse.json(),\r\n  ]);\r\n\r\n  // Attach `currentAppInstallation` to the product\r\n  return { response: { products: products, currentAppInstallation, shop } };\r\n};\r\n\r\nconst generateShopifyQuery = (filters: ProductFilterQuery): string | null => {\r\n  const queryParts: string[] = [];\r\n\r\n  Object.entries(filters).forEach(([key, value]) => {\r\n    if (!value) return;\r\n\r\n    switch (key) {\r\n      case MainAppFilters.QUERY:\r\n        queryParts.push(`${value}`);\r\n        break;\r\n      case MainAppFilters.STORESTATUS:\r\n      default:\r\n        queryParts.push(`published_status:\"${value}\"`);\r\n        break;\r\n    }\r\n  });\r\n\r\n  return queryParts.length ? queryParts.join(\" \") : null;\r\n};\r\n\r\n/**\r\n * Utility function to generate the correct GraphQL variables dynamically\r\n *  Ensures correct `first` or `last` usage\r\n *  Removes unnecessary keys from the GraphQL query\r\n */\r\nconst generatePaginationVariables = (\r\n  pagination: ProductPaginationNextParams,\r\n  query?: string | null\r\n): { variables: ProductQueryVariables } => {\r\n  const isGoingBack = !!pagination.before; // Check if navigating backward\r\n\r\n  //  Create partial object first, only setting necessary properties\r\n  let partialVariables: Partial<ProductQueryVariables> = {\r\n    reverse: true,\r\n    sortKey: ProductSortKeys.PUBLISHED_AT,\r\n    query: query || undefined,\r\n  };\r\n\r\n  if (isGoingBack) {\r\n    partialVariables = {\r\n      ...partialVariables,\r\n      last: pagination.first,\r\n      before: pagination.before,\r\n\r\n    };\r\n  } else {\r\n    partialVariables = {\r\n      ...partialVariables,\r\n      first: pagination.first,\r\n      after: pagination.after,\r\n    };\r\n  }\r\n\r\n  // Ensure `first` exists by asserting to `ProductQueryVariables`\r\n  return { variables: partialVariables as ProductQueryVariables };\r\n};\r\n\r\n\r\nconst Home = () => {\r\n  const { apiKey, response, first } = useLoaderData<typeof loader>();\r\n  const isMounted = useIsMounted();\r\n  if (!isMounted) {\r\n    return null;\r\n  }\r\n  return <Products responseData={response} first={first} />\r\n}\r\n\r\nexport default Home"],"names":["replaceUnderscoreDash","str","statusColors","allStatus","getStatusBadge","status","statusLower","Flex","jsx","Badge","Text","cn","AvatarCard","src","name","className","description","avatarProps","nameClassName","Avatar","jsxs","getPurchaseTypeBadge","purchaseType","oneTime","subscriptions","formatDate","date","format","dayjs","DateCell","timeClassName","dateClassName","dateFormat","timeFormat","columnHelper","createColumnHelper","productsListColumns","table","Checkbox","row","ProductStatus","ProductPublicationStatus","ProductPublicationStatusLabels","ProductStatusLabels","statusOptions","PublishedStatus","PublishedStatusLabels","publishedStatusOptions","Filters","filtersHanlder","openDrawer","setOpenDrawer","useState","isMultipleSelected","handleQuerySearch","handleStatusChange","handlePublishedStatusChange","searchParams","setSearchParams","useSearchParams","searchValue","setSearchValue","debouncedSearch","useDebounce","useEffect","clearFilters","Input","messages","e","PiMagnifyingGlassBold","FilterDrawerView","FilterElements","Button","PiTrash","PiFunnel","PiTrashDuotone","ToggleColumns","Fragment","StatusField","value","option","renderOptionDisplayValue","selected","renderPublishedStatusOption","ProductsTable","pageSize","hideFilters","hidePagination","hideFooter","classNames","paginationClassName","responseData","handlePageSizeChange","handlePageChange","usePaginationAndFilterHandlers","navigate","useNavigate","pageInfo","tableData","useMemo","transformShopifyProducts","setData","useTanStackTable","handleExportData","MainTable","TableFooter","TablePagination","cursor","action","products","node","_c","_b","_a","_d","_e","extractNumericId","getSellingPlanGroups","getSellingPlanGroupsCount","appIdGraphQL","appIdNumeric","edge","filteredPlans","hasOneTimeGroup","getSellingPlanGroup","hasSubscriptionGroups","pageHeader","routes","Products","first","PageHeader","Link","Home","apiKey","response","useLoaderData","useIsMounted"],"mappings":"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"}