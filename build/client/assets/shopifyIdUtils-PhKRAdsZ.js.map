{"version":3,"file":"shopifyIdUtils-PhKRAdsZ.js","sources":["../../../app/packages/hooks/use-is-mounted.ts","../../../app/packages/utils/shopifyIdUtils.ts"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\n\nexport function useIsMounted() {\n  const [mounted, setMounted] = useState(false);\n  useEffect(() => setMounted(true), []);\n  return mounted;\n}\n","export function extractNumericId(shopifyGraphQLId: string) {\r\n  if (!shopifyGraphQLId) return null;\r\n\r\n  try {\r\n    // Extract numeric part from Shopify GID (e.g., \"gid://shopify/Product/123456789\")\r\n    const parts = shopifyGraphQLId.split(\"/\");\r\n    const numericId = parts.length > 0 ? parts[parts.length - 1] : null;\r\n    return numericId ? parseInt(numericId, 10) : null;\r\n  } catch (error) {\r\n    console.error(\"Invalid Shopify GraphQL ID:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\nexport enum ShopifyObjectType {\r\n  Product = \"Product\",\r\n  Collection = \"Collection\",\r\n  Order = \"Order\",\r\n  Customer = \"Customer\",\r\n  Variant = \"ProductVariant\",\r\n  SellingPlanGroup = 'SellingPlanGroup',\r\n  SubscriptionContract = 'SubscriptionContract'\r\n}\r\n\r\nexport function generateGraphQLId(numericId: number, type: ShopifyObjectType): string {\r\n  if (!numericId || !type) {\r\n    throw new Error(\"Invalid parameters: numericId and type are required.\");\r\n  }\r\n\r\n  return `gid://shopify/${type}/${numericId}`;\r\n}\r\n\r\n\r\nexport const formatPrice = (price: number | string, format: string): string => {\r\n  if (!format.includes(\"{{amount}}\")) {\r\n    console.warn(\"Invalid money format provided:\", format);\r\n    return price.toString(); // Return price as a fallback\r\n  }\r\n\r\n  return format.replace(\"{{amount}}\", Number(price).toFixed(2)); // Ensures 2 decimal places\r\n};\r\n\r\nexport const formatDate = (isoDate: string, needTime: boolean = true) => {\r\n  const date = new Date(isoDate);\r\n  const options: Intl.DateTimeFormatOptions = {\r\n    month: \"short\",\r\n    day: \"numeric\",\r\n    year: \"numeric\",\r\n    ...(needTime && { hour: \"numeric\", minute: \"2-digit\", hour12: true }) // Include time only if needTime is true\r\n  };\r\n  return date.toLocaleString(\"en-US\", options);\r\n};\r\n\r\n\r\nexport const calculateTotalDiscountedPrice = (lines: any): number => {\r\n  return lines.edges.reduce((total: any, edge: any) => {\r\n    const itemTotal = parseFloat(edge.node.lineDiscountedPrice.amount) * edge.node.quantity;\r\n    return total + itemTotal;\r\n  }, 0);\r\n};\r\n\r\nexport const getTruncatedText = (text: string, wordLimit = 3) => {\r\n  const words = text.split(\" \");\r\n  return words.length > wordLimit ? words.slice(0, wordLimit).join(\" \") + \"...\" : text;\r\n};\r\n\r\nexport const formatToUtcHour = (dateInput:string) => {\r\n  const date = new Date(dateInput);\r\n  date.setUTCMinutes(0, 0, 0); // Reset minutes, seconds, milliseconds to 0\r\n  return date.toISOString().replace('.000', '');\r\n}\r\n"],"names":["useIsMounted","mounted","setMounted","useState","useEffect","extractNumericId","shopifyGraphQLId","parts","numericId","error","formatPrice","price","format","formatDate","isoDate","needTime","date","options","calculateTotalDiscountedPrice","lines","total","edge","itemTotal","getTruncatedText","text","wordLimit","words","formatToUtcHour","dateInput"],"mappings":"wCAIO,SAASA,GAAe,CAC7B,KAAM,CAACC,EAASC,CAAU,EAAIC,EAAAA,SAAS,EAAK,EAC5CC,OAAAA,EAAAA,UAAU,IAAMF,EAAW,EAAI,EAAG,CAAA,CAAE,EAC7BD,CACT,CCRO,SAASI,EAAiBC,EAA0B,CACrD,GAAA,CAACA,EAAyB,OAAA,KAE1B,GAAA,CAEI,MAAAC,EAAQD,EAAiB,MAAM,GAAG,EAClCE,EAAYD,EAAM,OAAS,EAAIA,EAAMA,EAAM,OAAS,CAAC,EAAI,KAC/D,OAAOC,EAAY,SAASA,EAAW,EAAE,EAAI,WACtCC,EAAO,CACN,eAAA,MAAM,8BAA+BA,CAAK,EAC3C,IAAA,CAEX,CAsBa,MAAAC,EAAc,CAACC,EAAwBC,IAC7CA,EAAO,SAAS,YAAY,EAK1BA,EAAO,QAAQ,aAAc,OAAOD,CAAK,EAAE,QAAQ,CAAC,CAAC,GAJlD,QAAA,KAAK,iCAAkCC,CAAM,EAC9CD,EAAM,SAAS,GAMbE,EAAa,CAACC,EAAiBC,EAAoB,KAAS,CACjE,MAAAC,EAAO,IAAI,KAAKF,CAAO,EACvBG,EAAsC,CAC1C,MAAO,QACP,IAAK,UACL,KAAM,UACN,GAAIF,GAAY,CAAE,KAAM,UAAW,OAAQ,UAAW,OAAQ,EAAK,CACrE,EACO,OAAAC,EAAK,eAAe,QAASC,CAAO,CAC7C,EAGaC,EAAiCC,GACrCA,EAAM,MAAM,OAAO,CAACC,EAAYC,IAAc,CAC7C,MAAAC,EAAY,WAAWD,EAAK,KAAK,oBAAoB,MAAM,EAAIA,EAAK,KAAK,SAC/E,OAAOD,EAAQE,GACd,CAAC,EAGOC,EAAmB,CAACC,EAAcC,EAAY,IAAM,CACzD,MAAAC,EAAQF,EAAK,MAAM,GAAG,EACrB,OAAAE,EAAM,OAASD,EAAYC,EAAM,MAAM,EAAGD,CAAS,EAAE,KAAK,GAAG,EAAI,MAAQD,CAClF,EAEaG,EAAmBC,GAAqB,CAC7C,MAAAZ,EAAO,IAAI,KAAKY,CAAS,EAC1B,OAAAZ,EAAA,cAAc,EAAG,EAAG,CAAC,EACnBA,EAAK,YAAA,EAAc,QAAQ,OAAQ,EAAE,CAC9C"}