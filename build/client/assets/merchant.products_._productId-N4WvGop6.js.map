{"version":3,"file":"merchant.products_._productId-N4WvGop6.js","sources":["../../../app/packages/components/dropdown.tsx","../../../app/shared/products/product-edit/productDetails.tsx","../../../app/shared/products/product-edit/components/OneTimePlans.tsx","../../../app/shared/products/product-edit/dropdownConfig.ts","../../../app/shared/products/product-edit/components/PayperShipmentPlansList.tsx","../../../app/shared/products/product-edit/components/PlansGroupsInformation.tsx","../../../app/shared/products/product-edit/components/SubscriptionPlansHeader.tsx","../../../app/shared/products/product-edit/subscriptionPlans.tsx","../../../app/shared/products/product-edit/index.tsx","../../../app/routes/merchant.products_.$productId.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { Dropdown, Button } from \"rizzui\";\r\n// import { FaChevronDown } from \"react-icons/fa6\";\r\nimport { IoChevronDownSharp } from \"react-icons/io5\";\r\n\r\ninterface DropdownOption<T> {\r\n  value: T;\r\n  label: string;\r\n}\r\n\r\ninterface CustomDropdownProps<T> {\r\n  label: string;\r\n  options: DropdownOption<T>[]; // Generic list of dropdown options\r\n  onSelect: (value: T) => void;\r\n  renderOption?: (value: T) => React.ReactNode; // Custom render function\r\n  variant?: \"outline\" | \"solid\" | \"ghost\" | \"text\";\r\n  menuClassName?: string\r\n}\r\n\r\nexport default function CustomDropdown<T>({\r\n  label,\r\n  options,\r\n  onSelect,\r\n  renderOption,\r\n  variant = \"outline\",\r\n  menuClassName\r\n}: CustomDropdownProps<T>) {\r\n  return (\r\n    <Dropdown>\r\n      <Dropdown.Trigger>\r\n        <Button as=\"span\" variant={variant as any}>\r\n          {label} \r\n          {/* <IoChevronDownSharp className=\"ml-2 w-5\" /> */}\r\n        </Button>\r\n      </Dropdown.Trigger>\r\n      <Dropdown.Menu className={menuClassName}>\r\n        {options.map((option) => (\r\n          <Dropdown.Item key={String(option.value)} onClick={() => onSelect(option.value)}>\r\n            {renderOption ? renderOption(option.value) : option.label}\r\n          </Dropdown.Item>\r\n        ))}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n","import { Link } from \"@remix-run/react\";\r\nimport { messages } from \"app/config/messages\";\r\nimport CustomDropdown from \"app/packages/components/dropdown\";\r\nimport cn from \"app/packages/utils/class-names\";\r\nimport { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport { PiArchiveThin, PiGear, PiPencil } from \"react-icons/pi\";\r\nimport { Accordion, Box, Flex, Title } from \"rizzui\";\r\nimport VariantDetailColumns from \"../edit-variant-plans/components/VariantPlanListTable/VariantDetailColumns\";\r\nimport { BsChevronDown } from \"react-icons/bs\";\r\n// import { IoChevronDownSharp } from \"react-icons/io5\"\r\n\r\nenum ConfigureSettings {\r\n    MANAGE_PLANS = \"manage_plans\",\r\n    MANAGE_VARIANTS_PLANS = \"manage_variants_plans\",\r\n}\r\nconst ConfigureSettingsLabels: Record<ConfigureSettings, string> = {\r\n    [ConfigureSettings.MANAGE_PLANS]: \"Manage Plans\",\r\n    [ConfigureSettings.MANAGE_VARIANTS_PLANS]: \"Manage Variants Plans\",\r\n};\r\nconst ConfigureSettingsOptions = Object.values(ConfigureSettings).map((status) => ({\r\n    value: status,\r\n    label: ConfigureSettingsLabels[status], // Use readable labels\r\n}));\r\n\r\nexport default function ProductDetails(\r\n    { productResponse }: {\r\n        productResponse: ProductSingleNode\r\n    }\r\n) {\r\n    return (\r\n        <div className=\"mb-6 flex w-full cursor-pointer flex-col gap-y-4 rounded-[10px] border border-muted p-4 lg:gap-y-6 sm:p-[30px]\">\r\n            <ProductDetailsHeader productResponse={productResponse} />\r\n            <hr />\r\n            <ProductInformation productResponse={productResponse} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProductInformation = ({ productResponse }: { productResponse: ProductSingleNode }) => {\r\n    const { title, descriptionHtml, variants: { nodes } } = productResponse\r\n    return (\r\n        <Flex direction=\"col\">\r\n            <Box className=\"flex gap-4\">\r\n                <img src={productResponse.featuredMedia?.preview?.image?.url || ''} alt={title} />\r\n                <Box>\r\n                    <Link to={`/merchant/products/${productResponse.id}`}>\r\n                        <Title as=\"h3\" className=\"text-base font-medium xl:text-lg\">\r\n                            {title}\r\n                        </Title>\r\n                        {/* How price here */}\r\n                        <div className=\"text-sm\" dangerouslySetInnerHTML={{ __html: descriptionHtml }} />\r\n                    </Link>\r\n                </Box>\r\n            </Box>\r\n            {\r\n                nodes.length && (\r\n                    <ProductVariantBlock productResponse={productResponse} />\r\n                )\r\n            }\r\n        </Flex>\r\n    )\r\n}\r\n\r\nconst ProductDetailsHeader = ({ productResponse }: {\r\n    productResponse: ProductSingleNode\r\n}) => {\r\n    const {\r\n        variants: { nodes }\r\n    } = productResponse\r\n    return <Flex justify=\"between\" align=\"center\" direction=\"col\">\r\n        <div className=\"w-full flex\">\r\n            <Flex align=\"center\">\r\n                <span\r\n                    className={cn(\r\n                        'me-2 inline-flex size-5 items-center justify-center rounded-md [&>svg]:size-5',\r\n                        'text-gray-800 dark:text-gray-500 dark:group-hover:text-gray-700'\r\n                    )}\r\n                >\r\n                    <PiArchiveThin />\r\n                </span>\r\n                <Title as=\"h3\" className=\"text-base font-medium xl:text-lg\">\r\n                    {messages.products.productDetails.title}\r\n                </Title>\r\n            </Flex>\r\n            <CustomDropdown\r\n                label=\"Configure\"\r\n                options={ConfigureSettingsOptions}\r\n                onSelect={handleSelect}\r\n                renderOption={renderConfigureOption}\r\n                variant=\"solid\"\r\n                menuClassName=\"min-w-max whitespace-nowrap\"\r\n            />\r\n        </div>\r\n    </Flex>\r\n}\r\n\r\nconst handleSelect = (value: ConfigureSettings) => {\r\n    console.log(\"Selected:\", value);\r\n};\r\n\r\n// Render function for items\r\nfunction renderConfigureOption(value: ConfigureSettings) {\r\n    return (\r\n        <div className=\"flex items-center\">\r\n            {value === ConfigureSettings.MANAGE_PLANS ? <PiPencil /> : <PiGear />}\r\n            <span className=\"ml-2\">{ConfigureSettingsOptions.find((opt) => opt.value === value)?.label}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const ProductVariantBlock = ({ productResponse }: { productResponse: ProductSingleNode }) => {\r\n    const { variants: { nodes } } = productResponse\r\n    return (\r\n        <Accordion\r\n            className=\"border-b last-of-type:border-b-0\"\r\n        >\r\n            <Accordion.Header className=\"items-start\" >\r\n                {({ open }) => (\r\n                    <div className=\"flex cursor-pointer items-center pb-3 text-md font-semibold\">\r\n                        Variants\r\n                        <BsChevronDown \r\n                            className={cn(\r\n                                \"h-4 w-4 -rotate-90 transform transition-transform duration-300 ms-2\",\r\n                                open && \"-rotate-0\"\r\n                            )}\r\n                        />\r\n                    </div>\r\n                )}\r\n            </Accordion.Header>\r\n            <Accordion.Body className=\"mb-7\">\r\n                {nodes.map((variant) => (\r\n                    <div key={variant.id}>\r\n                        <VariantDetailColumns variant={variant} />\r\n                    </div>\r\n                ))}\r\n            </Accordion.Body>\r\n        </Accordion >\r\n    )\r\n}\r\n\r\n","import { OneTimePlan, SellingPlanPricingPolicyAdjustmentType } from \"app/types/product/sellingPlans\";\r\nimport { Button, Modal, Title, ActionIcon, Loader } from \"rizzui\";\r\nimport { FaClock, FaGift, FaMoneyBill, FaTrash, FaXmark } from \"react-icons/fa6\";\r\nimport cn from \"app/packages/utils/class-names\";\r\nimport { formatPrice } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\nimport { useAtom } from \"jotai\";\r\nimport { productAtom } from \"app/states/productAtom\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport { OneTimePlanForm } from \"../../selling-plan-groups/OneTimePlanSettings/OneTimePlanForm\";\r\nimport { createPlanPageStates } from \"app/states/plansAtom\";\r\nimport { defaultOneTimePlan } from \"../../selling-plan-groups/PayPerShipment/default.plan\";\r\nimport toast from \"react-hot-toast\";\r\nimport { shopObject } from \"app/states/shopAtom\";\r\nimport { ConfirmationModal } from \"../../selling-plan-groups/components/ConfirmationModal\";\r\nimport CheckCircleIcon from \"app/packages/components/icons/check-circle\";\r\n\r\n// Plan Header Component\r\nconst PlanHeader = ({\r\n    planName,\r\n    children,\r\n    className }: {\r\n        planName: string,\r\n        children?: React.ReactNode,\r\n        className?: string\r\n    }) => (\r\n    <div className={cn(\"flex gap-2\", className)}>\r\n        <div className=\"flex gap-2\">\r\n            <FaMoneyBill className=\"text-green-600 text-xl\" />\r\n            <h4 className=\"text-base font-semibold text-gray-900\">\r\n                {planName || \"Unnamed Plan\"}\r\n            </h4>\r\n        </div>\r\n        {children}\r\n    </div>\r\n);\r\n\r\n// Plan Details Component\r\nconst PlanDetails = ({\r\n    pricingPolicyAdjustmentValue,\r\n    pricingPolicyAdjustmentType,\r\n}: {\r\n    pricingPolicyAdjustmentValue: number;\r\n    pricingPolicyAdjustmentType: SellingPlanPricingPolicyAdjustmentType;\r\n}) => {\r\n    const [shop] = useAtom(shopObject);\r\n    const { currencyFormats: { moneyWithCurrencyFormat } } = shop;\r\n    const formattedPrice = useMemo(() => {\r\n        if (pricingPolicyAdjustmentType === \"FIXED_AMOUNT\" || pricingPolicyAdjustmentType === \"PRICE\") {\r\n            return formatPrice(pricingPolicyAdjustmentValue, moneyWithCurrencyFormat);\r\n        }\r\n        return null;\r\n    }, [pricingPolicyAdjustmentValue, pricingPolicyAdjustmentType, moneyWithCurrencyFormat]);\r\n\r\n    return (\r\n        <div className=\"flex justify-between items-center text-sm text-gray-700\">\r\n            <div className=\"flex flex-col gap-1\">\r\n                <p>\r\n                    <FaClock className=\"inline-block text-blue-500 mr-1\" />\r\n                    <strong>Plan Type:</strong> One-time Purchase\r\n                </p>\r\n                {pricingPolicyAdjustmentType === \"PERCENTAGE\" && (\r\n                    <p className=\"text-green-600 font-medium\">\r\n                        <FaGift className=\"inline-block text-yellow-500 mr-1\" />\r\n                        <strong>Discount:</strong> {pricingPolicyAdjustmentValue}%\r\n                    </p>\r\n                )}\r\n                {formattedPrice && (\r\n                    <p className=\"text-green-600 font-medium\">\r\n                        <FaGift className=\"inline-block text-yellow-500 mr-1\" />\r\n                        <strong>\r\n                            {pricingPolicyAdjustmentType === \"FIXED_AMOUNT\" || pricingPolicyAdjustmentType === \"PERCENTAGE\" ? \"Discount:\" : \"Price:\"}\r\n                        </strong> {formattedPrice}\r\n                    </p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Plan Actions Component\r\nconst PlanActions = ({\r\n    OneTimeGroup\r\n}: {\r\n    OneTimeGroup: OneTimePlan\r\n}) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [showDeleteConfirmationModal, setShowDeleteConfirmationModal] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const fetcher = useFetcher<any>();\r\n\r\n\r\n    const handleMangePlanClick = () => {\r\n        setIsModalOpen(true); // Open the modal\r\n    }\r\n\r\n    const handleConfirmDeletePlan = () => {\r\n        setIsLoading(true);\r\n        const { sellingPlanId, groupId } = OneTimeGroup;\r\n        if (!groupId || !sellingPlanId) {\r\n            toast.error(\"Somethink wrong Please try again \");\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"sellingPlanId\", sellingPlanId);\r\n        formData.append(\"groupId\", groupId);\r\n        formData.append(\"action\", 'deleteOneTimePlan');\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <div className=\"flex justify-end gap-2 mt-2\">\r\n            <Button\r\n                variant={\"outline\" as any}\r\n                size=\"sm\"\r\n                onClick={handleMangePlanClick}\r\n            >\r\n                <CheckCircleIcon className=\"mr-1 text-blue-500\" /> Edit\r\n            </Button>\r\n            <Button\r\n                variant={\"outline\" as any}\r\n                size=\"sm\" color=\"danger\"\r\n                onClick={() => setShowDeleteConfirmationModal(true)}\r\n                isLoading={isLoading}\r\n                loader={<Loader variant=\"spinner\" />}\r\n            >\r\n                <FaTrash className=\"mr-1 text-red-500\" /> Delete\r\n            </Button>\r\n\r\n            <OneTimeEditModal\r\n                modalState={isModalOpen}\r\n                setModalState={setIsModalOpen}\r\n            />\r\n            <ConfirmationModal\r\n                isOpen={showDeleteConfirmationModal}\r\n                title=\"Delete Onetime\"\r\n                message=\"Are you sure you want to delete Onetime Plan?\"\r\n                onConfirm={handleConfirmDeletePlan}\r\n                onCancel={() => setShowDeleteConfirmationModal(false)}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst OneTimeEditModal = ({\r\n    modalState,\r\n    setModalState\r\n}: any) => {\r\n    const [productResponse] = useAtom(productAtom);\r\n    const [createPlanPageState, setCreatePlanPageState] = useAtom(createPlanPageStates);\r\n    const fetcher = useFetcher<any>();\r\n    const [loader, setLoader] = useState(false);\r\n    const [currentPlan, setCurrentPlan] = useState<OneTimePlan>(defaultOneTimePlan);\r\n\r\n    // Only initialize `currentPlan` when the modal first opens\r\n    useEffect(() => {\r\n        if (modalState && createPlanPageState?.oneTimeGroup) {\r\n            setCurrentPlan(createPlanPageState.oneTimeGroup);\r\n        }\r\n    }, [modalState]); // Runs only when `modalState` changes\r\n\r\n    const handleChange = <T extends keyof OneTimePlan>(field: T, value: OneTimePlan[T]) => {\r\n        setCurrentPlan((prevPlan) => ({\r\n            ...prevPlan,\r\n            [field]: value\r\n        }));\r\n\r\n        setCreatePlanPageState((prevState: any) => ({\r\n            ...prevState,\r\n            oneTimeGroup: {\r\n                ...prevState.oneTimeGroup,\r\n                [field]: value\r\n            }\r\n        }));\r\n    };\r\n\r\n    const handleSavePlan = async () => {\r\n        setLoader(true);\r\n        const { groupId } = currentPlan;\r\n        if (!groupId) {\r\n            toast.error(\"Please select a group.\");\r\n            setLoader(false);\r\n            return;\r\n        }\r\n        const formData = new FormData();\r\n        formData.append(\"plans\", JSON.stringify(currentPlan));\r\n        formData.append(\"groupId\", groupId);\r\n        formData.append(\"action\", 'updateOneTimePlan');\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setLoader(false);\r\n            setModalState(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalState}\r\n            onClose={() => setModalState(false)}\r\n            overlayClassName=\"backdrop-blur\"\r\n            containerClassName=\"!w-[90%] sm:!w-[600px] !max-w-4xl !shadow-2xl\"\r\n        >\r\n            <div className=\"m-auto px-7 pt-6 pb-8\">\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Edit Plan</Title>\r\n                    <ActionIcon\r\n                        size=\"sm\"\r\n                        variant={\"text\" as any}\r\n                        onClick={() => setModalState(false)}\r\n                    >\r\n                        <FaXmark\r\n                            className=\"h-auto w-6\"\r\n                            strokeWidth={1.8}\r\n                        />\r\n                    </ActionIcon>\r\n                </div>\r\n                <div className=\"w-full\">\r\n                    <OneTimePlanForm\r\n                        currentPlan={currentPlan}\r\n                        onChange={handleChange as any}\r\n                        onSave={handleSavePlan}\r\n                        productTitle={productResponse?.title || \"\"}\r\n                        tabListClassName=\"w-[35%]\"\r\n                        tabPanelClassName=\"w-[79%]\"\r\n                        saveButtonProps={{ isLoading: loader, loader: <Loader variant=\"spinner\" /> }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\n\r\n\r\n// Main OneTimePlansList Component\r\nconst OneTimePlansList = ({\r\n    OneTimeGroup\r\n}: {\r\n    OneTimeGroup: OneTimePlan\r\n}) => {\r\n    const { planName,\r\n        pricingPolicyAdjustmentValue,\r\n        pricingPolicyAdjustmentType\r\n    } = OneTimeGroup;\r\n    return (\r\n        <div className=\"flex w-full cursor-pointer flex-col gap-y-4 rounded-[10px] border border-muted p-4 lg:gap-y-2 sm:p-[30px]\">\r\n            <PlanHeader planName={planName} />\r\n            <PlanDetails\r\n                pricingPolicyAdjustmentValue={pricingPolicyAdjustmentValue}\r\n                pricingPolicyAdjustmentType={pricingPolicyAdjustmentType}\r\n            />\r\n            <PlanActions OneTimeGroup={OneTimeGroup} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OneTimePlansList;\r\n\r\nexport { PlanHeader, PlanDetails, PlanActions };","\r\nexport enum ConfigureSettings {\r\n    MANAGE_PLANS = \"manage_plans\",\r\n    // MANAGE_VARIANTS_PLANS = \"manage_variants_plans\",\r\n}\r\n\r\n// Labels for dropdown items\r\nexport const ConfigureSettingsLabels: Record<ConfigureSettings, string> = {\r\n    [ConfigureSettings.MANAGE_PLANS]: \"Manage Plans\",\r\n    // [ConfigureSettings.MANAGE_VARIANTS_PLANS]: \"Manage Variant Plans\",\r\n};\r\n\r\n// Dropdown options\r\nexport const ConfigureSettingsOptions = Object.values(ConfigureSettings).map((status) => ({\r\n    value: status,\r\n    label: ConfigureSettingsLabels[status],\r\n}));\r\n\r\n","import { useEffect, useState } from \"react\";\r\nimport { PayPerShipmentPlanGroup, PayPerShipmentSellingPlanFrontend } from \"../utils/sellingPlansGroupUtils\";\r\nimport { PlanHeader } from \"./OneTimePlans\";\r\nimport { FaCopy, FaEllipsisVertical, FaGear, FaPencil, FaRepeat, FaShip, FaTag, FaTrash, FaXmark } from \"react-icons/fa6\";\r\nimport { Flex, Text, Title, Box, Dropdown, ActionIcon, Loader, Button, Modal } from \"rizzui\";\r\nimport { messages } from \"app/config/messages\";\r\nimport { closestCenter, DndContext, DragEndEvent } from \"@dnd-kit/core\";\r\nimport { arrayMove, SortableContext, useSortable, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport toast from \"react-hot-toast\";\r\nimport { Link, useFetcher, useNavigate, useParams } from \"@remix-run/react\";\r\nimport { productAtom } from \"app/states/productAtom\";\r\nimport { useAtom } from \"jotai\";\r\nimport { extractNumericId, formatDate } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { ConfirmationModal } from \"../../selling-plan-groups/components/ConfirmationModal\";\r\nimport { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport { PayPerShipmentSellingPlan } from \"app/types/product/sellingPlans\";\r\nimport { OneTimePlanForm } from \"../../selling-plan-groups/OneTimePlanSettings/OneTimePlanForm\";\r\n\r\nconst PayperShipmentPlansList = ({\r\n    shipmentGroup,\r\n    plansKey,\r\n    setRefreshKey\r\n}: {\r\n    shipmentGroup: PayPerShipmentPlanGroup | null;\r\n    plansKey: string,\r\n    setRefreshKey: any\r\n}) => {\r\n    if (!shipmentGroup) return null\r\n    const { groupName, sellingPlans, id } = shipmentGroup;\r\n    const numericSellingPlanGroupId = extractNumericId(id);\r\n    // Sort the sellingPlans array by the \"position\" property\r\n    const sortedSellingPlans = [...sellingPlans].sort((a, b) => a.position - b.position);\r\n    const [sellingPlansState, setSellingPlansState] = useState(sortedSellingPlans);\r\n    const [hasChanges, setHasChanges] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n    const fetcher = useFetcher<any>();\r\n    const [productResponse, setProduct] = useAtom(productAtom);\r\n    const navigate = useNavigate();\r\n    const { productId } = useParams();\r\n\r\n    /** Handles reordering when dragging ends */\r\n    const handleDragEnd = (event: DragEndEvent) => {\r\n        const { active, over } = event;\r\n        if (!over || active.id === over.id) return;\r\n        const oldIndex = sellingPlansState.findIndex(({ id }: PayPerShipmentSellingPlanFrontend) => id === active.id);\r\n        const newIndex = sellingPlansState.findIndex(({ id }: PayPerShipmentSellingPlanFrontend) => id === over.id);\r\n        setSellingPlansState(arrayMove(sellingPlansState, oldIndex, newIndex));\r\n        setHasChanges(true);\r\n    };\r\n\r\n    /** Function to compare two arrays for equality */\r\n    const arraysAreEqual = (arr1: any[], arr2: any[]) => {\r\n        if (arr1.length !== arr2.length) return false;\r\n        return arr1.every((item, index) => item.id === arr2[index].id);\r\n    };\r\n\r\n\r\n    /** Handle save changes */\r\n    const handleSaveChanges = () => {\r\n        const productId = extractNumericId(productResponse.id);\r\n        setLoader(true);\r\n        const formData = new FormData();\r\n        formData.append(\"plans\", JSON.stringify(sellingPlansState));\r\n        formData.append(\"groupId\", id);\r\n        formData.append(\"action\", 'updatePlanOrder');\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `/merchant/products/${productId}`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n\r\n    };\r\n\r\n    const handleMangePlanClick = () => {\r\n        const productId = extractNumericId(productResponse.id);\r\n        navigate(`/merchant/products/${productId}/plans?plansUpdate=yes`)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n                setHasChanges(false); // Reset changes after saving\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setLoader(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <div className=\"flex w-full cursor-pointer flex-col gap-y-6 rounded-[10px] border border-muted p-4 lg:gap-y-2 sm:p-[30px]\">\r\n            <PlanHeader className=\"mb-4 flex-col\" planName={groupName} children={<Text>{messages.products.subscriptionPlanDnD}</Text>} />\r\n            <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\r\n                <SortableContext items={sellingPlansState.map(({ id }: PayPerShipmentSellingPlanFrontend) => id)} strategy={verticalListSortingStrategy}>\r\n                    {/* Render each selling plan */}\r\n                    {sellingPlansState.map((plan) => (\r\n                        <SortablePlan\r\n                            key={plan.id}\r\n                            id={plan.id}\r\n                            plan={plan}\r\n                            shipmentGroup={shipmentGroup}\r\n                            setRefreshKey={setRefreshKey}\r\n                        />\r\n                    ))}\r\n                </SortableContext>\r\n            </DndContext>\r\n\r\n            {/* Conditionally render the Save Changes button */}\r\n            <div className=\"flex items-center justify-end gap-2\">\r\n                <div className=\"flex items-center\">\r\n                    <Button variant={\"text\" as any} onClick={handleMangePlanClick}>\r\n                        <FaGear className=\"text-primary\" />\r\n                        <Text className=\"ms-2 text-primary font-semibold\">Manage plans</Text>\r\n                    </Button>\r\n                    <Link className=\"flex items-center\" to={`/merchant/products/${productId}/variant-plans?groupId=${numericSellingPlanGroupId}`} >\r\n                        <FaGear className=\"text-primary\" />\r\n                        <Text className=\"ms-2 text-primary font-semibold\">Manage variant plans</Text>\r\n                    </Link>\r\n                </div>\r\n                {hasChanges && (\r\n                    <Button\r\n                        onClick={handleSaveChanges}\r\n                        className=\"px-4 py-2 rounded-md text-white bg-blue-500 hover:bg-blue-600\"\r\n                        isLoading={loader}\r\n                        loader={<Loader variant=\"spinner\" />}\r\n                    >\r\n                        Save Changes\r\n                    </Button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst SortablePlan = ({\r\n    id,\r\n    plan,\r\n    shipmentGroup,\r\n    setRefreshKey\r\n}: {\r\n    id: string;\r\n    plan: PayPerShipmentSellingPlanFrontend,\r\n    shipmentGroup: PayPerShipmentPlanGroup,\r\n    setRefreshKey: any\r\n}) => {\r\n    const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id });\r\n\r\n    const style = {\r\n        transform: CSS.Transform.toString(transform),\r\n        transition,\r\n        backgroundColor: '#EDEEF9'\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-4 rounded-lg mt-2\" ref={setNodeRef} style={style} {...attributes} {...listeners}>\r\n            <PlanDetails\r\n                sellingPlan={plan}\r\n                shipmentGroup={shipmentGroup}\r\n                setRefreshKey={setRefreshKey}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst PlanDetails = ({\r\n    sellingPlan,\r\n    shipmentGroup,\r\n    setRefreshKey\r\n}: {\r\n    sellingPlan: PayPerShipmentSellingPlanFrontend,\r\n    shipmentGroup: PayPerShipmentPlanGroup,\r\n    setRefreshKey: any\r\n}) => {\r\n    const planName = sellingPlan.planName || \"Unnamed Plan\";\r\n    const category = sellingPlan.category?.charAt(0).toUpperCase() + sellingPlan.category?.slice(1).toLowerCase() || \"Subscription\";\r\n\r\n    // Ships Every Calculation (from Delivery Policy)\r\n    const deliveryInterval = sellingPlan.deliveryRecurringPolicyInterval || \"MONTH\";\r\n    const deliveryCount = sellingPlan.deliveryRecurringPolicyIntervalCount || 1;\r\n    const shipsEvery = `Ships every ${deliveryCount} ${deliveryInterval.toLowerCase()}${deliveryCount > 1 ? \"s\" : \"\"}.`;\r\n\r\n    // Pricing Policy (Discount)\r\n    const discountValue = sellingPlan.pricingPolicyAdjustmentValue || 0;\r\n    const discountType = sellingPlan.pricingPolicyAdjustmentType?.toLowerCase() || \"fixed amount\";\r\n    const discountText = `${discountValue}% ${discountType}`;\r\n\r\n    return (\r\n        <div className=\"flex flex-col gap-1\">\r\n            <Flex align=\"center\" direction=\"row\" gap=\"2\" justify=\"between\" >\r\n                <Box className=\"flex gap-2\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24px\" height=\"24px\" viewBox=\"0 0 25 25\" fill=\"none\">\r\n                        <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M9.5 8C10.3284 8 11 7.32843 11 6.5C11 5.67157 10.3284 5 9.5 5C8.67157 5 8 5.67157 8 6.5C8 7.32843 8.67157 8 9.5 8ZM9.5 14C10.3284 14 11 13.3284 11 12.5C11 11.6716 10.3284 11 9.5 11C8.67157 11 8 11.6716 8 12.5C8 13.3284 8.67157 14 9.5 14ZM11 18.5C11 19.3284 10.3284 20 9.5 20C8.67157 20 8 19.3284 8 18.5C8 17.6716 8.67157 17 9.5 17C10.3284 17 11 17.6716 11 18.5ZM15.5 8C16.3284 8 17 7.32843 17 6.5C17 5.67157 16.3284 5 15.5 5C14.6716 5 14 5.67157 14 6.5C14 7.32843 14.6716 8 15.5 8ZM17 12.5C17 13.3284 16.3284 14 15.5 14C14.6716 14 14 13.3284 14 12.5C14 11.6716 14.6716 11 15.5 11C16.3284 11 17 11.6716 17 12.5ZM15.5 20C16.3284 20 17 19.3284 17 18.5C17 17.6716 16.3284 17 15.5 17C14.6716 17 14 17.6716 14 18.5C14 19.3284 14.6716 20 15.5 20Z\" fill=\"#121923\" />\r\n                    </svg>\r\n                    <Title className=\"text-lg font-semibold\">{planName}</Title>\r\n                </Box>\r\n                <PlanActions\r\n                    sellingPlan={sellingPlan}\r\n                    shipmentGroup={shipmentGroup}\r\n                    setRefreshKey={setRefreshKey}\r\n                />\r\n            </Flex>\r\n            <Box className=\"ms-8 mt-3\">\r\n                <Text className=\"text-gray-600\">\r\n                    <FaRepeat className=\"inline-block mr-1\" />\r\n                    {category}\r\n                </Text>\r\n                <Text className=\"text-blue-600\">\r\n                    <FaShip className=\"inline-block mr-1\" />\r\n                    {shipsEvery}\r\n                </Text>\r\n                <Text className=\"text-green-600\">\r\n                    <FaTag className=\"inline-block mr-1\" />\r\n                    {discountText}\r\n                </Text>\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst PlanActions = ({\r\n    sellingPlan,\r\n    shipmentGroup,\r\n    setRefreshKey\r\n}: {\r\n    sellingPlan: PayPerShipmentSellingPlanFrontend,\r\n    shipmentGroup: PayPerShipmentPlanGroup,\r\n    setRefreshKey: any\r\n}) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    return (\r\n        <Box className=\"flex items-center\">\r\n            <ActionIcon\r\n                variant={\"text\" as any}\r\n                onPointerDown={(e) => e.stopPropagation()}\r\n                onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    setIsModalOpen(true)\r\n                }}\r\n            >\r\n                <FaPencil className=\"mr-2 h-4 w-4\" />\r\n            </ActionIcon>\r\n            <PlanDropDowns\r\n                sellingPlan={sellingPlan}\r\n                shipmentGroup={shipmentGroup}\r\n                setRefreshKey={setRefreshKey}\r\n\r\n            />\r\n            <SellingPlanEditModal\r\n                modalState={isModalOpen}\r\n                setModalState={setIsModalOpen}\r\n                sellingPlan={sellingPlan}\r\n                shipmentGroup={shipmentGroup}\r\n                setRefreshKey={setRefreshKey}\r\n            />\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst SellingPlanEditModal = ({\r\n    modalState,\r\n    setModalState,\r\n    sellingPlan,\r\n    shipmentGroup,\r\n    setRefreshKey\r\n}: any) => {\r\n    const [currentPlan, setCurrentPlan] = useState<PayPerShipmentSellingPlan>(sellingPlan);\r\n    const [loader, setLoader] = useState(false);\r\n    const fetcher = useFetcher<any>();\r\n    const handleChange = <T extends keyof PayPerShipmentSellingPlan>(field: T, value: PayPerShipmentSellingPlan[T]) => {\r\n        setCurrentPlan((prevPlan) => ({\r\n            ...prevPlan,\r\n            [field]: value\r\n        }));\r\n    };\r\n\r\n    const handleSavePlan = async () => {\r\n        setLoader(true);\r\n        console.log('shipmentGroup', shipmentGroup)\r\n        const formData = new FormData();\r\n        formData.append(\"plans\", JSON.stringify(currentPlan));\r\n        formData.append(\"groupId\", shipmentGroup.id);\r\n        formData.append(\"action\", 'updatePayPerShipmentPlan');\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n                setRefreshKey((prevKey: any) => prevKey + 1);\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setLoader(false);\r\n            setModalState(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalState}\r\n            onClose={() => setModalState(false)}\r\n            overlayClassName=\"backdrop-blur\"\r\n            containerClassName=\"!w-[90%] sm:!w-[600px] !max-w-4xl !shadow-2xl\"\r\n        >\r\n            <div className=\"m-auto px-7 pt-6 pb-8\">\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Edit Plan</Title>\r\n                    <ActionIcon\r\n                        size=\"sm\"\r\n                        variant={\"text\" as any}\r\n                        onClick={() => setModalState(false)}\r\n                        onPointerDown={(e) => e.stopPropagation()}\r\n                    >\r\n                        <FaXmark\r\n                            className=\"h-auto w-6\"\r\n                            strokeWidth={1.8}\r\n                        />\r\n                    </ActionIcon>\r\n                </div>\r\n                <div className=\"w-full\">\r\n                    <OneTimePlanForm\r\n                        currentPlan={currentPlan as any}\r\n                        onChange={handleChange as any}\r\n                        onSave={handleSavePlan}\r\n                        productTitle={\"\"}\r\n                        tabListClassName=\"w-[35%]\"\r\n                        tabPanelClassName=\"w-[79%]\"\r\n                        saveButtonProps={{ isLoading: loader, loader: <Loader variant=\"spinner\" /> }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nconst PlanDropDowns = ({\r\n    sellingPlan,\r\n    shipmentGroup,\r\n    setRefreshKey\r\n}: {\r\n    sellingPlan: PayPerShipmentSellingPlanFrontend,\r\n    shipmentGroup: PayPerShipmentPlanGroup,\r\n    setRefreshKey: any\r\n}) => {\r\n    const fetcher = useFetcher<any>();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [showDeleteConfirmationModal, setShowDeleteConfirmationModal] = useState(false);\r\n    const [product] = useAtom<ProductSingleNode>(productAtom);\r\n\r\n    const handleConfirmDeletePlan = () => {\r\n        setIsLoading(true);\r\n        const { sellingPlanGroups } = product;\r\n        const groupId = shipmentGroup.id;\r\n        const sellingPlanId = sellingPlan.id;\r\n\r\n        if (!groupId || !sellingPlanId) {\r\n            toast.error('Required data missing')\r\n            setIsLoading(false)\r\n            return;\r\n        }\r\n\r\n        const selectedSellingPlanGroup = sellingPlanGroups.edges.find(edge => edge.node.id === groupId)?.node || null;\r\n\r\n        if (!selectedSellingPlanGroup) {\r\n            toast.error('Selling plan group not found')\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"sellingPlanId\", sellingPlanId);\r\n        formData.append(\"groupId\", groupId);\r\n\r\n        const action = isSingleSellingPlan(selectedSellingPlanGroup) ? 'deletePayPerShipmentPlanGroup' : 'deletePayPerShipmentPlan';\r\n        formData.append(\"action\", action);\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    }\r\n\r\n    const isSingleSellingPlan = (sellingPlanGroup: any): boolean => {\r\n        return sellingPlanGroup.sellingPlans.edges.length === 1;\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n                setRefreshKey((prevKey: any) => prevKey + 1);\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n\r\n    return (\r\n        <Dropdown placement=\"bottom-end\" className=\"min-w-250\">\r\n            <Dropdown.Trigger\r\n                className={\"flex items-center\"}\r\n                onPointerDown={(e) => e.stopPropagation()}\r\n                onClick={(e) => e.stopPropagation()}\r\n            >\r\n                <FaEllipsisVertical className=\"h-5 w-5\" />\r\n            </Dropdown.Trigger>\r\n            <Dropdown.Menu className=\"divide-y min-w-[210px]\">\r\n                <div className=\"mb-2\">\r\n                    <Dropdown.Item>\r\n                        <Button className=\"px-0 py-2\" variant={\"text\" as any} >\r\n                            <FaPencil className=\"mr-2 h-4 w-4\" />\r\n                            Edit Plan\r\n                        </Button>\r\n                    </Dropdown.Item>\r\n\r\n                    <Dropdown.Item>\r\n                        <Button\r\n                            isLoading={isLoading}\r\n                            loader={<Loader variant=\"spinner\" />}\r\n                            className=\"px-0 py-2\"\r\n                            variant={\"text\" as any}\r\n                            onPointerDown={(e) => e.stopPropagation()}\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                setShowDeleteConfirmationModal(true)\r\n                            }}\r\n                        >\r\n                            <FaTrash className=\"mr-2 h-4 w-4\" />\r\n                            Delete\r\n                        </Button>\r\n\r\n                        <ConfirmationModal\r\n                            isOpen={showDeleteConfirmationModal}\r\n                            title=\"Delete Plan\"\r\n                            message=\"Are you sure you want to delete Plan?\"\r\n                            onConfirm={handleConfirmDeletePlan}\r\n                            onCancel={() => setShowDeleteConfirmationModal(false)}\r\n                        />\r\n                    </Dropdown.Item>\r\n\r\n                    <Dropdown.Item>\r\n                        <Button className=\"px-0 py-2\" variant={\"text\" as any} >\r\n                            <FaCopy className=\"mr-2 h-4 w-4\" />\r\n                            Checkout Link\r\n                        </Button>\r\n                    </Dropdown.Item>\r\n\r\n                    <hr className=\"my-3\" />\r\n                    <Dropdown.Item>\r\n                        <Flex direction=\"col\" gap=\"1\">\r\n                            <Text className=\"font-semibold text-[#848BD4] text-lg uppercase\">Created on</Text>\r\n                            <Text className=\"text-left\">{formatDate(sellingPlan?.createdAt as string)}</Text>\r\n                        </Flex>\r\n                    </Dropdown.Item>\r\n                </div>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default PayperShipmentPlansList;","import { Link, useNavigate, useParams } from \"@remix-run/react\";\r\nimport { extractNumericId } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n    getSellingPlanGroup,\r\n    processOneTimeGroup,\r\n    processPayPerShipmentGroup\r\n} from \"../utils/sellingPlansGroupUtils\";\r\nimport OneTimePlansList from \"./OneTimePlans\";\r\nimport { Button, Flex, Text } from \"rizzui\";\r\nimport { PiGear } from \"react-icons/pi\";\r\nimport { ConfigureSettingsLabels } from \"../dropdownConfig\";\r\nimport PayperShipmentPlansList from \"./PayperShipmentPlansList\";\r\nimport { useAtom } from \"jotai\";\r\nimport { createPlanPageStates } from \"app/states/plansAtom\";\r\n\r\nexport const PlansGroupsInformation = ({ productResponse }: {\r\n    productResponse: ProductSingleNode\r\n}) => {\r\n    // State to store filtered selling plans\r\n    const [filteredSellingPlans, setFilteredSellingPlans] = useState<any[]>([]);\r\n    const navigate = useNavigate();\r\n    const [createPlanPageState, setCreatePlanPageState] = useAtom(createPlanPageStates);\r\n\r\n    useEffect(() => {\r\n        if (!productResponse) return;\r\n        const { sellingPlanGroups, currentAppInstallation } = productResponse as any;\r\n        const appIdGraphQL = currentAppInstallation?.app?.id || \"\";\r\n        const appIdNumeric = extractNumericId(appIdGraphQL); // Convert GraphQL ID to numeric\r\n        // Filter selling plan groups that belong to this app\r\n        if (sellingPlanGroups && sellingPlanGroups.edges) {\r\n            const filteredPlans = sellingPlanGroups.edges.filter(\r\n                (edge: any) => extractNumericId(edge.node.appId) === appIdNumeric\r\n            );\r\n            setFilteredSellingPlans(filteredPlans);\r\n        }\r\n    }, [productResponse]);\r\n\r\n    const OneTimeGroups = getSellingPlanGroup(filteredSellingPlans, \"Onetime Plan Group\");\r\n    const processedOneTimeGroup = OneTimeGroups ? processOneTimeGroup(OneTimeGroups) : null;\r\n    const PayPerShipmentGroup = getSellingPlanGroup(filteredSellingPlans, \"PayPerShipment Plan Group\");\r\n    const processedPayPerShipmentGroup = PayPerShipmentGroup ? processPayPerShipmentGroup(PayPerShipmentGroup) : null;\r\n    const PrePaidShipmentGroup = getSellingPlanGroup(filteredSellingPlans, \"PrePaid Plan Group\");\r\n    const processedPrePaidShipmentGroup = PrePaidShipmentGroup ? processPayPerShipmentGroup(PrePaidShipmentGroup) : null;\r\n    const [refreshKey, setRefreshKey] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        const newState = {\r\n            payPerShipmentGroup: {\r\n                groupName: processedPayPerShipmentGroup?.groupName || \"\",\r\n                sellingPlansToUpdate: processedPayPerShipmentGroup?.sellingPlans || [],\r\n                groupId: processedPayPerShipmentGroup?.id\r\n            },\r\n            oneTimeGroup: {\r\n                groupName: processedOneTimeGroup?.planName || \"\",\r\n                sellingPlansToCreate: [processedOneTimeGroup],\r\n                groupId: processedOneTimeGroup?.groupId\r\n            },\r\n            prePaidSubscriptionsGroup: {\r\n                groupName: processedPrePaidShipmentGroup?.groupName || \"PrePaid Subscription Plan Group\",\r\n                sellingPlansToUpdate: processedPrePaidShipmentGroup?.sellingPlans || [],\r\n                groupId: processedPrePaidShipmentGroup?.id\r\n            },\r\n        };\r\n\r\n        // Compare new state with the previous state to prevent unnecessary updates\r\n        if (JSON.stringify(createPlanPageState) !== JSON.stringify(newState)) {\r\n            setCreatePlanPageState(newState as any);\r\n        }\r\n    }, [processedOneTimeGroup, processedPayPerShipmentGroup, processedPrePaidShipmentGroup]);\r\n\r\n    return (\r\n        <Flex gap=\"5\">\r\n            {filteredSellingPlans.length > 0 ? (\r\n                <div className=\"w-full flex flex-col gap-5\">\r\n                    {processedOneTimeGroup && <OneTimePlansList\r\n                        OneTimeGroup={processedOneTimeGroup}\r\n                    />}\r\n                    {processedPayPerShipmentGroup && <PayperShipmentPlansList\r\n                        plansKey={`payper-${refreshKey}`}\r\n                        shipmentGroup={processedPayPerShipmentGroup}\r\n                        setRefreshKey={setRefreshKey}\r\n                    />}\r\n                    {processedPrePaidShipmentGroup && <PayperShipmentPlansList\r\n                        shipmentGroup={processedPrePaidShipmentGroup}\r\n                        plansKey={`prepaid-${refreshKey}`}\r\n                        setRefreshKey={setRefreshKey}\r\n                    />}\r\n                </div>\r\n            ) : (\r\n                <Flex direction=\"col\" gap=\"7\">\r\n                    <Text className=\"mt-2\">No selling plans found.</Text>\r\n                    <Link\r\n                        to={`/merchant/products/${extractNumericId(productResponse?.id)}/plans`}\r\n                        className=\"rounded-md text-sm font-bold flex items-center text-primary\"\r\n                    >\r\n                        <PiGear />\r\n                        <Text className=\"ms-2\">{ConfigureSettingsLabels.manage_plans}</Text>\r\n                    </Link>\r\n                </Flex>\r\n            )\r\n            }\r\n        </Flex >\r\n    )\r\n}","import { useNavigate } from \"@remix-run/react\";\r\nimport { messages } from \"app/config/messages\";\r\nimport CustomDropdown from \"app/packages/components/dropdown\";\r\nimport cn from \"app/packages/utils/class-names\";\r\nimport { PiGear, PiPencil, PiRepeatFill } from \"react-icons/pi\";\r\nimport { Flex, Title } from \"rizzui\";\r\nimport { ConfigureSettings, ConfigureSettingsOptions } from \"../dropdownConfig\";\r\nimport { extractNumericId } from \"app/packages/utils/shopifyIdUtils\";\r\n\r\nexport const SubscriptionPlansHeader = ({ productResponse }: any) => {\r\n    const navigate = useNavigate();\r\n    return <Flex justify=\"between\" align=\"center\">\r\n        <Flex align=\"center\">\r\n            <span\r\n                className={cn(\r\n                    'me-2 inline-flex size-5 items-center justify-center rounded-md [&>svg]:size-5',\r\n                    'text-gray-800 dark:text-gray-500 dark:group-hover:text-gray-700'\r\n                )}\r\n            >\r\n                <PiRepeatFill />\r\n            </span>\r\n            <Title as=\"h3\" className=\"text-base font-medium xl:text-lg\">\r\n                {messages.products.subscriptionPlanTitle}\r\n            </Title>\r\n\r\n        </Flex>\r\n\r\n        <CustomDropdown\r\n            label=\"Configure\"\r\n            options={ConfigureSettingsOptions}\r\n            onSelect={(value) => {\r\n                if (value === ConfigureSettings.MANAGE_PLANS) {\r\n                    navigate(`/merchant/products/${extractNumericId(productResponse?.id)}/plans`);\r\n                }else{\r\n                    navigate(`/merchant/products/${extractNumericId(productResponse?.id)}/variant-plans`);\r\n                }\r\n            }}\r\n            renderOption={renderConfigureOption}\r\n            variant=\"solid\"\r\n            menuClassName=\"min-w-max whitespace-nowrap\"\r\n        />\r\n    </Flex>\r\n}\r\n\r\nfunction renderConfigureOption(value: ConfigureSettings) {\r\n    return (\r\n        <div className=\"flex items-center\">\r\n            {value === ConfigureSettings.MANAGE_PLANS ? <PiPencil /> : <PiGear />}\r\n            <span className=\"ml-2\">{ConfigureSettingsOptions.find((opt) => opt.value === value)?.label}</span>\r\n        </div>\r\n    );\r\n}\r\n","import { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport { PlansGroupsInformation } from \"./components/PlansGroupsInformation\";\r\nimport { SubscriptionPlansHeader } from \"./components/SubscriptionPlansHeader\";\r\n\r\nexport default function SubscriptionPlansGroups({ productResponse }: { productResponse: ProductSingleNode }) {\r\n    return (\r\n        <div className=\"\">\r\n            <SubscriptionPlansHeader productResponse={productResponse} />\r\n            <hr />\r\n            <div className=\"my-6\">\r\n                <PlansGroupsInformation productResponse={productResponse} />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { Link } from \"@remix-run/react\";\r\nimport { routes } from \"app/config/routes\";\r\nimport PageHeader from \"app/shared/page-header\";\r\nimport { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport ProductDetails from \"./productDetails\";\r\nimport SubscriptionPlansGroups from \"./subscriptionPlans\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Badge, Box, MultiSelect, Text, Title } from \"rizzui\";\r\nimport { formatDate } from \"app/packages/utils/shopifyIdUtils\";\r\n\r\nconst pageHeader = {\r\n    breadcrumb: [\r\n        {\r\n            href: routes.products.products,\r\n            name: 'Products',\r\n        },\r\n        {\r\n            name: 'Edit',\r\n        },\r\n    ],\r\n};\r\n\r\n\r\nexport default function ProductEditMain({ productResponse }: {\r\n    productResponse: ProductSingleNode | any\r\n}) {\r\n    console.log('productResponse', productResponse)\r\n    return (\r\n        <>\r\n            <PageHeader title={productResponse.title} breadcrumb={pageHeader.breadcrumb}>\r\n                <div className=\"mt-4 flex items-center gap-3 lg:mt-0\">\r\n                    <Link\r\n                        to={routes.products.products}\r\n                        className=\"w-full lg:w-auto\"\r\n                    >\r\n                    </Link>\r\n                </div>\r\n            </PageHeader>\r\n            <div className=\"container mx-auto\">\r\n                <div className=\"grid grid-cols-12 gap-x-6\">\r\n                    <div className=\"col-span-12 lg:col-span-8 xl:col-span-9\">\r\n                        <ProductDetails productResponse={productResponse} />\r\n                        <SubscriptionPlansGroups productResponse={productResponse} />\r\n                    </div>\r\n\r\n                    <div className=\"col-span-12 lg:col-span-4 xl:col-span-3 hidden lg:block\">\r\n                        <ProductSatusBlock productResponse={productResponse} />\r\n                        <ProductInCollection productResponse={productResponse} />\r\n                        <ProductChangeBlock productResponse={productResponse} />\r\n                    </div>\r\n                </div>\r\n            </div >\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst ProductInCollection = ({ productResponse }: { productResponse: ProductSingleNode }) => {\r\n    const options = [\r\n        { label: 'Apple 🍎', value: 'apple' },\r\n        { label: 'Banana 🍌', value: 'banana' },\r\n        { label: 'Cherry 🍒', value: 'cherry' },\r\n    ];\r\n\r\n    const [value, setValue] = useState([]);\r\n    return (\r\n        <Box className=\"rounded-[10px] border border-muted p-4 mt-5\">\r\n            <Title as=\"h3\" className=\"text-[#848BD4] font-medium xl:text-lg\">Billion Grid Collection</Title>\r\n            <div className=\"flex items-center gap-3\">\r\n                <MultiSelect\r\n                    value={value}\r\n                    options={options}\r\n                    label=\"Multi Select\"\r\n                    onChange={setValue as any}\r\n                />\r\n            </div>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst ProductSatusBlock = ({ productResponse }: { productResponse: ProductSingleNode }) => {\r\n    const {\r\n        status\r\n    } = productResponse\r\n    return (\r\n        <Box className=\"rounded-[10px] border border-muted p-4\">\r\n            <div>\r\n                <Title as=\"h3\" className=\"text-[#848BD4] font-medium xl:text-lg\">Product Status</Title>\r\n                <div className=\"flex items-center gap-3\">\r\n                    <Badge\r\n                        renderAsDot\r\n                        color={status.toLowerCase() === 'active' ? 'success' : 'danger'}\r\n                        size=\"md\"\r\n                    />\r\n                    <Text>{productResponse.status}</Text>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <Title as=\"h3\" className=\"text-[#848BD4] font-medium xl:text-lg\">Online Store Status</Title>\r\n                <div className=\"flex items-center gap-3\">\r\n                    <Badge\r\n                        renderAsDot\r\n                        color={status.toLowerCase() === 'active' ? 'success' : 'danger'}\r\n                        size=\"md\"\r\n                    />\r\n                    <Text>Published</Text>\r\n                </div>\r\n            </div>\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\nconst ProductChangeBlock = ({ productResponse }: { productResponse: ProductSingleNode }) => {\r\n    const {\r\n        createdAt,\r\n        updatedAt\r\n    } = productResponse\r\n\r\n    return (\r\n        <Box className=\"rounded-[10px] border border-muted p-4 mt-5\">\r\n            <div>\r\n                <Title as=\"h3\" className=\"text-[#848BD4] font-medium xl:text-lg\">Last Updated</Title>\r\n                <div className=\"flex items-center gap-3\">\r\n                    <Text className=\"text-sm\">{formatDate(updatedAt)}</Text>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"mt-3\">\r\n                <Title as=\"h3\" className=\"text-[#848BD4] font-medium xl:text-lg\">Created At</Title>\r\n                <div className=\"flex items-center gap-3\">\r\n                    <Text className=\"text-sm\">{formatDate(createdAt)}</Text>\r\n                </div>\r\n            </div>\r\n        </Box>\r\n    )\r\n}","import { ActionFunctionArgs, json, LoaderFunctionArgs, redirect } from '@remix-run/node';\r\nimport { useLoaderData } from '@remix-run/react';\r\nimport { getAuthCookie, mergeQueryParams } from 'app/packages/utils/cookieAuth';\r\nimport { authenticate } from 'app/shopify.server';\r\nimport { AdminApiContextWithoutRest } from 'node_modules/@shopify/shopify-app-remix/dist/ts/server/clients';\r\nimport { PRODUCT_SINGLE_QUERY } from 'app/graphql/queries/products/querySingleProduct';\r\nimport { generateGraphQLId, ShopifyObjectType } from 'app/packages/utils/shopifyIdUtils';\r\nimport { ProductSingleNode } from 'app/types/product/ProductNode';\r\nimport ProductEditMain from 'app/shared/products/product-edit';\r\nimport { useIsMounted } from 'app/packages/hooks/use-is-mounted';\r\nimport { CURRENT_APP_INSTALLATION } from 'app/graphql/queries/queryCurrentAppInstallation';\r\nimport { useAtom } from 'jotai';\r\nimport { productAtom } from 'app/states/productAtom';\r\nimport { useEffect } from 'react';\r\nimport { CURRENT_SHOP } from 'app/graphql/queries/queryShop';\r\nimport { ERROR_MESSAGES } from './merchant.products_.$productId_.plans';\r\nimport createPlanAPIUtils from 'app/shared/products/create-plans/createPlanAPIUtils';\r\nimport createRecurringPlanUtils from 'app/shared/products/create-plans/createRecurringPlanUtility';\r\nimport { UPDATE_SELLING_PLAN_GROUP } from 'app/graphql/mutations/sellingPlans/sellingPlanGroupUpdate';\r\nimport createOnetimePlanUtils from 'app/shared/products/create-plans/createOneTimePlanUtils';\r\nimport { shopObject } from 'app/states/shopAtom';\r\nimport { DELETE_SELLING_PLAN_GROUP } from 'app/graphql/mutations/sellingPlans/sellingPlanGroupDelete';\r\n\r\nexport const loader = async ({\r\n  request,\r\n  params\r\n}: LoaderFunctionArgs) => {\r\n  const cookieHeader = request.headers.get(\"Cookie\");\r\n  const authData = await getAuthCookie(cookieHeader);\r\n  if (!authData) {\r\n    throw redirect(\"/auth/login\");\r\n  }\r\n  const updatedRequest = mergeQueryParams(request, authData.query);\r\n  await authenticate.admin(updatedRequest);\r\n  const response = await authenticate.admin(updatedRequest);\r\n  const { productId } = params;\r\n  if (!response || !response.admin || !productId) {\r\n    throw new Error(\"Authentication failed: Admin data missing\");\r\n  }\r\n  const { admin } = response;\r\n  const criticalData = await loadCriticalData(admin, parseInt(productId));\r\n\r\n  return {\r\n    apiKey: process.env.SHOPIFY_API_KEY || \"\",\r\n    product: criticalData.product as ProductSingleNode,\r\n  };\r\n\r\n};\r\n\r\nconst handleUpdatePlanOrder = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  formData: FormData\r\n) => {\r\n  const variables = generateReOrderVariables(formData);\r\n  const result = await createPlanAPIUtils.executeShopifyMutation(\r\n    UPDATE_SELLING_PLAN_GROUP,\r\n    admin,\r\n    variables\r\n  );\r\n  const userErrors = result?.data?.sellingPlanGroupCreate?.userErrors || [];\r\n  if (userErrors.length > 0) {\r\n    return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n  }\r\n\r\n  return json({ success: true }, { status: 200 });\r\n\r\n}\r\n\r\nconst generateReOrderVariables = (\r\n  formData: FormData\r\n) => {\r\n  const plansString = formData.get(\"plans\")?.toString();\r\n  const groupId = formData.get(\"groupId\")?.toString();\r\n  const sellingPlans = plansString ? JSON.parse(plansString) : [];\r\n  const variables = createRecurringPlanUtils.createVariablesSellingPlanReorder(groupId as string, sellingPlans);\r\n  return variables;\r\n}\r\n\r\nconst generateUpdateOneTimeVariables = (\r\n  formData: FormData\r\n) => {\r\n  const plansString = formData.get(\"plans\")?.toString();\r\n\r\n  if (!plansString) {\r\n    return json({ error: ERROR_MESSAGES.REQUIRED_PARAMS_MISSING }, { status: 400 });\r\n  }\r\n\r\n  const sellingPlanGroup = JSON.parse(plansString)\r\n  const variables = createOnetimePlanUtils.createGraphQLVariablesOneTimesUpdate(sellingPlanGroup);\r\n  return variables;\r\n}\r\n\r\nconst handleUpdateOneTimePlan = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  formData: FormData\r\n) => {\r\n  const variables = generateUpdateOneTimeVariables(formData);\r\n  const result = await createPlanAPIUtils.executeShopifyMutation(\r\n    UPDATE_SELLING_PLAN_GROUP,\r\n    admin,\r\n    variables\r\n  );\r\n  const userErrors = result?.data?.sellingPlanGroupUpdate?.userErrors || [];\r\n  if (userErrors.length > 0) {\r\n    return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n  }\r\n\r\n  return json({ success: true }, { status: 200 });\r\n}\r\n\r\nconst generateDeleteGroupVariables = (\r\n  formData: FormData\r\n) => {\r\n  const sellingPlanGroupId = formData.get(\"groupId\")?.toString();\r\n  return {\r\n    variables: {\r\n      id: sellingPlanGroupId\r\n    }\r\n  }\r\n}\r\n\r\nconst handleDeleteOneTimePlan = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  formData: FormData\r\n) => {\r\n  const variables = generateDeleteGroupVariables(formData);\r\n  const result = await createPlanAPIUtils.executeShopifyMutation(\r\n    DELETE_SELLING_PLAN_GROUP,\r\n    admin,\r\n    variables\r\n  );\r\n  const userErrors = result?.data?.sellingPlanGroupUpdate?.userErrors || [];\r\n  if (userErrors.length > 0) {\r\n    return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n  }\r\n\r\n  return json({ success: true }, { status: 200 });\r\n}\r\n\r\nconst generateDeleteSellingPlanVariables = (formData: FormData, isDeleteGroup: boolean) => {\r\n  if (isDeleteGroup) {\r\n    return generateDeleteGroupVariables(formData)\r\n  }\r\n  const sellingPlanId = formData.get(\"sellingPlanId\");\r\n  const groupId = formData.get(\"groupId\");\r\n  return {\r\n    variables: {\r\n      id: groupId,\r\n      input: {\r\n        sellingPlansToDelete: [sellingPlanId]\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst handleDeletePayPerShipmentPlan = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  formData: FormData,\r\n  isDeleteGroup: boolean = false\r\n) => {\r\n  const variables = generateDeleteSellingPlanVariables(formData, isDeleteGroup);\r\n  console.log('variables for delete' ,variables);\r\n  const query = isDeleteGroup ? DELETE_SELLING_PLAN_GROUP : UPDATE_SELLING_PLAN_GROUP\r\n  const result = await createPlanAPIUtils.executeShopifyMutation(\r\n    query,\r\n    admin,\r\n    variables\r\n  );\r\n\r\n  console.log('result for delete' ,result);\r\n  const userErrors = result?.data?.sellingPlanGroupUpdate?.userErrors || [];\r\n  if (userErrors.length > 0) {\r\n    return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n  }\r\n\r\n  return json({ success: true }, { status: 200 });\r\n}\r\n\r\nconst handleUpdatePayPerShipmentPlan = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  formData: FormData,\r\n) => {\r\n  const variables = generateUpdatePlanVariables(formData);\r\n  const result = await createPlanAPIUtils.executeShopifyMutation(\r\n    UPDATE_SELLING_PLAN_GROUP,\r\n    admin,\r\n    variables\r\n  );\r\n\r\n  console.log('result', JSON.stringify(result))\r\n  const userErrors = result?.data?.sellingPlanGroupCreate?.userErrors || [];\r\n  if (userErrors.length > 0) {\r\n    return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n  }\r\n\r\n  return json({ success: true }, { status: 200 });\r\n}\r\n\r\nconst generateUpdatePlanVariables = (\r\n  formData: FormData\r\n) => {\r\n  const plansString = formData.get(\"plans\")?.toString();\r\n  const groupId = formData.get(\"groupId\")?.toString();\r\n  const sellingPlans = plansString ? JSON.parse(plansString) : [];\r\n  const variables = createRecurringPlanUtils.createVariablesSellingPlanUpdate(groupId as string, sellingPlans);\r\n  return variables;\r\n}\r\n\r\nexport async function action({\r\n  request,\r\n  params\r\n}: ActionFunctionArgs) {\r\n  if (request.method !== \"POST\") {\r\n    return json({ error: ERROR_MESSAGES.METHOD_NOT_ALLOWED }, { status: 405 });\r\n  }\r\n\r\n  try {\r\n    const admin = await createPlanAPIUtils.authenticateRequest(request);\r\n    if (!admin) return json({ error: ERROR_MESSAGES.UNAUTHORIZED }, { status: 401 });\r\n    const formData = await request.formData();\r\n    const action = formData.get(\"action\")?.toString();\r\n    if (!action) return json({ error: ERROR_MESSAGES.REQUIRED_PARAMS_MISSING }, { status: 400 });\r\n    let response;\r\n    switch (action) {\r\n      case 'updatePlanOrder':\r\n        response = await handleUpdatePlanOrder(admin, formData);\r\n        break;\r\n      case 'updateOneTimePlan':\r\n        response = await handleUpdateOneTimePlan(admin, formData);\r\n        break;\r\n      case 'deleteOneTimePlan':\r\n        response = await handleDeleteOneTimePlan(admin, formData);\r\n        break;\r\n      case 'deletePayPerShipmentPlan':\r\n        response = await handleDeletePayPerShipmentPlan(admin, formData);\r\n        break;\r\n      case 'deletePayPerShipmentPlanGroup':\r\n        response = await handleDeletePayPerShipmentPlan(admin, formData, true);\r\n        break;\r\n      case 'updatePayPerShipmentPlan':\r\n        response = await handleUpdatePayPerShipmentPlan(admin, formData);\r\n        break;\r\n      default:\r\n        return json({ error: ERROR_MESSAGES.ACTION_NOT_FOUND }, { status: 402 });\r\n    }\r\n\r\n    return response;\r\n\r\n  } catch (error) {\r\n    console.error(\"Unexpected error:\", error);\r\n    return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Load data necessary for rendering content above the fold. This is the critical data\r\n * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.\r\n * @param {AdminInstance}\r\n */\r\nconst loadCriticalData = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  productId: number\r\n) => {\r\n  try {\r\n    const variables = generateVariables(productId);\r\n    // Run both GraphQL queries in parallel\r\n    const [\r\n      productResponse,\r\n      appResponse,\r\n      shopResponse\r\n    ] = await Promise.all([\r\n      admin.graphql(PRODUCT_SINGLE_QUERY, variables),\r\n      admin.graphql(CURRENT_APP_INSTALLATION),\r\n      admin.graphql(CURRENT_SHOP),\r\n    ]);\r\n    const [\r\n      { data: { product } },\r\n      { data: { currentAppInstallation } },\r\n      { data: { shop } }\r\n    ] = await Promise.all([\r\n      productResponse.json(),\r\n      appResponse.json(),\r\n      shopResponse.json(),\r\n    ]);\r\n\r\n    // Attach `currentAppInstallation` to the product\r\n    return { product: { ...product, currentAppInstallation, shop } };\r\n\r\n  } catch (error) {\r\n    console.error(\"Error loading critical data:\", error);\r\n    throw new Error(\"Failed to load critical product data\");\r\n  }\r\n};\r\n\r\nconst generateVariables = (productId: number) => {\r\n  const graphqlProductId = generateGraphQLId(\r\n    productId,\r\n    ShopifyObjectType.Product\r\n  );\r\n  return {\r\n    variables: {\r\n      id: graphqlProductId\r\n    }\r\n  }\r\n}\r\n\r\nconst ProductEdit = () => {\r\n  const { apiKey, product } = useLoaderData<typeof loader>();\r\n  const [, setProduct] = useAtom(productAtom);\r\n  const [, setShopObject] = useAtom(shopObject);\r\n  useEffect(() => {\r\n    if (product) {\r\n      setProduct(product);\r\n      setShopObject(product.shop);\r\n    }\r\n  }, [product, setProduct]);\r\n\r\n  const isMounted = useIsMounted();\r\n  if (!isMounted) {\r\n    return null;\r\n  }\r\n\r\n  if (!product) {\r\n    return <div>Product not found</div>\r\n  }\r\n  return <ProductEditMain\r\n    productResponse={product}\r\n  />\r\n}\r\n\r\nexport default ProductEdit"],"names":["CustomDropdown","label","options","onSelect","renderOption","variant","menuClassName","Dropdown","jsx","Button","option","ConfigureSettings","ConfigureSettingsLabels","ConfigureSettingsOptions","status","ProductDetails","productResponse","jsxs","ProductDetailsHeader","ProductInformation","title","descriptionHtml","nodes","Flex","Box","_c","_b","_a","Link","Title","ProductVariantBlock","cn","PiArchiveThin","messages","handleSelect","renderConfigureOption","value","PiPencil","PiGear","opt","Accordion","open","BsChevronDown","VariantDetailColumns","PlanHeader","planName","children","className","FaMoneyBill","PlanDetails","pricingPolicyAdjustmentValue","pricingPolicyAdjustmentType","shop","useAtom","shopObject","moneyWithCurrencyFormat","formattedPrice","useMemo","formatPrice","FaClock","FaGift","PlanActions","OneTimeGroup","isModalOpen","setIsModalOpen","useState","showDeleteConfirmationModal","setShowDeleteConfirmationModal","isLoading","setIsLoading","fetcher","useFetcher","handleMangePlanClick","handleConfirmDeletePlan","sellingPlanId","groupId","toast","formData","useEffect","CheckCircleIcon","Loader","FaTrash","OneTimeEditModal","ConfirmationModal","modalState","setModalState","productAtom","createPlanPageState","setCreatePlanPageState","createPlanPageStates","loader","setLoader","currentPlan","setCurrentPlan","defaultOneTimePlan","handleChange","field","prevPlan","prevState","handleSavePlan","Modal","ActionIcon","FaXmark","OneTimePlanForm","OneTimePlansList","PayperShipmentPlansList","shipmentGroup","plansKey","setRefreshKey","groupName","sellingPlans","id","numericSellingPlanGroupId","extractNumericId","sortedSellingPlans","a","b","sellingPlansState","setSellingPlansState","hasChanges","setHasChanges","setProduct","navigate","useNavigate","productId","useParams","handleDragEnd","event","active","over","oldIndex","newIndex","arrayMove","handleSaveChanges","Text","DndContext","closestCenter","SortableContext","verticalListSortingStrategy","plan","SortablePlan","FaGear","attributes","listeners","setNodeRef","transform","transition","useSortable","style","CSS","sellingPlan","category","deliveryInterval","deliveryCount","shipsEvery","discountValue","discountType","discountText","FaRepeat","FaShip","FaTag","e","FaPencil","PlanDropDowns","SellingPlanEditModal","prevKey","product","sellingPlanGroups","selectedSellingPlanGroup","edge","action","isSingleSellingPlan","sellingPlanGroup","FaEllipsisVertical","FaCopy","formatDate","PlansGroupsInformation","filteredSellingPlans","setFilteredSellingPlans","currentAppInstallation","appIdGraphQL","appIdNumeric","filteredPlans","OneTimeGroups","getSellingPlanGroup","processedOneTimeGroup","processOneTimeGroup","PayPerShipmentGroup","processedPayPerShipmentGroup","processPayPerShipmentGroup","PrePaidShipmentGroup","processedPrePaidShipmentGroup","refreshKey","newState","SubscriptionPlansHeader","PiRepeatFill","SubscriptionPlansGroups","pageHeader","routes","ProductEditMain","Fragment","PageHeader","ProductSatusBlock","ProductInCollection","ProductChangeBlock","setValue","MultiSelect","Badge","createdAt","updatedAt","ProductEdit","apiKey","useLoaderData","setShopObject","useIsMounted"],"mappings":"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"}