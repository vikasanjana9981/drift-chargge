{"version":3,"file":"index.js","sources":["../../app/db.server.ts","../../app/shopify.server.ts","../../app/entry.server.tsx","../../app/tailwind.css?url","../../app/packages/utils/class-names.ts","../../app/config/routes.ts","../../app/layouts/hydrogen/menu-items.tsx","../../app/config/enums.ts","../../app/layouts/use-layout.ts","../../app/packages/components/get-status-badge.tsx","../../app/layouts/hydrogen/sidebar-menu.tsx","../../app/packages/components/logo.tsx","../../app/layouts/hydrogen/sidebar.tsx","../../app/shared/drawer-views/use-drawer.ts","../../app/layouts/hamburger-button.tsx","../../app/packages/components/search/search-trigger.tsx","../../app/packages/components/search/page-links.data.ts","../../app/packages/components/search/search-list.tsx","../../app/packages/components/search/search.tsx","../../app/packages/components/icons/truck-solid.tsx","../../app/packages/components/icons/cube-solid.tsx","../../app/packages/components/icons/file-stack.tsx","../../app/packages/components/icons/cloud-task.tsx","../../app/packages/components/icons/shopping-bag-solid.tsx","../../app/packages/components/icons/bulb-solid.tsx","../../app/packages/components/icons/parcel-map.tsx","../../app/packages/components/icons/brush-solid.tsx","../../app/data/notifications.ts","../../app/packages/hooks/use-media.ts","../../app/layouts/notification-dropdown.tsx","../../app/packages/components/icons/ring-bell-solid.tsx","../../app/data/messages.ts","../../app/layouts/messages-dropdown.tsx","../../app/packages/components/icons/chat-solid.tsx","../../app/config/color-presets.ts","../../app/packages/hooks/use-direction.ts","../../app/packages/utils/hex-to-rgb.ts","../../app/packages/utils/update-theme-color.ts","../../app/layouts/settings/use-theme-color.ts","../../app/layouts/drawer-header.tsx","../../app/packages/components/icons/cog-solid.tsx","../../app/layouts/settings-button.tsx","../../app/layouts/profile-menu.tsx","../../app/layouts/header-menu-right.tsx","../../app/layouts/sticky-header.tsx","../../app/layouts/hydrogen/header.tsx","../../app/shared/theme-provider.tsx","../../app/shared/drawer-views/container.tsx","../../app/shared/modal-views/use-modal.ts","../../app/shared/modal-views/container.tsx","../../app/packages/components/remixPregress.tsx","../../app/root.tsx","../../app/packages/hooks/use-is-mounted.ts","../../app/packages/utils/shopifyIdUtils.ts","../../app/shared/products/create-plans/createOneTimePlanUtils.ts","../../app/packages/utils/cookieAuth.ts","../../app/shared/products/create-plans/createPlanAPIUtils.ts","../../app/shared/products/create-plans/createRecurringPlanUtility.ts","../../app/states/productAtom.ts","../../app/shared/products/selling-plan-groups/PayPerShipment/default.plan.ts","../../app/shared/products/selling-plan-groups/OneTimePlanSettings/PlanHeader.tsx","../../app/shared/products/selling-plan-groups/components/NumberInput.tsx","../../app/shared/products/selling-plan-groups/components/SellingPlanFormUtils.ts","../../app/shared/products/selling-plan-groups/components/Policies/PricingPolicy.tsx","../../app/shared/products/selling-plan-groups/components/PlanNameInput.tsx","../../app/packages/ui/datepicker.tsx","../../app/shared/products/selling-plan-groups/components/Policies/BillingPolicySection.tsx","../../app/shared/products/selling-plan-groups/components/Policies/DeliveryPolicySection.tsx","../../app/shared/products/selling-plan-groups/components/Policies/InventoryPolicySection.tsx","../../app/shared/products/selling-plan-groups/OneTimePlanSettings/OneTimePlanForm.tsx","../../app/shared/products/selling-plan-groups/OneTimePlanSettings/OneTimePlanCard.tsx","../../app/states/plansAtom.ts","../../app/shared/products/selling-plan-groups/OneTimePlanSettings/index.tsx","../../app/states/shopAtom.ts","../../app/shared/products/selling-plan-groups/components/PlanCard.tsx","../../app/shared/products/selling-plan-groups/components/Policies/PricingPolicyRecurring.tsx","../../app/shared/products/selling-plan-groups/components/Policies/InventoryPolicyRecurring.tsx","../../app/shared/products/create-plans/sellingPlanValidators.ts","../../app/shared/products/selling-plan-groups/components/Policies/DeliveryPolicyRecurringSection.tsx","../../app/shared/products/selling-plan-groups/components/Policies/DeliveryPolicyRecurring.tsx","../../app/shared/products/selling-plan-groups/components/Policies/BillingRecurringPolicySection.tsx","../../app/shared/products/selling-plan-groups/components/Policies/BillingPolicyRecurring.tsx","../../app/shared/products/selling-plan-groups/components/TabsContent/DisplayContentsTab.tsx","../../app/shared/products/selling-plan-groups/components/PlanForm.tsx","../../app/shared/products/selling-plan-groups/components/ConfirmationModal.tsx","../../app/config/messages.ts","../../app/shared/form-group.tsx","../../app/shared/products/selling-plan-groups/SellingPlanGroupBasicInfo/index.tsx","../../app/packages/hooks/useDebounceWithLoader.ts","../../app/shared/products/selling-plan-groups/PayPerShipment/index.tsx","../../app/shared/products/selling-plan-groups/PrePaidSubscription/index.tsx","../../app/shared/products/selling-plan-groups/OneTimePlanSettings/OneTimePlanSettingsCreate.tsx","../../app/shared/products/selling-plan-groups/PayPerShipment/PayPerShipmentCreate.tsx","../../app/shared/products/selling-plan-groups/PrePaidSubscription/PrePaidSubscriptionsCreate.tsx","../../app/shared/products/selling-plan-groups/index.tsx","../../app/graphql/mutations/sellingPlans/sellingPlanGroupCreate.ts","../../app/graphql/mutations/sellingPlans/sellingPlanGroupUpdate.ts","../../app/routes/merchant.products_.$productId_.plans.tsx","../../app/shared/products/edit-variant-plans/components/VariantPlanHeader.tsx","../../app/shared/products/edit-variant-plans/components/VariantSellingPlanActions.tsx","../../app/shared/products/edit-variant-plans/components/VariantPlanListTable/VariantDetailColumns.tsx","../../app/shared/products/edit-variant-plans/components/VariantPlanListTable/index.tsx","../../app/shared/products/edit-variant-plans/components/VariantSellingPlanListing.tsx","../../app/shared/products/edit-variant-plans/components/VariantSellingPlanManager.tsx","../../app/shared/products/edit-variant-plans/index.tsx","../../app/routes/merchant.products_.$productId_.variant-plans.tsx","../../app/graphql/fragments/currentAppInstallation.ts","../../app/graphql/queries/queryCurrentAppInstallation.ts","../../app/graphql/queries/queryShop.ts","../../app/graphql/queries/subscriptions/subscriptionBillingCycles.ts","../../app/graphql/queries/subscriptions/subscriptionContract.ts","../../app/packages/ui/breadcrumb.tsx","../../app/shared/page-header.tsx","../../app/types/subscription/subscriptionQueryTypes.ts","../../app/shared/subscriptions/subscription-edit/SubscriptionTopBlock/SubscriptionStatusBadge.tsx","../../app/states/subscriptionContractAtom.ts","../../app/shared/subscriptions/subscription-edit/SubscriptionTopBlock/index.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/DropdownActionItem.tsx","../../app/packages/ui/phone-input.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/Modals/EditAddressModal.tsx","../../app/shared/CopyToClipboard.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/Modals/EditAttrModal.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/Modals/EditOrderNoteModal.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/Modals/ViewOrderNoteAndAttributeModal.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/SubscriptionActions.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/PaymentMethodButton.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/DiscountButton.tsx","../../app/packages/components/icons/check-circle.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/Modals/UpdatePaymentMethodModal.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/Modals/AddDiscountModal.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/SubscriptionDetailsHeader.tsx","../../app/packages/components/table/custom/use-TanStack-Table.ts","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/SubscriptionLineItemActions.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/column.tsx","../../app/packages/components/table/util.ts","../../app/packages/hooks/use-Scroll-position.ts","../../app/packages/components/table/table-pinning.style.ts","../../app/packages/components/table/index.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/Modals/RescheduleNextBillingDate.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/Modals/EditOrderFrequencyModal.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/Modals/CancelSubscriptionModal.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/Modals/ReactiveSubscriptionModal.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/Modals/EditLineItemAttributeModal.tsx","../../app/shared/skeletons/SubscriptionProductFormSkeleton.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/Modals/EditSubscriptionProductModal.tsx","../../app/shared/skeletons/ProductItemSkeleton.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/components/PriceRange.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/Modals/SwapProductModal.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/SubscripitionLineItems.tsx","../../app/shared/subscriptions/subscription-edit/SubscriptionDetails/index.tsx","../../app/shared/subscriptions/subscription-edit/UpCommingOrdersList/OrdersActions.tsx","../../app/shared/subscriptions/subscription-edit/UpCommingOrdersList/OrderItem.tsx","../../app/shared/subscriptions/subscription-edit/UpCommingOrdersList/ShippingDetails.tsx","../../app/shared/subscriptions/subscription-edit/UpCommingOrdersList/UpcommingOrderDetails.tsx","../../app/shared/subscriptions/subscription-edit/UpCommingOrdersList/UpCommingOrderItem.tsx","../../app/shared/subscriptions/subscription-edit/UpCommingOrdersList/UpCommingOrdersListData.tsx","../../app/shared/subscriptions/subscription-edit/UpCommingOrdersList/AccordionHeader.tsx","../../app/shared/subscriptions/subscription-edit/UpCommingOrdersList/Modals/RescheduleNextOrder.tsx","../../app/shared/subscriptions/subscription-edit/UpCommingOrdersList/index.tsx","../../app/shared/subscriptions/subscription-edit/RecentOrdersList/OrderItem.tsx","../../app/shared/subscriptions/subscription-edit/RecentOrdersList/ShippingDetails.tsx","../../app/shared/subscriptions/subscription-edit/RecentOrdersList/RecentOrderDetails.tsx","../../app/shared/subscriptions/subscription-edit/RecentOrdersList/RecentOrderItem.tsx","../../app/shared/subscriptions/subscription-edit/RecentOrdersList/RecentOrdersListData.tsx","../../app/shared/subscriptions/subscription-edit/RecentOrdersList/index.tsx","../../app/shared/subscriptions/subscription-edit/AdditionalDetails/index.tsx","../../app/shared/subscriptions/subscription-edit/index.tsx","../../app/graphql/mutations/subscriptionContracts/customerPaymentMethodSendUpdateEmail.ts","../../app/graphql/mutations/subscriptionContracts/subscriptionBillingCycleScheduleEdit.ts","../../app/graphql/mutations/subscriptionContracts/subscriptionContractUpdate.ts","../../app/graphql/mutations/subscriptionContracts/subscriptionDraftCommit.ts","../../app/graphql/mutations/subscriptionContracts/subscriptionDraftDiscountCodeApply.ts","../../app/graphql/mutations/subscriptionContracts/subscriptionDraftDiscountRemove.ts","../../app/graphql/mutations/subscriptionContracts/subscriptionDraftLineUpdate.ts","../../app/graphql/mutations/subscriptionContracts/subscriptionDraftUpdate.ts","../../app/graphql/fragments/featuredMedia.ts","../../app/graphql/fragments/product/sellingPlans.ts","../../app/graphql/fragments/product/sellingPlanGroup.ts","../../app/graphql/fragments/product/sellingPlanGroupsCount.js","../../app/graphql/fragments/product/productSingleListingNode.js","../../app/graphql/fragments/pageInfo.js","../../app/graphql/queries/products/queryProducts.js","../../app/graphql/fragments/product/variantNode.ts","../../app/graphql/fragments/product/productSingleNode.js","../../app/graphql/queries/products/querySingleProduct.js","../../app/shared/subscriptions/subscription-edit/SubscriptionEditUtils.ts","../../app/routes/merchant.subscriptions_.$subscriptionId.tsx","../../app/packages/components/dropdown.tsx","../../app/shared/products/product-edit/productDetails.tsx","../../app/shared/products/product-edit/utils/sellingPlansGroupUtils.ts","../../app/shared/products/product-edit/components/OneTimePlans.tsx","../../app/shared/products/product-edit/dropdownConfig.ts","../../app/shared/products/product-edit/components/PayperShipmentPlansList.tsx","../../app/shared/products/product-edit/components/PlansGroupsInformation.tsx","../../app/shared/products/product-edit/components/SubscriptionPlansHeader.tsx","../../app/shared/products/product-edit/subscriptionPlans.tsx","../../app/shared/products/product-edit/index.tsx","../../app/graphql/mutations/sellingPlans/sellingPlanGroupDelete.ts","../../app/routes/merchant.products_.$productId.tsx","../../app/routes/webhooks.app.product_update.tsx","../../app/webhookHandlers/createWebhooksHandler.ts","../../app/routes/webhooks.app.scopes_update.tsx","../../app/routes/webhooks.app.uninstalled.tsx","../../app/graphql/queries/subscriptions/subscriptionContracts.ts","../../app/packages/components/table/pagination.tsx","../../app/shared/subscriptions/SubscriptionsTable/columns.tsx","../../app/packages/components/table/footer.tsx","../../app/packages/hooks/use-pagination-and-filters-handler.ts","../../app/packages/components/controlled-table/status-field.tsx","../../app/packages/components/controlled-table/table-filter.tsx","../../app/packages/components/table-utils/toggle-columns.tsx","../../app/packages/hooks/use-debounce.ts","../../app/shared/subscriptions/SubscriptionsTable/types.ts","../../app/shared/subscriptions/SubscriptionsTable/filters.tsx","../../app/shared/subscriptions/SubscriptionsTable/table.tsx","../../app/shared/subscriptions/index.tsx","../../app/types/product/filtersData.ts","../../app/routes/merchant.subscriptions.tsx","../../app/routes/merchant.sellingPlans.tsx","../../app/routes/merchant.analytics.tsx","../../app/packages/utils/replace-underscore-dash.ts","../../app/packages/components/table-utils/get-status-badge.tsx","../../app/packages/ui/avatar-card.tsx","../../app/packages/components/table-utils/get-purchase-type-badge.tsx","../../app/packages/utils/format-date.ts","../../app/packages/ui/date-cell.tsx","../../app/shared/products/product-list/columns.tsx","../../app/shared/products/product-list/filters.tsx","../../app/shared/products/product-list/table.tsx","../../app/shared/products/index.tsx","../../app/types/product/productQueryTypes.ts","../../app/routes/merchant.products.tsx","../../app/routes/merchant.home.tsx","../../app/routes/subscriptions.tsx","../../node_modules/@shopify/polaris/build/esm/styles.css?url","../../app/routes/auth.login/error.server.tsx","../../app/routes/auth.login/route.tsx","../../app/routes/auth.$.tsx","../../app/routes/_index/route.tsx","../../app/routes/app.tsx","../../app/routes/app.additional.tsx","../../app/routes/app._index.tsx"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\ndeclare global {\r\n  var prisma: PrismaClient;\r\n}\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  if (!global.prisma) {\r\n    global.prisma = new PrismaClient();\r\n  }\r\n}\r\n\r\nconst prisma: PrismaClient = global.prisma || new PrismaClient();\r\n\r\nexport default prisma;\r\n","import \"@shopify/shopify-app-remix/adapters/node\";\r\nimport {\r\n  ApiVersion,\r\n  AppDistribution,\r\n  DeliveryMethod,\r\n  shopifyApp,\r\n} from \"@shopify/shopify-app-remix/server\";\r\nimport { PrismaSessionStorage } from \"@shopify/shopify-app-session-storage-prisma\";\r\nimport prisma from \"./db.server\";\r\n\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nconst shopify = shopifyApp({\r\n  apiKey: process.env.SHOPIFY_API_KEY,\r\n  isEmbeddedApp: false,\r\n  apiSecretKey: process.env.SHOPIFY_API_SECRET || \"\",\r\n  apiVersion: ApiVersion.October24,\r\n  scopes: process.env.SCOPES?.split(\",\"),\r\n  appUrl: process.env.SHOPIFY_APP_URL || \"\",\r\n  authPathPrefix: \"/auth\",\r\n  sessionStorage: new PrismaSessionStorage(prisma),\r\n  distribution: AppDistribution.AppStore,\r\n  future: {\r\n    unstable_newEmbeddedAuthStrategy: true,\r\n    removeRest: true,\r\n  },\r\n  ...(process.env.SHOP_CUSTOM_DOMAIN\r\n    ? { customShopDomains: [process.env.SHOP_CUSTOM_DOMAIN] }\r\n    : {}),\r\n\r\n});\r\n\r\nexport default shopify;\r\nexport const apiVersion = ApiVersion.October24;\r\nexport const addDocumentResponseHeaders = shopify.addDocumentResponseHeaders;\r\nexport const authenticate = shopify.authenticate;\r\nexport const unauthenticated = shopify.unauthenticated;\r\nexport const login = shopify.login;\r\nexport const registerWebhooks = shopify.registerWebhooks;\r\nexport const sessionStorage = shopify.sessionStorage;\r\n","import { PassThrough } from \"stream\";\r\nimport { renderToPipeableStream } from \"react-dom/server\";\r\nimport { RemixServer } from \"@remix-run/react\";\r\nimport {\r\n  createReadableStreamFromReadable,\r\n  type EntryContext,\r\n} from \"@remix-run/node\";\r\nimport { isbot } from \"isbot\";\r\nimport { addDocumentResponseHeaders } from \"./shopify.server\";\r\n\r\nexport const streamTimeout = 5000;\r\n\r\nexport default async function handleRequest(\r\n  request: Request,\r\n  responseStatusCode: number,\r\n  responseHeaders: Headers,\r\n  remixContext: EntryContext\r\n) {\r\n  addDocumentResponseHeaders(request, responseHeaders);\r\n  const userAgent = request.headers.get(\"user-agent\");\r\n  const callbackName = isbot(userAgent ?? '')\r\n    ? \"onAllReady\"\r\n    : \"onShellReady\";\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const { pipe, abort } = renderToPipeableStream(\r\n      <RemixServer\r\n        context={remixContext}\r\n        url={request.url}\r\n      />,\r\n      {\r\n        [callbackName]: () => {\r\n          const body = new PassThrough();\r\n          const stream = createReadableStreamFromReadable(body);\r\n\r\n          responseHeaders.set(\"Content-Type\", \"text/html\");\r\n          resolve(\r\n            new Response(stream, {\r\n              headers: responseHeaders,\r\n              status: responseStatusCode,\r\n            })\r\n          );\r\n          pipe(body);\r\n        },\r\n        onShellError(error) {\r\n          reject(error);\r\n        },\r\n        onError(error) {\r\n          responseStatusCode = 500;\r\n          console.error(error);\r\n        },\r\n      }\r\n    );\r\n\r\n    // Automatically timeout the React renderer after 6 seconds, which ensures\r\n    // React has enough time to flush down the rejected boundary contents\r\n    setTimeout(abort, streamTimeout + 1000);\r\n  });\r\n}\r\n","import \"C:/myfolder/MEANMEARN/Shopify/drift-charge-staging/app/tailwind.css?transform-only\";export default \"__VITE_CSS_URL__433a2f6d79666f6c6465722f4d45414e4d4541524e2f53686f706966792f64726966742d6368617267652d73746167696e672f6170702f7461696c77696e642e6373733f7472616e73666f726d2d6f6e6c79__\"","import clsx, { ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport default function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n","export const routes = {\n  home : '/merchant/home',\n  analytics : '/merchant/analytics',\n  subscriptions: {\n    dashboard: '/merchant/subscriptions',\n  },\n  customers: {\n    dashboard: '/merchant/customers',\n  },\n  orders: {\n    dashboard: '/merchant/orders',\n  },\n  products: {\n    products: '/merchant/products',\n    collections: '/merchant/collections',\n    gifts: '/merchant/gifts',\n    sellingPlans:\"/merchant/sellingPlans\"\n  },\n  discounts: {\n    dashboard: '/merchant/discounts',\n  },\n  tools: {\n    bulkUpdates: '/merchant/tools/bulk-updates',\n    migrations: '/merchant/tools/migrations',\n    dataExports: '/merchant/tools/data-exports',\n  },\n  storefront: {\n    customerPortal: '/merchant/storefront/customer-portal',\n    widgets: '/merchant/storefront/widgets',\n    translations: '/merchant/storefront/translations',\n  },\n  settings: {\n    general: '/merchant/settings/general',\n    notifications: '/merchant/settings/notifications',\n  },\n  help: '/merchant/help',\n};\n","import { DUMMY_ID } from 'app/config/constants';\nimport { routes } from 'app/config/routes';\nimport {\n  PiChartBarDuotone,\n  PiClipboardTextDuotone,\n  PiCurrencyCircleDollarDuotone,\n  PiFolderDuotone,\n  PiGearDuotone,\n  PiHeadsetDuotone,\n  PiShoppingCartDuotone,\n  PiStorefrontDuotone,\n  PiTagDuotone,\n  PiToolboxDuotone,\n  PiUsersDuotone,\n} from 'react-icons/pi';\n\n// Note: do not add href in the label object, it is rendering as label\nexport const menuItems = [\n  {\n    name: 'Dashboard',\n    href: routes.home,\n    icon: <PiFolderDuotone />,\n    badge: ''\n  },\n  {\n    name: 'Analytics',\n    href: routes.analytics,\n    icon: <PiChartBarDuotone />,\n  },\n  {\n    name: 'Subscriptions',\n    href: routes.subscriptions.dashboard,\n    icon: <PiCurrencyCircleDollarDuotone />,\n  },\n  {\n    name: 'Customers',\n    href: routes.customers.dashboard,\n    icon: <PiUsersDuotone />,\n  },\n  {\n    name: 'Orders',\n    href: routes.orders.dashboard,\n    icon: <PiClipboardTextDuotone />,\n  },\n  {\n    name: 'Products',\n    href: '#',\n    icon: <PiShoppingCartDuotone />,\n    dropdownItems: [\n      {\n        name: 'Products',\n        href: routes.products.products,\n        badge: ''\n      },\n      {\n        name: 'Selling Plans',\n        href: routes.products.sellingPlans,\n        badge: ''\n      },\n      {\n        name: 'Collections',\n        href: routes.products.collections,\n        badge: ''\n      },\n      {\n        name: 'Gifts',\n        href: routes.products.gifts,\n        badge: ''\n      }\n    ]\n  },\n  {\n    name: 'Discounts',\n    href: routes.discounts.dashboard,\n    icon: <PiTagDuotone />,\n  },\n  {\n    name: 'Tools & Apps',\n    href: '#',\n    icon: <PiToolboxDuotone />,\n    dropdownItems: [\n      {\n        name: 'Bulk Updates',\n        href: routes.tools.bulkUpdates,\n        badge: ''\n      },\n      {\n        name: 'Migrations',\n        href: routes.tools.migrations,\n        badge: ''\n      },\n      {\n        name: 'Data Exports',\n        href: routes.tools.dataExports,\n        badge: ''\n      },\n    ],\n  },\n  {\n    name: 'Storefront Settings',\n    href: '#',\n    icon: <PiStorefrontDuotone />,\n    dropdownItems: [\n      {\n        name: 'Customer Portal',\n        href: routes.storefront.customerPortal,\n        badge: ''\n      },\n      {\n        name: 'Widgets',\n        href: routes.storefront.widgets,\n        badge: ''\n      },\n      {\n        name: 'Translations',\n        href: routes.storefront.translations,\n        badge: ''\n      },\n    ],\n  },\n  {\n    name: 'Settings',\n    href: '#',\n    icon: <PiGearDuotone />,\n    dropdownItems: [\n      {\n        name: 'General Settings',\n        href: routes.settings.general,\n        badge: ''\n      },\n      {\n        name: 'Notifications',\n        href: routes.settings.notifications,\n        badge: ''\n      },\n    ],\n  },\n  {\n    name: 'Help',\n    href: routes.help,\n    icon: <PiHeadsetDuotone />,\n  },\n];\n","export enum LAYOUT_OPTIONS {\n  HYDROGEN = 'hydrogen',\n  HELIUM = 'helium',\n  LITHIUM = 'lithium',\n  BERYLLIUM = 'beryllium',\n  BORON = 'boron',\n  CARBON = 'carbon',\n}\n\nexport enum PaymentGateway {\n  STRIPE = 'STRIPE',\n  COD = 'CASH_ON_DELIVERY',\n  CASH = 'CASH',\n  FULL_WALLET_PAYMENT = 'FULL_WALLET_PAYMENT',\n  PAYPAL = 'PAYPAL',\n  MOLLIE = 'MOLLIE',\n  RAZORPAY = 'RAZORPAY',\n  SSLCOMMERZ = 'SSLCOMMERZ',\n  PAYSTACK = 'PAYSTACK',\n  PAYMONGO = 'PAYMONGO',\n  XENDIT = 'XENDIT',\n  IYZICO = 'IYZICO',\n  BKASH = 'BKASH',\n}\n\nexport enum CouponType {\n  FIXED = 'fixed',\n  PERCENTAGE = 'percentage',\n  FREE_SHIPPING = 'free_shipping',\n}\n","'use client';\n\nimport { LAYOUT_OPTIONS } from 'app/config/enums';\nimport { atom, useAtom } from 'jotai';\n\n// 1. set initial atom for isomorphic layout\nconst isomorphicLayoutAtom = atom(\n  typeof window !== 'undefined'\n    ? localStorage.getItem('isomorphic-layout')\n    : LAYOUT_OPTIONS.HYDROGEN\n);\n\nconst isomorphicLayoutAtomWithPersistence = atom(\n  (get) => get(isomorphicLayoutAtom),\n  (get, set, newStorage: any) => {\n    set(isomorphicLayoutAtom, newStorage);\n    localStorage.setItem('isomorphic-layout', newStorage);\n  }\n);\n\n// 2. useLayout hook to check which layout is available\nexport function useLayout() {\n  const [layout, setLayout] = useAtom(isomorphicLayoutAtomWithPersistence);\n  return {\n    layout: layout === null ? LAYOUT_OPTIONS.HYDROGEN : layout,\n    setLayout,\n  };\n}\n","'use client';\n\nimport { useLayout } from \"app/layouts/use-layout\";\nimport { Badge } from \"rizzui/badge\";\nimport cn from \"../utils/class-names\";\n\nconst classes = {\n  base: 'text-xs px-2 duration-200 py-0.5 font-normal capitalize border tracking-wider font-lexend bg-opacity-50 dark:bg-opacity-40 dark:text-opacity-90 dark:text-gray-900 dark:backdrop-blur',\n  color: {\n    success: 'border-green bg-green-lighter text-green-dark dark:bg-green',\n    danger: 'border-red bg-red-lighter text-red-dark dark:bg-red',\n  },\n  layout: {\n    helium: {\n      base: 'bg-opacity-40 text-opacity-90 text-gray-0 dark:text-gray-900 backdrop-blur group-hover:bg-opacity-100 group-hover:text-opacity-100',\n      success: 'bg-green',\n      danger: 'bg-red',\n    },\n  },\n};\n\nexport default function StatusBadge({ status }: { status: string }) {\n  const { layout } = useLayout();\n  const colorStatus = status?.toLowerCase() === 'new' ? 'danger' : 'success';\n  const layoutKey = layout as keyof typeof classes.layout;\n\n  return (\n    <Badge\n      variant=\"flat\"\n      size=\"sm\"\n      color={colorStatus}\n      className={cn(\n        classes.base,\n        classes.color[colorStatus],\n        classes.layout[layoutKey]?.base,\n        classes.layout[layoutKey]?.[colorStatus]\n      )}\n    >\n      {status}\n    </Badge>\n  );\n}\n","'use client';\n\nimport { Link, useLocation } from '@remix-run/react';\nimport { Fragment } from 'react';\nimport { menuItems } from './menu-items';\nimport { Collapse } from 'rizzui/collapse';\nimport cn from 'app/packages/utils/class-names';\nimport { PiCaretDownBold } from 'react-icons/pi';\nimport StatusBadge from 'app/packages/components/get-status-badge';\nimport { Title } from 'rizzui/typography';\n\nexport function SidebarMenu() {\n  const { pathname } = useLocation();\n\n  return (\n    <div className=\"mt-4 pb-3 3xl:mt-6\">\n      {menuItems.map((item, index) => {\n        const isActive = pathname === (item?.href as string);\n\n        const pathnameExistInDropdowns: any = item?.dropdownItems?.filter(\n          (dropdownItem) => dropdownItem.href === pathname\n        );\n        const isDropdownOpen = Boolean(pathnameExistInDropdowns?.length);\n        return (\n          <Fragment key={item.name + '-' + index}>\n            {item?.href ? (\n              <>\n                {item?.dropdownItems ? (\n                  <Collapse\n                    defaultOpen={isDropdownOpen}\n                    header={({ open, toggle }) => (\n                      <div\n                        onClick={toggle}\n                        className={cn(\n                          'group relative mx-3 flex cursor-pointer items-center justify-between rounded-md px-3 py-2 font-medium lg:my-1 2xl:mx-5 2xl:my-2',\n                          isDropdownOpen\n                            ? 'before:top-2/5 text-primary before:absolute before:-start-3 before:block before:h-4/5 before:w-1 before:rounded-ee-md before:rounded-se-md before:bg-primary 2xl:before:-start-5'\n                            : 'text-gray-700 transition-colors duration-200 hover:bg-gray-100 dark:text-gray-700/90 dark:hover:text-gray-700'\n                        )}\n                      >\n                        <span className=\"flex items-center\">\n                          {item?.icon && (\n                            <span\n                              className={cn(\n                                'me-2 inline-flex h-5 w-5 items-center justify-center rounded-md [&>svg]:h-[20px] [&>svg]:w-[20px]',\n                                isDropdownOpen\n                                  ? 'text-primary'\n                                  : 'text-gray-800 dark:text-gray-500 dark:group-hover:text-gray-700'\n                              )}\n                            >\n                              {item?.icon}\n                            </span>\n                          )}\n                          {item.name}\n                        </span>\n\n                        <PiCaretDownBold\n                          strokeWidth={3}\n                          className={cn(\n                            'h-3.5 w-3.5 -rotate-90 text-gray-500 transition-transform duration-200 rtl:rotate-90',\n                            open && 'rotate-0 rtl:rotate-0'\n                          )}\n                        />\n                      </div>\n                    )}\n                  >\n                    {item?.dropdownItems?.map((dropdownItem, index) => {\n                      const isChildActive =\n                        pathname === (dropdownItem?.href as any);\n\n                      return (\n                        <Link\n                          to={dropdownItem?.href}\n                          key={dropdownItem?.name + index}\n                          className={cn(\n                            'mx-3.5 mb-0.5 flex items-center justify-between rounded-md px-3.5 py-2 font-medium capitalize last-of-type:mb-1 lg:last-of-type:mb-2 2xl:mx-5',\n                            isChildActive\n                              ? 'text-primary'\n                              : 'text-gray-500 transition-colors duration-200 hover:bg-gray-100 hover:text-gray-900'\n                          )}\n                        >\n                          <div className=\"flex items-center truncate\">\n                            <span\n                              className={cn(\n                                'me-[18px] ms-1 inline-flex h-1 w-1 rounded-full bg-current transition-all duration-200',\n                                isChildActive\n                                  ? 'bg-primary ring-[1px] ring-primary'\n                                  : 'opacity-40'\n                              )}\n                            />{' '}\n                            <span className=\"truncate\">\n                              {dropdownItem?.name}\n                            </span>\n                          </div>\n                          {dropdownItem?.badge?.length ? (\n                            <StatusBadge status={dropdownItem?.badge} />\n                          ) : null}\n                        </Link>\n                      );\n                    })}\n                  </Collapse>\n                ) : (\n                  <Link\n                    to={item?.href}\n                    className={cn(\n                      'group relative mx-3 my-0.5 flex items-center justify-between rounded-md px-3 py-2 font-medium capitalize lg:my-1 2xl:mx-5 2xl:my-2',\n                      isActive\n                        ? 'before:top-2/5 text-primary before:absolute before:-start-3 before:block before:h-4/5 before:w-1 before:rounded-ee-md before:rounded-se-md before:bg-primary 2xl:before:-start-5'\n                        : 'text-gray-700 transition-colors duration-200 hover:bg-gray-100 hover:text-gray-900 dark:text-gray-700/90'\n                    )}\n                  >\n                    <div className=\"flex items-center truncate\">\n                      {item?.icon && (\n                        <span\n                          className={cn(\n                            'me-2 inline-flex size-5 items-center justify-center rounded-md [&>svg]:size-5',\n                            isActive\n                              ? 'text-primary'\n                              : 'text-gray-800 dark:text-gray-500 dark:group-hover:text-gray-700'\n                          )}\n                        >\n                          {item?.icon}\n                        </span>\n                      )}\n                      <span className=\"truncate\">{item.name}</span>\n                    </div>\n                    {item?.badge?.length ? (\n                      <StatusBadge status={item?.badge} />\n                    ) : null}\n                  </Link>\n                )}\n              </>\n            ) : (\n              <Title\n                as=\"h6\"\n                className={cn(\n                  'mb-2 truncate px-6 text-xs font-normal uppercase tracking-widest text-gray-500 2xl:px-8',\n                  index !== 0 && 'mt-6 3xl:mt-7'\n                )}\n              >\n                {item.name}\n              </Title>\n            )}\n          </Fragment>\n        );\n      })}\n    </div>\n  );\n}\n","interface IconProps extends React.SVGProps<SVGSVGElement> {\n  iconOnly?: boolean;\n}\n\nexport default function Logo({ iconOnly = false, ...props }: IconProps) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox={`0 0 ${iconOnly ? '48 26' : '155 28'}`}\n      {...props}\n    >\n      <rect\n        width=\"10.16\"\n        height=\"19.93\"\n        fill=\"currentColor\"\n        rx=\"5.08\"\n        transform=\"rotate(29.49 -5.18 20.77) skewX(.85)\"\n      />\n      <rect\n        width=\"10.16\"\n        height=\"25.62\"\n        fill=\"currentColor\"\n        rx=\"5.08\"\n        transform=\"matrix(.87 .492 -.48 .878 27.17 0)\"\n      />\n      <rect\n        width=\"10.16\"\n        height=\"10.25\"\n        fill=\"currentColor\"\n        opacity=\".5\"\n        rx=\"5.08\"\n        transform=\"rotate(29.49 -8.24 75.34) skewX(.85)\"\n      />\n      {!iconOnly && (\n        <path\n          fill=\"currentColor\"\n          d=\"M58.94 21.4h-2.66v-9.83h2.66v9.84ZM55.96 8.36c0-.46.16-.84.48-1.16.32-.34.7-.5 1.16-.5.45 0 .84.16 1.16.48.32.32.48.71.48 1.18 0 .44-.16.82-.48 1.14-.32.32-.7.48-1.16.48-.45 0-.84-.16-1.16-.48-.32-.32-.48-.7-.48-1.14Zm4.49 10.32 2.28-.5c.02.42.2.78.5 1.08.32.28.75.42 1.3.42.41 0 .73-.1.96-.28a.87.87 0 0 0 .34-.7c0-.5-.36-.82-1.06-.96l-1.3-.3a3.78 3.78 0 0 1-2.08-1.08 2.96 2.96 0 0 1 .36-4.14c.7-.63 1.58-.94 2.64-.94.66 0 1.25.1 1.76.3.5.18.9.43 1.18.74.28.29.5.59.64.9.14.3.24.6.28.9l-2.22.5a1.63 1.63 0 0 0-.48-.92c-.26-.27-.64-.4-1.14-.4-.35 0-.65.1-.9.28a.85.85 0 0 0-.36.7c0 .48.3.77.9.88l1.4.3c.94.2 1.66.56 2.16 1.1.5.53.76 1.17.76 1.92 0 .88-.34 1.64-1 2.28a3.9 3.9 0 0 1-2.82.96c-.7 0-1.32-.1-1.86-.3a3.51 3.51 0 0 1-1.28-.8c-.3-.34-.52-.66-.68-.98a3.52 3.52 0 0 1-.28-.96Zm12.16-.12c.5.5 1.08.74 1.78.74s1.28-.25 1.76-.74c.5-.5.74-1.18.74-2.06 0-.88-.25-1.57-.74-2.06a2.36 2.36 0 0 0-1.76-.74c-.7 0-1.29.24-1.78.74-.48.5-.72 1.18-.72 2.06 0 .88.24 1.56.72 2.06Zm-1.92-5.8a5.02 5.02 0 0 1 3.7-1.48 5.07 5.07 0 0 1 5.16 5.22 5.07 5.07 0 0 1-5.16 5.22 5.02 5.02 0 0 1-5.16-5.22c0-1.5.48-2.76 1.46-3.74ZM83.8 21.4h-2.66v-9.84h2.54v1.2c.25-.46.65-.82 1.2-1.08a3.8 3.8 0 0 1 1.68-.4c1.42 0 2.4.54 2.92 1.64a3.48 3.48 0 0 1 3.12-1.64c1 0 1.84.31 2.52.94.7.62 1.04 1.56 1.04 2.8v6.38h-2.58v-5.84c0-.56-.15-1.01-.44-1.34-.28-.35-.72-.52-1.3-.52-.55 0-.99.18-1.32.56a2 2 0 0 0-.5 1.38v5.76h-2.64v-5.84c0-.56-.15-1.01-.44-1.34-.3-.35-.73-.52-1.3-.52-.56 0-1.01.18-1.34.56-.34.36-.5.82-.5 1.38v5.76Zm17.2-2.86c.48.5 1.08.74 1.77.74.7 0 1.28-.25 1.76-.74.5-.5.74-1.18.74-2.06 0-.88-.25-1.57-.74-2.06a2.36 2.36 0 0 0-1.76-.74c-.7 0-1.28.24-1.78.74-.48.5-.72 1.18-.72 2.06 0 .88.24 1.56.72 2.06Zm-1.93-5.8a5.02 5.02 0 0 1 3.7-1.48 5.07 5.07 0 0 1 5.16 5.22 5.07 5.07 0 0 1-5.16 5.22 5.02 5.02 0 0 1-5.16-5.22c0-1.5.49-2.76 1.46-3.74Zm16.46-1.22v2.68a4.08 4.08 0 0 0-.8-.08c-.76 0-1.37.22-1.84.66-.47.42-.7 1.13-.7 2.12v4.5h-2.66v-9.84h2.58v1.46c.48-1.03 1.41-1.54 2.8-1.54.15 0 .36.01.62.04Zm4.03 13.68h-2.66V11.57h2.58v1.2c.24-.4.63-.74 1.16-1a3.94 3.94 0 0 1 1.86-.42c1.4 0 2.5.48 3.32 1.44a5.45 5.45 0 0 1 1.22 3.68c0 1.5-.43 2.74-1.3 3.72a4.23 4.23 0 0 1-3.34 1.46c-1.3 0-2.25-.4-2.84-1.2v4.76Zm4.16-6.68c.47-.51.7-1.19.7-2.04 0-.86-.23-1.53-.7-2.02a2.26 2.26 0 0 0-1.74-.74c-.7 0-1.3.25-1.76.76-.46.49-.7 1.16-.7 2 0 .84.24 1.51.7 2.02.47.5 1.06.76 1.76.76s1.29-.25 1.74-.74Zm7.59-2.9v5.78h-2.66V6.93h2.66v5.46c.6-.72 1.49-1.08 2.66-1.08 1.2 0 2.1.36 2.72 1.1.63.72.94 1.65.94 2.8v6.2h-2.66v-5.74c0-.59-.15-1.06-.46-1.42-.3-.36-.75-.54-1.36-.54-.55 0-.99.18-1.32.54-.32.36-.5.82-.52 1.38Zm11.18 5.78h-2.66v-9.84h2.66v9.84Zm-2.98-13.06c0-.46.16-.84.48-1.16.32-.34.7-.5 1.16-.5.45 0 .84.16 1.16.48.32.32.48.71.48 1.18 0 .44-.16.82-.48 1.14-.32.32-.7.48-1.16.48-.45 0-.84-.16-1.16-.48-.32-.32-.48-.7-.48-1.14Zm9.75 5.38c-.71 0-1.3.24-1.78.74-.48.49-.72 1.16-.72 2.02 0 .85.24 1.53.72 2.04.49.49 1.09.74 1.8.74.62 0 1.12-.16 1.5-.48.37-.34.62-.73.76-1.18l2.34.78c-.24.9-.76 1.68-1.56 2.34-.8.65-1.82.98-3.04.98a5.06 5.06 0 0 1-5.18-5.22c0-1.5.48-2.76 1.46-3.74a4.95 4.95 0 0 1 3.64-1.48c1.25 0 2.28.32 3.08.98.8.64 1.31 1.42 1.54 2.34l-2.38.8c-.32-1.11-1.05-1.66-2.18-1.66Z\"\n        />\n      )}\n    </svg>\n  );\n}\n","'use client';\n\nimport cn from 'app/packages/utils/class-names';\nimport { SidebarMenu } from './sidebar-menu';\nimport { Link } from '@remix-run/react';\nimport Logo from 'app/packages/components/logo';\n\nexport default function Sidebar({ className }: { className?: string }) {\n  return (\n    <aside\n      className={cn(\n        'fixed bottom-0 start-0 z-50 h-full w-[270px] border-e-2 border-gray-100 bg-white dark:bg-gray-100/50 2xl:w-72',\n        className\n      )}\n    >\n      <div className=\"sticky top-0 z-40 bg-gray-0/10 px-6 pb-5 pt-5 dark:bg-gray-100/5 2xl:px-8 2xl:pt-6\">\n        <Link\n          to={'/merchant/home'}\n          aria-label=\"Site Logo\"\n          className=\"text-gray-800 hover:text-gray-900\"\n        >\n          <Logo className=\"max-w-[155px]\" />\n        </Link>\n      </div>\n\n      <div className=\"custom-scrollbar h-[calc(100%-80px)] overflow-y-auto\">\n        <SidebarMenu />\n      </div>\n    </aside>\n  );\n}\n","'use client';\n\nimport { atom, useAtomValue, useSetAtom } from 'jotai';\n\nexport type DrawerPlacements = 'left' | 'right' | 'top' | 'bottom';\n\ntype DrawerTypes = {\n  view: React.ReactNode;\n  isOpen: boolean;\n  placement?: DrawerPlacements;\n  containerClassName?: string;\n};\n\nconst drawerAtom = atom<DrawerTypes>({\n  isOpen: false,\n  view: null,\n  placement: 'right',\n  containerClassName: '',\n});\n\nexport function useDrawer() {\n  const state = useAtomValue(drawerAtom);\n  const setState = useSetAtom(drawerAtom);\n\n  const openDrawer = ({\n    view,\n    placement,\n    containerClassName,\n  }: {\n    view: React.ReactNode;\n    placement: DrawerPlacements;\n    containerClassName?: string;\n  }) => {\n    setState({\n      ...state,\n      isOpen: true,\n      view,\n      placement,\n      containerClassName,\n    });\n  };\n\n  const closeDrawer = () => {\n    setState({\n      ...state,\n      isOpen: false,\n    });\n  };\n\n  return {\n    ...state,\n    openDrawer,\n    closeDrawer,\n  };\n}\n","'use client';\nimport { ActionIcon } from 'rizzui';\nimport { DrawerPlacements, useDrawer } from 'app/shared/drawer-views/use-drawer';\nimport cn from 'app/packages/utils/class-names';\n\ninterface Props {\n  view: React.ReactElement;\n  placement?: DrawerPlacements;\n  containerClassName?: string;\n  className?: string;\n}\n\nexport default function HamburgerButton({\n  view,\n  placement = 'left',\n  containerClassName = 'max-w-[320px]',\n  className,\n}: Props) {\n  const { openDrawer } = useDrawer();\n  return (\n    <ActionIcon\n      aria-label=\"Open Sidebar Menu\"\n      variant=\"text\"\n      className={cn('me-3 h-auto w-auto p-0 sm:me-4 xl:hidden', className)}\n      onClick={() =>\n        openDrawer({\n          view,\n          placement,\n          containerClassName,\n        })\n      }\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        fill=\"none\"\n        viewBox=\"0 0 24 24\"\n        strokeWidth={2}\n        stroke=\"currentColor\"\n        className=\"h-6 w-6\"\n      >\n        <path\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n          d=\"M3.75 6.75h16.5M3.75 12H12m-8.25 5.25h16.5\"\n        />\n      </svg>\n    </ActionIcon>\n  );\n}\n","import cn from \"app/packages/utils/class-names\";\nimport { PiCommand, PiMagnifyingGlassBold } from \"react-icons/pi\";\n\ntype SearchTriggerProps = {\n  placeholderClassName?: string;\n  icon?: React.ReactNode;\n  lang?: string;\n  t?: (key: string) => string | undefined;\n} & React.ButtonHTMLAttributes<HTMLButtonElement>;\n\nexport default function SearchTrigger({\n  icon,\n  className,\n  placeholderClassName,\n  ...props\n}: SearchTriggerProps) {\n  return (\n    <button\n      aria-label=\"Search\"\n      className={cn(\n        \"group inline-flex items-center focus:outline-none active:translate-y-px xl:h-10 xl:w-full xl:max-w-sm xl:rounded-lg xl:border xl:border-muted xl:py-2 xl:pe-2 xl:ps-3.5 xl:shadow-sm xl:backdrop-blur-md xl:transition-colors xl:duration-200 xl:hover:border-gray-900 xl:hover:outline-double xl:hover:outline-[0.5px] xl:hover:outline-gray-900 xl:focus-visible:border-gray-900 xl:focus-visible:outline-double xl:focus-visible:outline-[0.5px] xl:focus-visible:outline-gray-900\",\n        className\n      )}\n      {...props}\n    >\n      {icon ? icon : <PiMagnifyingGlassBold className=\"magnifying-glass me-2 h-[18px] w-[18px]\" />}\n      <span\n        className={cn(\n          \"placeholder-text hidden text-sm text-gray-600 group-hover:text-gray-900 xl:inline-flex\",\n          placeholderClassName\n        )}\n      >\n        Search your page...\n      </span>\n      <span className=\"search-command ms-auto hidden items-center text-sm text-gray-600 lg:flex lg:rounded-md lg:bg-primary lg:px-1.5 lg:py-1 lg:text-xs lg:font-semibold lg:text-primary-foreground xl:justify-normal\">\n        <PiCommand\n          strokeWidth={1.3}\n          className=\"h-[15px] w-[15px]\"\n        />\n        K\n      </span>\n    </button>\n  );\n}\n","import { DUMMY_ID } from \"app/config/constants\";\nimport { routes } from \"app/config/routes\";\n\n// Note: do not add href in the label object, it is rendering as label\nexport const pageLinks = [\n  // label start\n  {\n    name: \"Home\",\n  },\n  // label end\n \n];\n","\"use client\";\n\nimport { Fragment, useEffect, useRef, useState } from \"react\";\nimport { ActionIcon, Empty, SearchNotFoundIcon, Button, Title, Input, cn } from \"rizzui\";\nimport { PiFileTextDuotone, PiMagnifyingGlassBold, PiXBold } from \"react-icons/pi\";\nimport { pageLinks } from \"./page-links.data\";\nimport { Link } from \"@remix-run/react\";\n\nexport default function SearchList({ onClose }: { onClose?: () => void }) {\n  const inputRef = useRef(null);\n  const [searchText, setSearchText] = useState(\"\");\n\n  let menuItemsFiltered = pageLinks;\n  if (searchText.length > 0) {\n    menuItemsFiltered = pageLinks.filter((item: any) => {\n      const label = item.name;\n      return (\n        label.match(searchText.toLowerCase()) ||\n        (label.toLowerCase().match(searchText.toLowerCase()) && label)\n      );\n    });\n  }\n\n  useEffect(() => {\n    if (inputRef?.current) {\n      // @ts-ignore\n      inputRef.current.focus();\n    }\n    return () => {\n      inputRef.current = null;\n    };\n  }, []);\n\n  return (\n    <>\n      <div className=\"flex items-center px-5 py-4\">\n        <Input\n          variant=\"flat\"\n          value={searchText}\n          ref={inputRef}\n          onChange={(e) => setSearchText(() => e.target.value)}\n          placeholder=\"Search pages here\"\n          className=\"flex-1\"\n          prefix={<PiMagnifyingGlassBold className=\"h-[18px] w-[18px] text-gray-600\" />}\n          suffix={\n            searchText && (\n              <Button\n                size=\"sm\"\n                variant={\"text\" as any}\n                className=\"h-auto w-auto px-0\"\n                onClick={(e) => {\n                  e.preventDefault();\n                  setSearchText(() => \"\");\n                }}\n              >\n                Clear\n              </Button>\n            )\n          }\n        />\n        <ActionIcon\n          size=\"sm\"\n          variant={\"text\" as any}\n          className=\"ms-3 text-gray-500 hover:text-gray-700\"\n          onClick={onClose}\n        >\n          <PiXBold className=\"h-5 w-5\" />\n        </ActionIcon>\n      </div>\n\n      <div className=\"custom-scrollbar max-h-[60vh] overflow-y-auto border-t border-gray-300 px-2 py-4\">\n        <>\n          {menuItemsFiltered.length === 0 ? (\n            <Empty\n              className=\"scale-75\"\n              image={<SearchNotFoundIcon />}\n              text=\"No Result Found\"\n              textClassName=\"text-xl\"\n            />\n          ) : (\n            <Title\n              as=\"h6\"\n              className=\"mb-5 px-3 font-semibold dark:text-gray-700\"\n            >\n              Quick Page Links\n            </Title>\n          )}\n        </>\n\n        {menuItemsFiltered.map((item, index) => {\n          return (\n            <Fragment key={item.name + \"-\" + index}>\n              {item?.href ? (\n                <Link\n                  to={item?.href as string}\n                  className=\"relative my-0.5 flex items-center rounded-lg px-3 py-2 text-sm hover:bg-gray-100 focus:outline-none focus-visible:bg-gray-100 dark:hover:bg-gray-50/50 dark:hover:backdrop-blur-lg\"\n                >\n                  <span className=\"inline-flex items-center justify-center rounded-md border border-gray-300 p-2 text-gray-500\">\n                    <PiFileTextDuotone className=\"h-5 w-5\" />\n                  </span>\n\n                  <span className=\"ms-3 grid gap-0.5\">\n                    <span className=\"font-medium capitalize text-gray-900 dark:text-gray-700\">\n                      {item.name}\n                    </span>\n                    <span className=\"text-gray-500\">{item?.href as string}</span>\n                  </span>\n                </Link>\n              ) : (\n                <Title\n                  as=\"h6\"\n                  className={cn(\n                    \"mb-1 px-3 text-xs font-semibold uppercase tracking-widest text-gray-500 dark:text-gray-500\",\n                    index !== 0 && \"mt-6 4xl:mt-7\"\n                  )}\n                >\n                  {item.name}\n                </Title>\n              )}\n            </Fragment>\n          );\n        })}\n      </div>\n    </>\n  );\n}\n","\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Modal } from \"rizzui\";\nimport SearchTrigger from \"./search-trigger\";\nimport SearchList from \"./search-list\";\nimport { useLocation } from \"@remix-run/react\";\n\nexport default function SearchWidget({\n  className,\n  placeholderClassName,\n  icon,\n}: {\n  className?: string;\n  icon?: React.ReactNode;\n  placeholderClassName?: string;\n}) {\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    const onKeyDown = (event: KeyboardEvent) => {\n      if ((event.metaKey || event.ctrlKey) && event.key === \"k\") {\n        event.preventDefault();\n        setOpen(!open);\n      }\n    };\n    window.addEventListener(\"keydown\", onKeyDown);\n    return () => window.removeEventListener(\"keydown\", onKeyDown);\n  }, [open]);\n\n  const pathname = useLocation();\n  useEffect(() => {\n    setOpen(() => false);\n    return () => setOpen(() => false);\n  }, [pathname]);\n\n  return (\n    <>\n      <SearchTrigger\n        icon={icon}\n        className={className}\n        onClick={() => setOpen(true)}\n        placeholderClassName={placeholderClassName}\n      />\n\n      <Modal\n        isOpen={open}\n        onClose={() => setOpen(false)}\n        overlayClassName=\"dark:bg-opacity-20 dark:bg-gray-50 dark:backdrop-blur-sm vikas1\"\n        containerClassName=\"dark:bg-gray-100/90 overflow-hidden dark:backdrop-blur-xl vikas2\"\n        className=\"z-[9999]\"\n      >\n        <SearchList onClose={() => setOpen(false)} />\n      </Modal>\n    </>\n  );\n}\n","export default function TruckSolidIcon({\n  ...props\n}: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 14\"\n      fill=\"none\"\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M19.969 6.75a1.155 1.155 0 0 0-.219-.438l-1.625-1.625c-.063-.062-.125-.093-.188-.156a.865.865 0 0 0-.406-.093h-1v3.03H20v-.562c0-.062 0-.125-.031-.156Zm-4.125 1.063V1.718A.84.84 0 0 0 15 .875H4.656a.84.84 0 0 0-.843.844v7.656h12.03V7.812Zm-8.719 3.125c-.594 0-1.063.468-1.063 1.062 0 .594.47 1.063 1.063 1.063.594 0 1.063-.47 1.063-1.063 0-.563-.47-1.063-1.063-1.063Zm10.25 0c-.594 0-1.063.468-1.063 1.062 0 .594.47 1.063 1.063 1.063.594 0 1.063-.47 1.063-1.063.03-.563-.47-1.063-1.063-1.063Zm-.844-2.782V9.72a.347.347 0 0 1-.343.344H3.844v1.374c0 .25.187.438.437.438h1.125a1.735 1.735 0 0 1 1.719-1.594c.906 0 1.656.719 1.719 1.594h6.812a1.735 1.735 0 0 1 1.719-1.594c.906 0 1.656.719 1.719 1.594h.437c.25 0 .438-.188.438-.438v-3.28H16.53Zm1.094 1.031h-.469a.347.347 0 0 1-.343-.343c0-.188.156-.344.343-.344h.469c.188 0 .344.156.344.344-.032.187-.157.344-.344.344ZM2.844 2.438H1.313a.347.347 0 0 1-.344-.344c0-.188.156-.344.344-.344h1.53c.188 0 .345.156.345.344 0 .219-.157.344-.344.344ZM2.844 4.031h-2.5A.347.347 0 0 1 0 3.688c0-.188.156-.344.344-.344h2.531c.188 0 .344.156.344.344-.031.218-.188.343-.375.343ZM2.844 5.625H1.313a.347.347 0 0 1-.344-.344c0-.187.156-.343.344-.343h1.53c.188 0 .345.156.345.343 0 .219-.157.344-.344.344ZM2.844 7.219h-2.5A.347.347 0 0 1 0 6.875c0-.188.156-.344.344-.344h2.531c.188 0 .344.157.344.344 0 .188-.188.344-.375.344ZM2.844 8.813H1.313a.347.347 0 0 1-.344-.344c0-.188.156-.344.344-.344h1.53c.188 0 .345.156.345.344a.347.347 0 0 1-.344.344Z\"\n      />\n    </svg>\n  );\n}\n","export default function CubeSolidIcon({\n  ...props\n}: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M11 16.998a1 1 0 0 0 1.447.895l4-2a1 1 0 0 0 .553-.895V9.234a1 1 0 0 0-1.447-.894l-4 2a1 1 0 0 0-.553.894v5.764ZM15.21 6.276a1 1 0 0 0 0-1.788l-4.763-2.382a1 1 0 0 0-.894 0L4.789 4.488a1 1 0 0 0 0 1.788l4.764 2.382a1 1 0 0 0 .894 0l4.764-2.382ZM4.447 8.34A1 1 0 0 0 3 9.234v5.764a1 1 0 0 0 .553.895l4 2A1 1 0 0 0 9 16.998v-5.764a1 1 0 0 0-.553-.894l-4-2Z\"\n      />\n    </svg>\n  );\n}\n","export default function FileStackIcon({\n  ...props\n}: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      {...props}\n    >\n      <g fill=\"currentColor\">\n        <path d=\"M7.46 0H4.14c-.753 0-1.367.613-1.367 1.367v3.125c0 .754.614 1.367 1.368 1.367h3.32V0ZM15.86 0H8.632v5.86h7.226c.754 0 1.368-.614 1.368-1.368V1.367C17.227.613 16.613 0 15.859 0Zm-.977 3.516h-3.906a.586.586 0 1 1 0-1.172h3.906a.586.586 0 1 1 0 1.172ZM10.234 14.14h-3.32c-.754 0-1.367.614-1.367 1.368v3.125c0 .754.613 1.367 1.367 1.367h3.32v-5.86ZM18.633 14.14h-7.227V20h7.227c.754 0 1.367-.613 1.367-1.367v-3.125c0-.754-.613-1.367-1.367-1.367Zm-.977 3.516H13.75a.586.586 0 1 1 0-1.172h3.906a.586.586 0 1 1 0 1.172ZM4.688 7.07h-3.32C.612 7.07 0 7.684 0 8.437v3.126c0 .753.613 1.367 1.367 1.367h3.32V7.07ZM13.086 7.07H5.859v5.86h7.227c.754 0 1.367-.614 1.367-1.367V8.437c0-.753-.613-1.367-1.367-1.367Zm-.977 3.516H8.203a.586.586 0 1 1 0-1.172h3.906a.586.586 0 0 1 0 1.172ZM15.875 10.367a.586.586 0 0 0 0 .828l1.562 1.563c.23.229.6.229.829 0l1.562-1.563a.586.586 0 1 0-.828-.828l-.563.562V7.656a.586.586 0 0 0-1.171 0v3.273l-.563-.562a.586.586 0 0 0-.828 0ZM2.563 14.312a.586.586 0 0 0-.829 0L.172 15.875a.586.586 0 0 0 .828.828l.562-.562v3.273a.586.586 0 1 0 1.172 0v-3.273l.563.562a.586.586 0 0 0 .828-.828l-1.562-1.563Z\" />\n      </g>\n    </svg>\n  );\n}\n","export default function CloudTaskIcon({\n  ...props\n}: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      {...props}\n    >\n      <path\n        fill=\"fill-current opacity-40\"\n        d=\"m16 17.143-1.666-.952v1.806a.333.333 0 0 0 .166.29l1.5.857v-2Z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"m9.836 5.759-1.5.857 1.664.95 1.667-.95-1.5-.857a.333.333 0 0 0-.331 0Z\"\n      />\n      <path\n        fill=\"fill-current opacity-40\"\n        d=\"M5.667 17.997v-1.806L4 17.143v2l1.5-.857a.333.333 0 0 0 .167-.289ZM8 8.996a.333.333 0 0 0 .167.29l1.5.857v-2L8 7.191v1.805Z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"m3.666 16.568 1.665-.975-1.498-.88a.326.326 0 0 0-.33 0l-1.5.88 1.663.975Z\"\n      />\n      <path\n        fill=\"fill-current opacity-40\"\n        d=\"m1.833 18.286 1.5.858v-2l-1.667-.953v1.806a.334.334 0 0 0 .167.29Z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"m11.665 15.592-1.498-.879a.326.326 0 0 0-.331 0l-1.5.88 1.664.975 1.665-.976Z\"\n      />\n      <path\n        fill=\"fill-current opacity-40\"\n        d=\"m16.666 19.143 1.5-.856a.333.333 0 0 0 .167-.29v-1.806l-1.666.952v2Z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"m17.998 15.592-1.498-.879a.326.326 0 0 0-.33 0l-1.5.88 1.663.975 1.665-.976ZM6.625 4.001a.328.328 0 0 1-.162-.042 2.338 2.338 0 0 0-2.012-.116 2.333 2.333 0 0 0 .882 4.492h2V6.81a.672.672 0 0 1 .334-.578l2-1.145a.687.687 0 0 1 .659-.003l2.007 1.146a.673.673 0 0 1 .334.58v1.524h2a2.333 2.333 0 1 0-1.458-4.155.333.333 0 0 1-.54-.297.334.334 0 0 1 .122-.223 3.005 3.005 0 0 1 1.503-.634 1.327 1.327 0 0 0-2.053-.786c-.002 0-.005 0-.007.003-.2.14-.358.334-.457.558a.334.334 0 0 1-.61-.266 2 2 0 0 1 .427-.618 3.323 3.323 0 0 0-5.782 1.125c.342.054.672.167.975.334A.333.333 0 0 1 6.625 4Z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"M12 17.997v-1.806l-1.666.952v2l1.5-.857a.333.333 0 0 0 .166-.289ZM11.834 9.287a.334.334 0 0 0 .166-.29V7.191l-1.666.952v2l1.5-.856ZM8 17.996a.333.333 0 0 0 .167.29l1.5.857v-2L8 16.191v1.805ZM16.66 14.084l.007.003v-1.086a1.003 1.003 0 0 0-1-1h-5.333v-1.087a.71.71 0 0 1-.334.087.662.662 0 0 1-.326-.084l-.007-.003v1.087H4.334a1.003 1.003 0 0 0-1 1v1.086a.692.692 0 0 1 .66-.003l.006.003v-1.086a.333.333 0 0 1 .333-.334h5.334v1.42a.692.692 0 0 1 .66-.003l.007.003v-1.42h5.333a.333.333 0 0 1 .333.334v1.086a.692.692 0 0 1 .66-.003Z\"\n        opacity={0.4}\n      />\n    </svg>\n  );\n}\n","export default function ShoppingBagSolidIcon({\n  ...props\n}: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        d=\"M3.187 4.316a.227.227 0 0 0-.227.207l-1.364 15a.23.23 0 0 0 .228.248H12.48l1.405-15.455H3.187ZM5.998 3.346a2.917 2.917 0 0 1 3.62-2.58 3.369 3.369 0 0 0-1.525 2.539l-.05.557h.455l.048-.516a2.93 2.93 0 0 1 1.64-2.378 2.93 2.93 0 0 1 1.65 2.894h.457a3.385 3.385 0 0 0-6.747-.557l-.05.557h.454l.048-.516Z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"M11.466.681a2.93 2.93 0 0 1 2.918 3.182h.454a3.382 3.382 0 0 0-4.01-3.577c.2.113.391.245.567.395h.07ZM17.05 4.523a.227.227 0 0 0-.226-.207h-.91V17.61l2.49 1.81L17.05 4.524ZM13.177 19.772l.01.002h4.927l-2.429-1.766-2.508 1.764ZM15.46 4.316h-1.117l-1.367 15.038 2.484-1.747V4.317Z\"\n      />\n    </svg>\n  );\n}\n","export default function BulbSolidIcon({\n  ...props\n}: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n        d=\"M11.602 5.018a4.346 4.346 0 0 1 2.742 4.04c0 2.447-1.525 2.278-1.932 5.523h-2.138v-2.924a.274.274 0 0 0-.547 0v2.924H7.588c-.407-3.245-1.932-3.076-1.932-5.524a4.345 4.345 0 0 1 4.027-4.332L7.397 7.17A.625.625 0 0 0 7.69 8.2l1.354.363L7.83 11.05a.625.625 0 0 0 1.018.701l3.757-4.018a.625.625 0 0 0-.295-1.03l-1.354-.363.647-1.322Zm-1.43 1.678 1.508-3.082a.078.078 0 0 0-.127-.088L7.796 7.544a.078.078 0 0 0 .037.13l1.996.534L8.32 11.29a.078.078 0 0 0 .128.088l3.756-4.018a.079.079 0 0 0-.002-.11.078.078 0 0 0-.035-.019l-1.995-.535ZM7.6 15.128h4.8a.72.72 0 0 1 .719.718v1.55a.72.72 0 0 1-.718.718h-.739v.72a.68.68 0 0 1-.677.678h-1.97a.68.68 0 0 1-.677-.678v-.72H7.6a.72.72 0 0 1-.719-.718v-1.55a.72.72 0 0 1 .719-.718Zm7.085-.998a.274.274 0 0 1 .387-.387l.988.987a.273.273 0 0 1-.09.447.274.274 0 0 1-.297-.06l-.988-.988ZM16.9 9.33a.274.274 0 0 1 0-.547h1.397a.273.273 0 0 1 0 .547H16.9Zm-1.827-4.958a.273.273 0 1 1-.387-.387l.988-.988a.274.274 0 0 1 .387.387l-.988.988Zm-10.144 9.37a.273.273 0 1 1 .387.387l-.988.987a.273.273 0 1 1-.386-.387l.987-.987ZM3.101 8.784a.273.273 0 0 1 0 .547H1.704a.273.273 0 1 1 0-.547h1.397Zm2.214-4.798a.273.273 0 0 1-.387.387l-.987-.988a.273.273 0 1 1 .386-.387l.988.988Zm4.958-1.828a.273.273 0 1 1-.546 0V.762a.273.273 0 0 1 .546 0v1.396Z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n}\n","export default function ParcelMapIcon({\n  ...props\n}: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n        d=\"m5.792 10.638 1.451.565-4.298 1.671-1.565-.609 4.185-1.627c.076-.03.15-.03.227 0ZM8.618.395a2.777 2.777 0 0 1 2.777 2.776c0 2.478-2.777 4.668-2.777 4.668S5.842 5.649 5.842 3.17A2.777 2.777 0 0 1 8.618.395Zm0 1.107a1.67 1.67 0 1 0 0 3.34 1.67 1.67 0 0 0 0-3.34Zm1.61 5.643c-.13.147-.265.294-.405.438.157.053.248.115.248.183 0 .18-.65.327-1.453.327-.802 0-1.452-.146-1.452-.327 0-.068.09-.13.247-.183-.14-.144-.275-.291-.404-.438-.872.129-1.453.359-1.453.621 0 .403 1.371.73 3.062.73 1.222 0 2.277-.17 2.768-.417h5.356c.588 0 1.07.482 1.07 1.07 0 .587-.482 1.07-1.07 1.07h-.84a1.7 1.7 0 0 0-1.694 1.694 1.7 1.7 0 0 0 1.695 1.695h1.01c.83 0 1.511.681 1.511 1.512s-.68 1.512-1.511 1.512h-6.507v-3.865l-4.415 1.717v5.125l4.216-1.64c.123-.047.2-.16.2-.29v-.422h6.506a2.142 2.142 0 0 0 2.136-2.137 2.142 2.142 0 0 0-2.136-2.137h-1.01c-.588 0-1.07-.482-1.07-1.07 0-.587.482-1.07 1.07-1.07h.84a1.7 1.7 0 0 0 1.694-1.694 1.7 1.7 0 0 0-1.695-1.695h-5.356c-.253-.128-.658-.235-1.159-.309ZM8.84 11.824l-4.298 1.671 1.135.442 4.299-1.671-1.136-.442Zm-3.475 7.785v-5.125l-1.253-.487v.978a.063.063 0 0 1-.103.048l-.73-.622-.683.213a.063.063 0 0 1-.082-.06v-1.179L.95 12.767v4.911c0 .132.077.244.2.291l4.216 1.64Z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n}\n","export default function BrushSolidIcon({\n  ...props\n}: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      {...props}\n    >\n      <g>\n        <path\n          className=\"fill-current opacity-40\"\n          d=\"M18.52.885C16.95-.317 14.765 3.07 13.23 5.002c-1.828 1.945-4.997 6.41-5.017 6.46-2.56-.594-4.737 2.159-5.714 4.813C2.075 17.428.78 17.485.976 18.11c.516 1.651 4.536 1.94 6.278 1.793 2.452-.494 5.716-3.228 4.153-5.916-.495-.69-1.446-1.669-1.432-1.693.65-.785 1.572-1.681 2.056-2.348 1.526-2.017 2.584-3.539 4.31-5.383.676-1.108 3.185-2.231 2.179-3.678Z\"\n        />\n        <path\n          fill=\"currentColor\"\n          d=\"M7.306 6.624c-.094-2.061-3.398-2.929-4.104-.788a2.515 2.515 0 0 0-.11.846c.006.435.689.418.67-.019-.01-.39.064-.749.307-1.027.766-.776 2.272-.209 2.48.82.238 1.26-.899 2.311-2.052 2.603-2.794.845-4.221-2.165-3.151-4.45.65-1.695 2.247-2.863 4.007-3.192 2.292-.472 4.66-.123 6.975.017.417.014.495-.566.093-.665-3.192-.654-6.935-1.39-9.859.526C.403 2.765-.785 5.945.586 8.312c1.51 2.991 6.85 1.678 6.72-1.688ZM19.55 8.035c-.151-.364-.682-.234-.653.156.378 4.314-1.435 9.283-5.951 10.556-.274.08-.736.111-.654.509.043.19.242.3.427.245 4.82-1.09 8.618-6.629 6.831-11.466ZM13.09 11.343a.39.39 0 0 0-.067-.528c-.791-.676-1.611-1.317-2.384-2.017a426.614 426.614 0 0 1 4.884-6.145c.582-.91 1.689-2.073 2.835-1.522 1.084.824.013 2.316-.74 3.002-1.16 1.169-2.352 2.311-3.262 3.705-.429.666.598 1.311 1.01.632.794-1.34 1.918-2.474 2.974-3.62.939-.926 1.821-2.352 1.22-3.695-1.147-2.196-3.972-.516-4.7 1.029-2.312 2.92-4.614 6.083-7.054 8.909-2.13-.286-4.568 1.282-5.309 3.382a.59.59 0 0 0 .09.584c-.48 1.06-.963 2.345-2.154 2.74-.265.085-.302.455-.06.593 2.548 1.517 6.076 2.106 8.675.405 1.542-1.013 2.415-2.99 2.013-4.709.71-.882 1.437-1.789 2.029-2.745Zm-3.086 4.865c-.277.671-.703 1.3-1.278 1.75-1.123.904-2.638 1.158-4.046 1.065a9.375 9.375 0 0 1-3.422-.907c.95-.632 1.404-1.777 1.837-2.834.204-.01.404-.126.514-.38.536-1.376 1.818-2.564 3.305-2.773 1.199-.172 2.334.55 2.916 1.565-.448.421-.911.826-1.395 1.206-.543.43-1.113.819-1.692 1.2a.27.27 0 0 0 .244.477c1.14-.452 2.214-1.057 3.229-1.744.055.458-.005.929-.212 1.375Zm.582-3.231a3.586 3.586 0 0 0-.626-.72 3.45 3.45 0 0 0-1.272-.927c.475-.623.951-1.244 1.43-1.863.197.125.434.229.574.362.544.4 1.031.87 1.52 1.336a16.916 16.916 0 0 1-1.627 1.812Z\"\n        />\n      </g>\n    </svg>\n  );\n}\n","import TruckSolidIcon from 'app/packages/components/icons/truck-solid';\nimport CubeSolidIcon from 'app/packages/components/icons/cube-solid';\nimport FileStackIcon from 'app/packages/components/icons/file-stack';\nimport CloudTaskIcon from 'app/packages/components/icons/cloud-task';\nimport ShoppingBagSolidIcon from 'app/packages/components/icons/shopping-bag-solid';\nimport BulbSolidIcon from 'app/packages/components/icons/bulb-solid';\nimport ParcelMapIcon from 'app/packages/components/icons/parcel-map';\nimport BrushSolidIcon from 'app/packages/components/icons/brush-solid';\n\nexport const notificationsData = [\n  {\n    id: 1,\n    name: 'Invitation for crafting engaging designs',\n    icon: BrushSolidIcon,\n    unRead: true,\n    sendTime: '2023-06-01T09:35:31.820Z',\n  },\n  {\n    id: 2,\n    name: 'Isomorphic dashboard redesign',\n    icon: CubeSolidIcon,\n    unRead: true,\n    sendTime: '2023-05-30T09:35:31.820Z',\n  },\n  {\n    id: 3,\n    name: '3 New Incoming Project Files:',\n    icon: FileStackIcon,\n    unRead: false,\n    sendTime: '2023-06-01T09:35:31.820Z',\n  },\n  {\n    id: 4,\n    name: 'Swornak purchased isomorphic',\n    icon: ShoppingBagSolidIcon,\n    unRead: false,\n    sendTime: '2023-05-21T09:35:31.820Z',\n  },\n  {\n    id: 5,\n    name: 'Task #45890 merged with #45890 in “Ads Pro Admin Dashboard project:',\n    icon: CloudTaskIcon,\n    unRead: true,\n    sendTime: '2023-06-01T09:35:31.820Z',\n  },\n  {\n    id: 6,\n    name: '3 new application design concepts added',\n    icon: BulbSolidIcon,\n    unRead: true,\n    sendTime: '2023-05-15T09:35:31.820Z',\n  },\n  {\n    id: 7,\n    name: 'Your order has been placed',\n    icon: ParcelMapIcon,\n    unRead: false,\n    sendTime: '2023-05-16T09:35:31.820Z',\n  },\n  {\n    id: 8,\n    name: 'Order has been shipped to #123221',\n    icon: TruckSolidIcon,\n    unRead: false,\n    sendTime: '2023-05-01T09:35:31.820Z',\n  },\n];\n","import { useEffect, useState } from \"react\";\n\nconst useMediaQuery = (query: string) => {\n  const [matches, setMatches] = useState(false);\n\n  useEffect(() => {\n    const mediaQueryList = window.matchMedia(query);\n    const handleChange = (event: MediaQueryListEvent) => setMatches(event.matches);\n\n    mediaQueryList.addEventListener(\"change\", handleChange);\n    setMatches(mediaQueryList.matches);\n\n    return () => mediaQueryList.removeEventListener(\"change\", handleChange);\n  }, [query]);\n\n  return matches;\n};\n\nexport default useMediaQuery","'use client';\n\nimport { Link } from '@remix-run/react';\nimport { notificationsData } from 'app/data/notifications';\nimport useMediaQuery from 'app/packages/hooks/use-media';\nimport dayjs from 'dayjs';\nimport relativeTime from \"dayjs/plugin/relativeTime\";\nimport { ReactElement, ReactNode, RefObject, useState } from 'react';\nimport { PiCheck } from 'react-icons/pi';\nimport { Badge, Checkbox, Popover, Text, Title } from 'rizzui';\n\ndayjs.extend(relativeTime);\n\nfunction NotificationsList({\n  setIsOpen,\n}: {\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}) {\n  return (\n    <div className=\"w-[320px] text-left sm:w-[360px] 2xl:w-[420px] rtl:text-right\">\n      <div className=\"mb-3 flex items-center justify-between ps-6\">\n        <Title as=\"h5\" fontWeight=\"semibold\">\n          Notifications\n        </Title>\n        <Checkbox\n          size=\"sm\"\n          label=\"Mark all as read\"\n          labelWeight=\"normal\"\n          labelClassName=\"text-sm\"\n        />\n      </div>\n      <div className=\"custom-scrollbar max-h-[420px] overflow-y-auto scroll-smooth\">\n        <div className=\"grid cursor-pointer grid-cols-1 gap-1 ps-4\">\n          {notificationsData.map((item) => (\n            <div\n              key={item.name + item.id}\n              className=\"group grid grid-cols-[auto_minmax(0,1fr)] gap-3 rounded-md px-2 py-2 pe-3 transition-colors hover:bg-gray-100 dark:hover:bg-gray-50\"\n            >\n              <div className=\"flex h-9 w-9 items-center justify-center rounded bg-gray-100/70 p-1 dark:bg-gray-50/50 [&>svg]:h-auto [&>svg]:w-5\">\n                <item.icon />\n              </div>\n              <div className=\"grid grid-cols-[minmax(0,1fr)_auto] items-center\">\n                <div className=\"w-full\">\n                  <Text className=\"mb-0.5 w-11/12 truncate text-sm font-semibold text-gray-900 dark:text-gray-700\">\n                    {item.name}\n                  </Text>\n                  <Text className=\"ms-auto whitespace-nowrap pe-8 text-xs text-gray-500\">\n                    {dayjs(item.sendTime).fromNow(true)}\n                  </Text>\n                </div>\n                <div className=\"ms-auto flex-shrink-0\">\n                  {item.unRead ? (\n                    <Badge\n                      renderAsDot\n                      size=\"lg\"\n                      color=\"primary\"\n                      className=\"scale-90\"\n                    />\n                  ) : (\n                    <span className=\"inline-block rounded-full bg-gray-100 p-0.5 dark:bg-gray-50\">\n                      <PiCheck className=\"h-auto w-[9px]\" />\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n      <Link\n        to={'#'}\n        onClick={() => setIsOpen(false)}\n        className=\"-me-6 block px-6 pb-0.5 pt-3 text-center hover:underline\"\n      >\n        View All Activity\n      </Link>\n    </div>\n  );\n}\n\nexport default function NotificationDropdown({\n  children,\n}: {\n  children: ReactElement & { ref?: RefObject<any> };\n}) {\n  const isMobile = useMediaQuery('(max-width: 480px)');\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <Popover\n      isOpen={isOpen}\n      setIsOpen={setIsOpen}\n      shadow=\"sm\"\n      placement={isMobile ? 'bottom' : 'bottom-end'}\n    >\n      <Popover.Trigger>{children}</Popover.Trigger>\n      <Popover.Content className=\"z-[9999] px-0 pb-4 pe-6 pt-5 dark:bg-gray-100 [&>svg]:hidden [&>svg]:dark:fill-gray-100 sm:[&>svg]:inline-flex\">\n        <NotificationsList setIsOpen={setIsOpen} />\n      </Popover.Content>\n    </Popover>\n  );\n}\n","export default function RingBellSolidIcon({\n  ...props\n}: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 18 18\"\n      fill=\"none\"\n      {...props}\n    >\n      <path\n        className=\"fill-current opacity-40\"\n        d=\"M16.5 8.162a.75.75 0 0 1-.75-.75 7.824 7.824 0 0 0-2.306-5.569.75.75 0 0 1 1.06-1.06 9.315 9.315 0 0 1 2.746 6.629.752.752 0 0 1-.75.75ZM1.5 8.162a.75.75 0 0 1-.751-.75c0-2.505.975-4.86 2.746-6.63a.751.751 0 0 1 1.061 1.06 7.824 7.824 0 0 0-2.306 5.57.75.75 0 0 1-.75.75Z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"M16.034 12.684A5.025 5.025 0 0 1 14.25 8.84V6.75c0-2.64-1.96-4.824-4.5-5.19V.75a.75.75 0 1 0-1.5 0v.81c-2.54.366-4.5 2.55-4.5 5.19v2.091c0 1.484-.65 2.885-1.792 3.85a1.312 1.312 0 0 0 .854 2.31h12.375a1.314 1.314 0 0 0 .847-2.317Z\"\n      />\n      <path\n        className=\"fill-current opacity-40\"\n        d=\"M9 18a2.816 2.816 0 0 0 2.755-2.25H6.244A2.818 2.818 0 0 0 9 18Z\"\n      />\n    </svg>\n  );\n}\n","export const messagesData = [\n  {\n    id: 1,\n    message: `It is nice to be chatting with you. Omnis,\n        quidem non. Sint inventore quasi temporibus architecto eaque,\n        natus aspernatur minus?`,\n    avatar: ['https://randomuser.me/api/portraits/men/51.jpg'],\n    name: 'Wade Warren',\n    unRead: true,\n    sendTime: '2023-06-01T09:35:31.820Z',\n  },\n  {\n    id: 2,\n    message: ` Oh... Let's move on to something else for a bit. Sint inventore quasi temporibus architecto eaque,\n        natus aspernatur minus?`,\n    avatar: ['https://randomuser.me/api/portraits/men/40.jpg'],\n    name: 'Jane Cooper',\n    unRead: true,\n    sendTime: '2023-05-30T09:35:31.820Z',\n  },\n  {\n    id: 3,\n    message: `You: I never received any phone calls about it. Omnis,\n        quidem non. Sint inventore quasi temporibus architecto eaque,\n        natus aspernatur minus?`,\n    avatar: ['https://randomuser.me/api/portraits/women/11.jpg'],\n    name: 'Leslie Alexander',\n    unRead: false,\n    sendTime: '2023-06-01T09:35:31.820Z',\n  },\n  {\n    id: 4,\n    message: `You: But you'll need to type in every possible word. Omnis,\n        quidem non. Sint inventore quasi temporibus architecto eaque,\n        natus aspernatur minus?`,\n    avatar: ['https://randomuser.me/api/portraits/men/36.jpg'],\n    name: 'John Doe',\n    unRead: false,\n    sendTime: '2023-05-21T09:35:31.820Z',\n  },\n  {\n    id: 5,\n    message: `They were delighted and set to work immediately. Sint inventore quasi temporibus architecto eaque,\n        natus aspernatur minus?`,\n    avatar: [\n      'https://randomuser.me/api/portraits/men/50.jpg',\n      'https://randomuser.me/api/portraits/women/57.jpg',\n    ],\n    name: 'Design & Frontend',\n    unRead: true,\n    sendTime: '2023-06-01T09:35:31.820Z',\n  },\n  {\n    id: 6,\n    message: `Hows going everything in our laravel project. Omnis,\n        quidem non. Sint inventore quasi temporibus architecto eaque,\n        natus aspernatur minus?`,\n    avatar: [\n      'https://randomuser.me/api/portraits/women/0.jpg',\n      'https://randomuser.me/api/portraits/men/22.jpg',\n    ],\n    name: 'Laravel',\n    unRead: true,\n    sendTime: '2023-05-15T09:35:31.820Z',\n  },\n  {\n    id: 7,\n\n    name: 'WordPress',\n    avatar: [\n      'https://randomuser.me/api/portraits/men/94.jpg',\n      'https://randomuser.me/api/portraits/women/11.jpg',\n    ],\n    unRead: false,\n    sendTime: '2023-05-16T09:35:31.820Z',\n  },\n  {\n    id: 8,\n    message: `You: which is actually pretty clever and funny, inventore quasi temporibus architecto eaque,\n        natus aspernatur minus?`,\n    avatar: ['https://randomuser.me/api/portraits/men/43.jpg'],\n    name: 'Jenny Doe',\n    unRead: false,\n    sendTime: '2023-05-01T09:35:31.820Z',\n  },\n  {\n    id: 9,\n    message: `You could try ELIZA bot, it was a software tween herself. Omnis,\n        quidem non. Sint inventore quasi temporibus architecto eaque,\n        natus aspernatur minus?`,\n    avatar: ['https://randomuser.me/api/portraits/men/75.jpg'],\n    name: 'Bruce Warren',\n    unRead: true,\n    sendTime: '2023-04-01T09:35:31.820Z',\n  },\n];\n","'use client';\n\nimport { Link } from '@remix-run/react';\nimport { routes } from 'app/config/routes';\nimport { messagesData } from 'app/data/messages';\nimport useMediaQuery from 'app/packages/hooks/use-media';\nimport cn from 'app/packages/utils/class-names';\nimport dayjs from 'dayjs';\nimport { RefObject, useState } from 'react';\nimport { PiCheck } from 'react-icons/pi';\nimport { Avatar, Badge, Popover, Text, Title } from 'rizzui';\n\n\nfunction MessagesList({\n  setIsOpen,\n}: {\n  setIsOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}) {\n  return (\n    <div className=\"w-[320px] text-left sm:w-[360px] 2xl:w-[420px] rtl:text-right\">\n      <div className=\"mb-2 flex items-center justify-between ps-6\">\n        <Title as=\"h5\" fontWeight=\"semibold\">\n          Messages\n        </Title>\n        <Link\n          to={routes.help}\n          onClick={() => setIsOpen(false)}\n          className=\"hover:underline\"\n        >\n          View all\n        </Link>\n      </div>\n      <div className=\"custom-scrollbar overflow-y-auto scroll-smooth max-h-[406px]\">\n        <div className=\"grid grid-cols-1 ps-4\">\n          {messagesData.map((item) => (\n            <div\n              key={item.name + item.id}\n              className=\"group grid cursor-pointer grid-cols-[auto_minmax(0,1fr)] gap-2.5 rounded-md px-2 py-2.5 pe-3 transition-colors hover:bg-gray-100 dark:hover:bg-gray-50\"\n            >\n              <div className={cn('relative', item.avatar.length > 1 && 'me-1')}>\n                <Avatar\n                  src={item.avatar[0]}\n                  name={item.name}\n                  className={cn(\n                    item.avatar.length > 1 &&\n                    'relative -end-1 -top-0.5 !h-9 !w-9'\n                  )}\n                />\n                {item.avatar.length > 1 && (\n                  <Avatar\n                    src={item.avatar[1]}\n                    name={item.name}\n                    className=\"absolute -bottom-1 end-1.5 !h-9 !w-9 border-2 border-gray-0 dark:border-gray-100\"\n                  />\n                )}\n              </div>\n              <div className=\"grid grid-cols-[minmax(0,1fr)_auto] items-center\">\n                <div className=\"w-full\">\n                  <Text className=\"mb-0.5 w-11/12 truncate text-sm font-semibold text-gray-900 dark:text-gray-700\">\n                    {item.name}\n                  </Text>\n                  <div className=\"flex\">\n                    <Text className=\"w-10/12 truncate pe-7 text-xs text-gray-500\">\n                      {item.message}\n                    </Text>\n                    <Text className=\"ms-auto whitespace-nowrap pe-8 text-xs text-gray-500\">\n                      {dayjs(item.sendTime).fromNow(true)}\n                    </Text>\n                  </div>\n                </div>\n                <div className=\"ms-auto flex-shrink-0\">\n                  {item.unRead ? (\n                    <Badge\n                      renderAsDot\n                      size=\"lg\"\n                      color=\"primary\"\n                      className=\"scale-90\"\n                    />\n                  ) : (\n                    <span className=\"inline-block rounded-full bg-gray-100 p-0.5 dark:bg-gray-50\">\n                      <PiCheck className=\"h-auto w-[9px]\" />\n                    </span>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function MessagesDropdown({\n  children,\n}: {\n  children: React.ReactElement & { ref?: RefObject<any> };\n}) {\n  const isMobile = useMediaQuery('(max-width: 480px)');\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <Popover\n      isOpen={isOpen}\n      setIsOpen={setIsOpen}\n      shadow=\"sm\"\n      placement={isMobile ? 'bottom' : 'bottom-end'}\n    >\n      <Popover.Trigger>{children}</Popover.Trigger>\n      <Popover.Content className=\"z-[9999] pb-6 pe-6 ps-0 pt-5 dark:bg-gray-100 [&>svg]:hidden [&>svg]:dark:fill-gray-100 sm:[&>svg]:inline-flex\">\n        <MessagesList setIsOpen={setIsOpen} />\n      </Popover.Content>\n    </Popover>\n  );\n}\n","export default function ChatSolidIcon({\n  ...props\n}: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 19 19\"\n      fill=\"none\"\n      {...props}\n    >\n      <path\n        className=\"fill-current opacity-40\"\n        d=\"M16.172 5.313h-.375v3.562a3.19 3.19 0 0 1-3.187 3.188H3.798v1.687c0 1.137.925 2.062 2.062 2.062h.937V17.5a.562.562 0 0 0 .977.38l1.895-2.068h6.503a2.064 2.064 0 0 0 2.062-2.062V7.375a2.065 2.065 0 0 0-2.062-2.063Z\"\n      />\n      <path\n        fill=\"currentColor\"\n        d=\"M12.61.813H1.734A1.69 1.69 0 0 0 .047 2.5v6.375c0 .93.757 1.688 1.688 1.688H12.61a1.69 1.69 0 0 0 1.688-1.688V2.5A1.691 1.691 0 0 0 12.609.812Zm.187 3.33L7.742 6.595a1.273 1.273 0 0 1-1.14 0L1.547 4.143V2.897L7.09 5.584c.053.03.112.03.165 0l5.543-2.686-.001 1.244Z\"\n      />\n    </svg>\n  );\n}\n","import { useTheme } from \"next-themes\";\n\nexport const presetLight = {\n  lighter: '#f1f1f1',\n  light: '#666666',\n  default: '#111111',\n  dark: '#000000',\n  foreground: '#ffffff',\n};\n\nexport const presetDark = {\n  lighter: '#222222',\n  light: '#929292',\n  default: '#f1f1f1',\n  dark: '#ffffff',\n  foreground: '#111111',\n};\n\n// defaults from global css line 38\nexport const DEFAULT_PRESET_COLORS = {\n  lighter: '#d7e3fe',\n  light: '#608efb',\n  default: '#3872fa',\n  dark: '#1d58d8',\n  foreground: '#ffffff',\n};\n\nexport const DEFAULT_PRESET_COLOR_NAME = 'Black';\n\nexport const usePresets = () => {\n  const { theme } = useTheme();\n\n  return [\n    {\n      name: DEFAULT_PRESET_COLOR_NAME,\n      colors: DEFAULT_PRESET_COLORS,\n    },\n    {\n      name: 'Black',\n      colors: {\n        lighter: theme === 'light' ? presetLight.lighter : presetDark.lighter,\n        light: theme === 'light' ? presetLight.light : presetDark.light,\n        default: theme === 'light' ? presetLight.default : presetDark.default,\n        dark: theme === 'light' ? presetLight.dark : presetDark.dark,\n        foreground:\n          theme === 'light' ? presetLight.foreground : presetDark.foreground,\n      },\n    },\n    {\n      name: 'Teal',\n      colors: {\n        lighter: '#ccfbf1', // Teal 100\n        light: '#5eead4', // Teal 300\n        default: '#0d9488', // Teal 600\n        dark: '#115e59', // Teal 800\n        foreground: '#ffffff',\n      },\n    },\n    {\n      name: 'Violet',\n      colors: {\n        lighter: '#ede9fe', // Violet 100\n        light: '#a5b4fc', // Violet 300\n        default: '#7c3aed', // Violet 600\n        dark: '#4c1d95', // Violet 900\n        foreground: '#ffffff',\n      },\n    },\n    {\n      name: 'Rose',\n      colors: {\n        lighter: '#ffe4e6', // Rose 100\n        light: '#fda4af', // Rose 300\n        default: '#e11d48', // Rose 600\n        dark: '#be123c', // Rose 700\n        foreground: '#ffffff',\n      },\n    },\n    {\n      name: 'Yellow',\n      colors: {\n        lighter: '#fef9c3', // Yellow 100\n        light: '#fde047', // Yellow 300\n        default: '#ca8a04', // Yellow 600\n        dark: '#a16207', // Yellow 800\n        foreground: '#ffffff',\n      },\n    },\n  ];\n};\n","'use client';\nimport { atom, useAtom } from 'jotai';\n\n// 1. set initial atom for isomorphic direction\nconst isomorphicDirectionAtom = atom(\n  typeof window !== 'undefined' ? localStorage.getItem('iso-direction') : 'ltr'\n);\n\nconst isomorphicDirectionAtomWithPersistence = atom(\n  (get) => get(isomorphicDirectionAtom),\n  (get, set, newStorage: any) => {\n    set(isomorphicDirectionAtom, newStorage);\n    localStorage.setItem('iso-direction', newStorage);\n  }\n);\n\n// 2. useDirection hook to check which direction is available\nexport function useDirection() {\n  const [direction, setDirection] = useAtom(\n    isomorphicDirectionAtomWithPersistence\n  );\n\n  return {\n    direction: direction === null ? 'ltr' : direction,\n    setDirection,\n  };\n}\n","export function hexToRGB(hex: string) {\n  if (!hex) return '';\n\n  const r = parseInt(hex.slice(1, 3), 16);\n  const g = parseInt(hex.slice(3, 5), 16);\n  const b = parseInt(hex.slice(5, 7), 16);\n\n  return `${r} ${g} ${b}`;\n}\n","import { hexToRGB } from './hex-to-rgb';\n\nexport function updateThemeColor(\n  primaryLighter: string,\n  primaryLight: string,\n  primaryDefault: string,\n  primaryDark: string,\n  primaryForeground: string\n) {\n  document.documentElement.style.setProperty(\n    '--primary-dark',\n    hexToRGB(primaryDark)\n  );\n  document.documentElement.style.setProperty(\n    '--primary-light',\n    hexToRGB(primaryLight)\n  );\n  document.documentElement.style.setProperty(\n    '--primary-lighter',\n    hexToRGB(primaryLighter)\n  );\n  document.documentElement.style.setProperty(\n    '--primary-default',\n    hexToRGB(primaryDefault)\n  );\n  document.documentElement.style.setProperty(\n    '--primary-foreground',\n    hexToRGB(primaryForeground)\n  );\n}\n","'use client';\n\nimport { useEffect } from 'react';\nimport { atom, useAtom } from 'jotai';\nimport { DEFAULT_PRESET_COLOR_NAME, DEFAULT_PRESET_COLORS, usePresets } from 'app/config/color-presets';\nimport { updateThemeColor } from 'app/packages/utils/update-theme-color';\n\n\n// color preset hook\nfunction getLocalStoragePreset() {\n  if (typeof window !== 'undefined') {\n    const localStorageValue = localStorage.getItem('isomorphic-preset');\n    return JSON.parse(String(localStorageValue));\n  }\n}\n\nconst colorPresetsAtom = atom(\n  typeof window !== 'undefined'\n    ? getLocalStoragePreset()\n    : DEFAULT_PRESET_COLORS\n);\n\nconst colorPresetsAtomWithPersistence = atom(\n  (get) => get(colorPresetsAtom),\n  (get, set, newStorage: any) => {\n    set(colorPresetsAtom, newStorage);\n    localStorage.setItem('isomorphic-preset', JSON.stringify(newStorage));\n  }\n);\n\nexport function useColorPresets() {\n  const [colorPresets, setColorPresets] = useAtom(\n    colorPresetsAtomWithPersistence\n  );\n  return {\n    colorPresets: colorPresets === null ? DEFAULT_PRESET_COLORS : colorPresets,\n    setColorPresets,\n  };\n}\n\n//  color preset name hook\nconst colorPresetNameAtom = atom(\n  typeof window !== 'undefined'\n    ? localStorage.getItem('isomorphic-preset-name')\n    : DEFAULT_PRESET_COLOR_NAME\n);\n\nconst colorPresetNameAtomWithPersistence = atom(\n  (get) => get(colorPresetNameAtom),\n  (get, set, newStorage: any) => {\n    set(colorPresetNameAtom, newStorage);\n    localStorage.setItem('isomorphic-preset-name', newStorage);\n  }\n);\n\nexport function useColorPresetName() {\n  const [colorPresetName, setColorPresetName] = useAtom(\n    colorPresetNameAtomWithPersistence\n  );\n  return {\n    colorPresetName:\n      colorPresetName === null ? DEFAULT_PRESET_COLOR_NAME : colorPresetName,\n    setColorPresetName,\n  };\n}\n\n// apply color preset\nexport function useApplyColorPreset<T extends Record<string, any>>(\n  colorPresets: T\n) {\n  const COLOR_PRESETS = usePresets();\n\n  useEffect(() => {\n    let colorLighter = COLOR_PRESETS[0].colors.lighter;\n    let colorLight = COLOR_PRESETS[0].colors.light;\n    let colorDefault = COLOR_PRESETS[0].colors.default;\n    let colorDark = COLOR_PRESETS[0].colors.dark;\n    let colorForeground = COLOR_PRESETS[0].colors.foreground;\n\n    if (colorPresets) {\n      colorLighter = colorPresets.lighter;\n      colorLight = colorPresets.light;\n      colorDefault = colorPresets.default;\n      colorDark = colorPresets.dark;\n      colorForeground = colorPresets.foreground;\n    }\n\n    updateThemeColor(\n      colorLighter,\n      colorLight,\n      colorDefault,\n      colorDark,\n      colorForeground\n    );\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [colorPresets]);\n}\n","'use client';\n\nimport cn from 'app/packages/utils/class-names';\nimport { PiXBold } from 'react-icons/pi';\nimport { Title, ActionIcon } from 'rizzui';\n\nexport default function DrawerHeader({ onClose }: { onClose: () => void }) {\n  return (\n    <div className=\"flex items-center justify-between border-b border-muted px-5 py-3.5\">\n      <Title as=\"h5\" className={cn('font-semibold')}>\n        Settings\n      </Title>\n      <ActionIcon\n        variant=\"text\"\n        onClick={onClose}\n        className={cn('h-7 w-7')}\n        rounded=\"full\"\n      >\n        <PiXBold className=\"h-[18px] w-[18px]\" />\n      </ActionIcon>\n    </div>\n  );\n}\n","export default function CogSolidIcon({\n  strokeWidth,\n  ...props\n}: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      strokeWidth={strokeWidth ?? 1.5}\n      stroke=\"currentColor\"\n      {...props}\n    >\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        className=\"fill-current opacity-30\"\n        d=\"M9.594 3.94c.09-.542.56-.94 1.11-.94h2.593c.55 0 1.02.398 1.11.94l.213 1.281c.063.374.313.686.645.87.074.04.147.083.22.127.324.196.72.257 1.075.124l1.217-.456a1.125 1.125 0 011.37.49l1.296 2.247a1.125 1.125 0 01-.26 1.431l-1.003.827c-.293.24-.438.613-.431.992a6.759 6.759 0 010 .255c-.007.378.138.75.43.99l1.005.828c.424.35.534.954.26 1.43l-1.298 2.247a1.125 1.125 0 01-1.369.491l-1.217-.456c-.355-.133-.75-.072-1.076.124a6.57 6.57 0 01-.22.128c-.331.183-.581.495-.644.869l-.213 1.28c-.09.543-.56.941-1.11.941h-2.594c-.55 0-1.02-.398-1.11-.94l-.213-1.281c-.062-.374-.312-.686-.644-.87a6.52 6.52 0 01-.22-.127c-.325-.196-.72-.257-1.076-.124l-1.217.456a1.125 1.125 0 01-1.369-.49l-1.297-2.247a1.125 1.125 0 01.26-1.431l1.004-.827c.292-.24.437-.613.43-.992a6.932 6.932 0 010-.255c.007-.378-.138-.75-.43-.99l-1.004-.828a1.125 1.125 0 01-.26-1.43l1.297-2.247a1.125 1.125 0 011.37-.491l1.216.456c.356.133.751.072 1.076-.124.072-.044.146-.087.22-.128.332-.183.582-.495.644-.869l.214-1.281z\"\n      />\n      <path\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n        d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\"\n        className=\"fill-current\"\n      />\n    </svg>\n  );\n}\n","'use client';\n\nimport { usePresets } from 'app/config/color-presets';\nimport { useDirection } from 'app/packages/hooks/use-direction';\nimport { useDrawer } from 'app/shared/drawer-views/use-drawer';\nimport { lazy, Suspense, useEffect, startTransition } from 'react';\nimport { ActionIcon } from 'rizzui';\nimport { useApplyColorPreset, useColorPresets } from './settings/use-theme-color';\nimport cn from 'app/packages/utils/class-names';\nimport DrawerHeader from './drawer-header';\nimport CogSolidIcon from 'app/packages/components/icons/cog-solid';\n\n// Lazy load the SettingsDrawer component\nconst SettingsDrawer = lazy(() => import(\"app/layouts/settings-drawer\"));\n\nexport default function SettingsButton({\n  className,\n  children,\n}: {\n  className?: string;\n  children?: React.ReactNode;\n}) {\n  const COLOR_PRESETS = usePresets();\n  const { openDrawer, closeDrawer } = useDrawer();\n  const { direction } = useDirection();\n  const { colorPresets } = useColorPresets();\n\n  // Apply color presets\n  useApplyColorPreset<any>(colorPresets ?? COLOR_PRESETS[0].colors);\n\n  // Set the `dir` attribute on the HTML tag when the direction changes\n  useEffect(() => {\n    document.documentElement.dir = direction ?? 'ltr';\n  }, [direction]);\n\n  return (\n    <ActionIcon\n      aria-label=\"Settings\"\n      variant={\"text\" as any}\n      className={cn(\n        'relative h-[34px] w-[34px] shadow backdrop-blur-md dark:bg-gray-100 md:h-9 md:w-9',\n        className\n      )}\n      onClick={() => {\n        // Wrap state update in startTransition to prevent blocking UI\n        startTransition(() => {\n          openDrawer({\n            view: (\n              <Suspense fallback={<div className=\"p-4 text-gray-600\">Loading settings...</div>}>\n                <DrawerHeader onClose={closeDrawer} />\n                <SettingsDrawer />\n              </Suspense>\n            ),\n            placement: 'right',\n            containerClassName: 'max-w-[420px]',\n          });\n        });\n      }}\n    >\n      {children ? (\n        children\n      ) : (\n        <CogSolidIcon\n          strokeWidth={1.8}\n          className=\"h-[22px] w-auto animate-spin-slow\"\n        />\n      )}\n    </ActionIcon>\n  );\n}\n","'use client';\n\nimport { Title, Text, Avatar, Button, Popover } from 'rizzui';\nimport { useEffect, useState } from 'react';\nimport cn from 'app/packages/utils/class-names';\nimport { routes } from 'app/config/routes';\nimport { Link, useLocation } from '@remix-run/react';\n\nexport default function ProfileMenu({\n  buttonClassName,\n  avatarClassName,\n  username = false,\n}: {\n  buttonClassName?: string;\n  avatarClassName?: string;\n  username?: boolean;\n}) {\n  return (\n    <ProfileMenuPopover>\n      <Popover.Trigger>\n        <button\n          className={cn(\n            'w-9 shrink-0 rounded-full outline-none focus-visible:ring-[1.5px] focus-visible:ring-gray-400 focus-visible:ring-offset-2 active:translate-y-px sm:w-10',\n            buttonClassName\n          )}\n        >\n          <Avatar\n            src=\"/avatar.webp\"\n            name=\"John Doe\"\n            className={cn('!h-9 w-9 sm:!h-10 sm:!w-10', avatarClassName)}\n          />\n          {!!username && (\n            <span className=\"username hidden text-gray-200 dark:text-gray-700 md:inline-flex\">\n              Hi, Andry\n            </span>\n          )}\n        </button>\n      </Popover.Trigger>\n\n      <Popover.Content className=\"z-[9999] p-0 dark:bg-gray-100 [&>svg]:dark:fill-gray-100\">\n        <DropdownMenu />\n      </Popover.Content>\n    </ProfileMenuPopover>\n  );\n}\n\nfunction ProfileMenuPopover({ children }: React.PropsWithChildren<{}>) {\n  const pathname = useLocation();\n  const [isOpen, setIsOpen] = useState(false);\n\n  useEffect(() => {\n    setIsOpen(false);\n  }, [pathname]);\n\n  return (\n    <Popover\n      isOpen={isOpen}\n      setIsOpen={setIsOpen}\n      shadow=\"sm\"\n      placement=\"bottom-end\"\n    >\n      {children}\n    </Popover>\n  );\n}\n\nconst menuItems = [\n  {\n    name: 'My Profile',\n    href: routes.home,\n  },\n  {\n    name: 'Account Settings',\n    href: routes.home,\n  },\n  {\n    name: 'Activity Log',\n    href: '#',\n  },\n];\n\nfunction DropdownMenu() {\n  return (\n    <div className=\"w-64 text-left rtl:text-right\">\n      <div className=\"flex items-center border-b border-gray-300 px-6 pb-5 pt-6\">\n        <Avatar src=\"/avatar.webp\" name=\"Albert Flores\" />\n        <div className=\"ms-3\">\n          <Title as=\"h6\" className=\"font-semibold\">\n            Albert Flores\n          </Title>\n          <Text className=\"text-gray-600\">flores@doe.io</Text>\n        </div>\n      </div>\n      <div className=\"grid px-3.5 py-3.5 font-medium text-gray-700\">\n        {menuItems.map((item) => (\n          <Link\n            key={item.name}\n            to={item.href}\n            className=\"group my-0.5 flex items-center rounded-md px-2.5 py-2 hover:bg-gray-100 focus:outline-none hover:dark:bg-gray-50/50\"\n          >\n            {item.name}\n          </Link>\n        ))}\n      </div>\n      <div className=\"border-t border-gray-300 px-6 pb-6 pt-5\">\n        <Button\n          className=\"h-auto w-full justify-start p-0 font-medium text-gray-700 outline-none focus-within:text-gray-600 hover:text-gray-900 focus-visible:ring-0\"\n          variant=\"text\"\n          onClick={() => console.log('sign out button click profile-menu module')}\n        >\n          Sign Out\n        </Button>\n      </div>\n    </div>\n  );\n}\n","'use client';\n\nimport { Badge, ActionIcon } from 'rizzui';\nimport NotificationDropdown from './notification-dropdown';\nimport RingBellSolidIcon from 'app/packages/components/icons/ring-bell-solid';\nimport MessagesDropdown from './messages-dropdown';\nimport ChatSolidIcon from 'app/packages/components/icons/chat-solid';\nimport SettingsButton from './settings-button';\nimport ProfileMenu from './profile-menu';\n\nexport default function HeaderMenuRight() {\n  return (\n    <div className=\"ms-auto grid shrink-0 grid-cols-4 items-center gap-2 text-gray-700 xs:gap-3 xl:gap-4\">\n      <NotificationDropdown>\n        <ActionIcon\n          aria-label=\"Notification\"\n          variant={\"text\" as any}\n          className=\"relative h-[34px] w-[34px] shadow backdrop-blur-md dark:bg-gray-100 md:h-9 md:w-9\"\n        >\n          <RingBellSolidIcon className=\"h-[18px] w-auto\" />\n          <Badge\n            renderAsDot\n            color=\"warning\"\n            enableOutlineRing\n            className=\"absolute right-2.5 top-2.5 -translate-y-1/3 translate-x-1/2\"\n          />\n        </ActionIcon>\n      </NotificationDropdown>\n      <MessagesDropdown>\n        <ActionIcon\n          aria-label=\"Messages\"\n          variant={\"text\" as any}\n          className=\"relative h-[34px] w-[34px] shadow backdrop-blur-md dark:bg-gray-100 md:h-9 md:w-9\"\n        >\n          <ChatSolidIcon className=\"h-[18px] w-auto\" />\n          <Badge\n            renderAsDot\n            color=\"success\"\n            enableOutlineRing\n            className=\"absolute right-2.5 top-2.5 -translate-y-1/3 translate-x-1/2\"\n          />\n        </ActionIcon>\n      </MessagesDropdown>\n\n      <SettingsButton />\n      <ProfileMenu />\n    </div>\n  );\n}\n","'use client';\nimport cn from \"app/packages/utils/class-names\";\ntype StickyHeaderProps = {\n  className?: string;\n  offset?: number;\n};\n\nexport default function StickyHeader({\n  offset = 2,\n  className,\n  children,\n}: React.PropsWithChildren<StickyHeaderProps>) {\n  return (\n    <header\n      className={cn(\n        'sticky top-0 z-[9999] flex items-center bg-gray-0/80 p-4 backdrop-blur-xl dark:bg-gray-50/50 md:px-5 lg:px-6',\n        className\n      )}\n    >\n      {children}\n    </header>\n  );\n}\n","'use client';\n\nimport { Link } from \"@remix-run/react\";\nimport HamburgerButton from \"../hamburger-button\";\nimport Sidebar from \"./sidebar\";\nimport Logo from \"app/packages/components/logo\";\nimport SearchWidget from \"app/packages/components/search/search\";\nimport HeaderMenuRight from \"../header-menu-right\";\nimport StickyHeader from \"../sticky-header\";\n\nexport default function Header() {\n  return (\n    <StickyHeader className=\"z-[990] 2xl:py-5 3xl:px-8 4xl:px-10\">\n      <div className=\"flex w-full max-w-2xl items-center\">\n        <HamburgerButton\n          view={<Sidebar className=\"static w-full 2xl:w-full\" />}\n        />\n        <Link\n          to={'/'}\n          aria-label=\"Site Logo\"\n          className=\"me-4 w-9 shrink-0 text-gray-800 hover:text-gray-900 lg:me-5 xl:hidden\"\n        >\n          <Logo iconOnly={true} />\n        </Link>\n\n        <SearchWidget />\n      </div>\n\n      <HeaderMenuRight />\n    </StickyHeader>\n  );\n}\n","'use client';\n\nimport { Provider } from 'jotai';\n// import hideRechartsConsoleError from '@core/utils/recharts-console-error';\nimport { ThemeProvider as NextThemeProvider } from 'next-themes';\n\n// hideRechartsConsoleError();\n\nexport function ThemeProvider({ children }: React.PropsWithChildren<{}>) {\n  return (\n    <NextThemeProvider\n      enableSystem={false}\n      themes={[\"light\", \"dark\"]}\n      defaultTheme={String(\"light\")}\n    >\n      {children}\n    </NextThemeProvider>\n  );\n}\n\nexport function JotaiProvider({ children }: React.PropsWithChildren<{}>) {\n  return <Provider>{children}</Provider>;\n}\n","'use client';\n\nimport { useEffect } from 'react';\nimport { Drawer } from 'rizzui';\nimport { useDrawer } from './use-drawer';\nimport cn from 'app/packages/utils/class-names';\nimport { useLocation } from '@remix-run/react';\n\nexport default function GlobalDrawer() {\n  const { isOpen, view, placement, containerClassName, closeDrawer } =\n    useDrawer();\n  const { pathname } = useLocation();\n  useEffect(() => {\n    closeDrawer();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pathname]);\n\n  return (\n    <Drawer\n      isOpen={isOpen}\n      onClose={closeDrawer}\n      placement={placement}\n      overlayClassName=\"dark:bg-opacity-40 dark:backdrop-blur-md\"\n      containerClassName={cn(\n        'min-w-[320px] max-w-[420px] dark:bg-gray-100',\n        containerClassName\n      )}\n      className=\"z-[9999]\"\n    >\n      {view}\n    </Drawer>\n  );\n}\n","'use client';\n\nimport { atom, useAtomValue, useSetAtom } from 'jotai';\nimport { ModalSize } from 'rizzui';\n\ntype ModalTypes = {\n  view: React.ReactNode;\n  isOpen: boolean;\n  customSize?: string;\n  size?: ModalSize;\n};\n\nconst modalAtom = atom<ModalTypes>({\n  isOpen: false,\n  view: null,\n  customSize: '320px',\n  size: 'sm',\n});\n\nexport function useModal() {\n  const state = useAtomValue(modalAtom);\n  const setState = useSetAtom(modalAtom);\n\n  const openModal = ({\n    view,\n    customSize,\n    size,\n  }: {\n    view: React.ReactNode;\n    customSize?: string;\n    size?: ModalSize;\n  }) => {\n    setState({\n      ...state,\n      isOpen: true,\n      view,\n      customSize,\n      size,\n    });\n  };\n\n  const closeModal = () => {\n    setState({\n      ...state,\n      isOpen: false,\n    });\n  };\n\n  return {\n    ...state,\n    openModal,\n    closeModal,\n  };\n}\n","'use client';\n\nimport { useEffect } from 'react';\nimport { Modal } from 'rizzui/modal';\nimport { useModal } from './use-modal';\nimport { useLocation } from '@remix-run/react';\n\nexport default function GlobalModal() {\n  const { isOpen, view, closeModal, customSize, size } = useModal();\n  const { pathname } = useLocation();\n  useEffect(() => {\n    closeModal();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pathname]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeModal}\n      customSize={customSize}\n      size={size}\n      overlayClassName=\"dark:bg-opacity-40 dark:backdrop-blur-lg\"\n      containerClassName=\"dark:bg-gray-100\"\n      className=\"z-[9999] [&_.pointer-events-none]:overflow-visible\"\n    >\n      {view}\n    </Modal>\n  );\n}\n","\"use client\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport { useNavigation } from \"@remix-run/react\";\r\nimport NProgress from \"nprogress\";\r\nimport \"nprogress/nprogress.css\"; // Import default styles\r\n\r\nexport default function ProgressBar() {\r\n  const navigation = useNavigation();\r\n\r\n  useEffect(() => {\r\n    if (navigation.state === \"loading\") {\r\n      NProgress.start(); // Start loading animation\r\n    } else {\r\n      NProgress.done(); // Stop loading animation\r\n    }\r\n  }, [navigation.state]);\r\n\r\n  return null; // No visible UI, just handles the progress bar\r\n}\r\n","import {\r\n  Links,\r\n  Meta,\r\n  Outlet,\r\n  Scripts,\r\n  ScrollRestoration,\r\n  useMatches,\r\n} from \"@remix-run/react\";\r\n\r\nimport globalCss from './tailwind.css?url';\r\nimport { LinksFunction } from \"@remix-run/node\";\r\nimport Sidebar from \"./layouts/hydrogen/sidebar\";\r\nimport Header from \"./layouts/hydrogen/header\";\r\nimport { JotaiProvider, ThemeProvider } from \"./shared/theme-provider\";\r\nimport GlobalDrawer from \"./shared/drawer-views/container\";\r\nimport GlobalModal from \"./shared/modal-views/container\";\r\nimport { Toaster } from \"react-hot-toast\";\r\nimport ProgressBar from \"./packages/components/remixPregress\";\r\n\r\nexport const links: LinksFunction = () => [\r\n  { rel: \"stylesheet\", href: globalCss },\r\n  {\r\n    rel: \"stylesheet\",\r\n    href: \"https://fonts.googleapis.com/css2?family=Inter:wght@100..900&family=Lexend+Deca:wght@100..900&display=swap\",\r\n  },\r\n];\r\nexport default function App() {\r\n  const matches = useMatches();\r\n  const isAuthRoute = matches.some((match) => match.pathname.startsWith(\"/auth\"));\r\n  \r\n  return (\r\n    <html>\r\n      <head>\r\n        <meta charSet=\"utf-8\" />\r\n        <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\r\n        <link rel=\"preconnect\" href=\"https://cdn.shopify.com/\" />\r\n        <link\r\n          rel=\"stylesheet\"\r\n          href=\"https://cdn.shopify.com/static/fonts/inter/v4/styles.css\"\r\n        />\r\n        <Meta />\r\n        <Links />\r\n      </head>\r\n      <body className=\"font-[Inter]\">\r\n        <main className=\"flex min-h-screen flex-grow\">\r\n          {isAuthRoute ? (\r\n            <Outlet />\r\n          ) : (\r\n            <ThemeProvider>\r\n              <ProgressBar />\r\n              <JotaiProvider>\r\n                <Sidebar className=\"fixed hidden dark:bg-gray-50 xl:block\" />\r\n                <div className=\"flex w-full flex-col xl:ms-[270px] xl:w-[calc(100%-270px)] 2xl:ms-72 2xl:w-[calc(100%-288px)]\">\r\n                  <Header />\r\n                  <div className=\"flex flex-grow flex-col px-4 pb-6 pt-2 md:px-5 lg:px-6 lg:pb-8 3xl:px-8 3xl:pt-4 4xl:px-10 4xl:pb-9\">\r\n                    <Outlet />\r\n                    <Toaster />\r\n                  </div>\r\n                </div>\r\n                <GlobalDrawer />\r\n                <GlobalModal />\r\n              </JotaiProvider>\r\n            </ThemeProvider>\r\n          )}\r\n        </main>\r\n        <ScrollRestoration />\r\n        <Scripts />\r\n      </body>\r\n    </html >\r\n  );\r\n}\r\n","'use client';\n\nimport { useEffect, useState } from 'react';\n\nexport function useIsMounted() {\n  const [mounted, setMounted] = useState(false);\n  useEffect(() => setMounted(true), []);\n  return mounted;\n}\n","export function extractNumericId(shopifyGraphQLId: string) {\r\n  if (!shopifyGraphQLId) return null;\r\n\r\n  try {\r\n    // Extract numeric part from Shopify GID (e.g., \"gid://shopify/Product/123456789\")\r\n    const parts = shopifyGraphQLId.split(\"/\");\r\n    const numericId = parts.length > 0 ? parts[parts.length - 1] : null;\r\n    return numericId ? parseInt(numericId, 10) : null;\r\n  } catch (error) {\r\n    console.error(\"Invalid Shopify GraphQL ID:\", error);\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\nexport enum ShopifyObjectType {\r\n  Product = \"Product\",\r\n  Collection = \"Collection\",\r\n  Order = \"Order\",\r\n  Customer = \"Customer\",\r\n  Variant = \"ProductVariant\",\r\n  SellingPlanGroup = 'SellingPlanGroup',\r\n  SubscriptionContract = 'SubscriptionContract'\r\n}\r\n\r\nexport function generateGraphQLId(numericId: number, type: ShopifyObjectType): string {\r\n  if (!numericId || !type) {\r\n    throw new Error(\"Invalid parameters: numericId and type are required.\");\r\n  }\r\n\r\n  return `gid://shopify/${type}/${numericId}`;\r\n}\r\n\r\n\r\nexport const formatPrice = (price: number | string, format: string): string => {\r\n  if (!format.includes(\"{{amount}}\")) {\r\n    console.warn(\"Invalid money format provided:\", format);\r\n    return price.toString(); // Return price as a fallback\r\n  }\r\n\r\n  return format.replace(\"{{amount}}\", Number(price).toFixed(2)); // Ensures 2 decimal places\r\n};\r\n\r\nexport const formatDate = (isoDate: string, needTime: boolean = true) => {\r\n  const date = new Date(isoDate);\r\n  const options: Intl.DateTimeFormatOptions = {\r\n    month: \"short\",\r\n    day: \"numeric\",\r\n    year: \"numeric\",\r\n    ...(needTime && { hour: \"numeric\", minute: \"2-digit\", hour12: true }) // Include time only if needTime is true\r\n  };\r\n  return date.toLocaleString(\"en-US\", options);\r\n};\r\n\r\n\r\nexport const calculateTotalDiscountedPrice = (lines: any): number => {\r\n  return lines.edges.reduce((total: any, edge: any) => {\r\n    const itemTotal = parseFloat(edge.node.lineDiscountedPrice.amount) * edge.node.quantity;\r\n    return total + itemTotal;\r\n  }, 0);\r\n};\r\n\r\nexport const getTruncatedText = (text: string, wordLimit = 3) => {\r\n  const words = text.split(\" \");\r\n  return words.length > wordLimit ? words.slice(0, wordLimit).join(\" \") + \"...\" : text;\r\n};\r\n\r\nexport const formatToUtcHour = (dateInput:string) => {\r\n  const date = new Date(dateInput);\r\n  date.setUTCMinutes(0, 0, 0); // Reset minutes, seconds, milliseconds to 0\r\n  return date.toISOString().replace('.000', '');\r\n}\r\n","import { extractNumericId } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { oneTimeGroup, OneTimePlan } from \"app/types/product/sellingPlans\";\r\n\r\nconst getsellingPlansToCreateOneTimeVariables = (oneTimeGroup: OneTimePlan) => {\r\n    const billingPolicy = generateOneTimeBillingPolicy(oneTimeGroup)\r\n    const deliveryPolicy = generateOneTimeDeliveryPolicy(oneTimeGroup);\r\n    const inventoryPolicy = generateInventoryPolicy(oneTimeGroup);\r\n    const pricingPolicies = generateOneTimePricingPolicies(oneTimeGroup)\r\n    return [\r\n        {\r\n            name: oneTimeGroup.planName || \"One-Time Purchase\",\r\n            id: oneTimeGroup.sellingPlanId,\r\n            options: [oneTimeGroup.planName || \"One-Time Purchase\"],\r\n            category: \"OTHER\",\r\n            billingPolicy: billingPolicy,\r\n            inventoryPolicy: inventoryPolicy,\r\n            deliveryPolicy: deliveryPolicy,\r\n            pricingPolicies: pricingPolicies,\r\n        },\r\n    ];\r\n}\r\n\r\nconst generateInventoryPolicy = (plan: any) => {\r\n    const {\r\n        inventoryPolicyEnable,\r\n        inventoryPolicyReserve\r\n    } = plan;\r\n\r\n    if (!inventoryPolicyEnable) {\r\n        return { reserve: \"ON_FULFILLMENT\" }\r\n    }\r\n\r\n    return { reserve: inventoryPolicyReserve }\r\n\r\n}\r\n\r\nconst generateOneTimeDeliveryPolicy = (plan: any) => {\r\n    const {\r\n        deliveryPolicyAnchorsCutoffDay,\r\n        deliveryPolicyAnchorsDay,\r\n        deliveryPolicyAnchorsMonth,\r\n        deliveryPolicyAnchorsType,\r\n        deliveryPolicyCutoff,\r\n        deliveryPolicyFulfillmentExactTime,\r\n        deliveryPolicyFulfillmentTrigger,\r\n        deliveryPolicyIntent,\r\n        deliveryPolicyPreAnchorBehavior\r\n    } = plan;\r\n\r\n\r\n    // Retrun default delivery policy\r\n    if (deliveryPolicyFulfillmentTrigger === 'ASAP') {\r\n        return {\r\n            fixed: {\r\n                fulfillmentTrigger: \"ASAP\",\r\n            },\r\n        }\r\n    }\r\n\r\n    // Construct the delivery policy object\r\n    const deliveryPolicy: any = {\r\n        fixed: {\r\n            fulfillmentTrigger: deliveryPolicyFulfillmentTrigger,\r\n            ...(deliveryPolicyFulfillmentTrigger === \"EXACT_TIME\" && deliveryPolicyFulfillmentExactTime\r\n                ? { fulfillmentExactTime: deliveryPolicyFulfillmentExactTime }\r\n                : {}),\r\n            ...(deliveryPolicyFulfillmentTrigger === \"ANCHOR\"\r\n                ? {\r\n                    anchors: {\r\n                        cutoffDay: deliveryPolicyAnchorsType === \"YEARDAY\" ? null : deliveryPolicyAnchorsCutoffDay,\r\n                        day: deliveryPolicyAnchorsDay,\r\n                        ...(deliveryPolicyAnchorsType === \"YEARDAY\" ? { month: deliveryPolicyAnchorsMonth } : {}), // Conditionally include month\r\n                        type: deliveryPolicyAnchorsType,\r\n                    },\r\n                }\r\n                : {}),\r\n            cutoff: deliveryPolicyCutoff,\r\n            intent: deliveryPolicyIntent,\r\n            preAnchorBehavior: deliveryPolicyPreAnchorBehavior,\r\n        },\r\n    };\r\n    return deliveryPolicy;\r\n}\r\n\r\nconst generateOneTimeBillingPolicy = (plan: any) => {\r\n    const {\r\n        billingPolicyEnable,\r\n        billingPolicyCheckoutChargeType,\r\n        billingPolicyCheckoutChargeValue,\r\n        billingPolicyRemainingBalanceChargeTrigger,\r\n        billingPolicyRemainingBalanceChargeTimeAfterCheckout,\r\n        billingPolicyRemainingBalanceChargeExactTime,\r\n    } = plan;\r\n\r\n    // Return default policy if billing policy is disabled\r\n    if (!billingPolicyEnable) {\r\n        return {\r\n            fixed: {\r\n                checkoutCharge: { type: 'PERCENTAGE', value: { percentage: 100 } },\r\n                remainingBalanceChargeTrigger: 'NO_REMAINING_BALANCE',\r\n            },\r\n        };\r\n    }\r\n\r\n    // Validate and set checkout charge value\r\n    let checkoutChargeValue;\r\n    if (billingPolicyCheckoutChargeType === 'PERCENTAGE') {\r\n        checkoutChargeValue = { percentage: billingPolicyCheckoutChargeValue };\r\n    } else if (billingPolicyCheckoutChargeType === 'PRICE') {\r\n        checkoutChargeValue = { fixedValue: billingPolicyCheckoutChargeValue };\r\n    } else {\r\n        throw new Error('Invalid checkout charge value');\r\n    }\r\n\r\n    // Construct the policy object\r\n    const policy = {\r\n        fixed: {\r\n            checkoutCharge: { type: billingPolicyCheckoutChargeType, value: checkoutChargeValue },\r\n            remainingBalanceChargeTrigger: billingPolicyRemainingBalanceChargeTrigger,\r\n            ...(billingPolicyRemainingBalanceChargeTimeAfterCheckout\r\n                ? { remainingBalanceChargeTimeAfterCheckout: billingPolicyRemainingBalanceChargeTimeAfterCheckout }\r\n                : {}),\r\n            ...(billingPolicyRemainingBalanceChargeTrigger === 'EXACT_TIME' && billingPolicyRemainingBalanceChargeExactTime\r\n                ? { remainingBalanceChargeExactTime: billingPolicyRemainingBalanceChargeExactTime }\r\n                : {}),\r\n        },\r\n    };\r\n\r\n    return policy;\r\n};\r\n\r\nconst generateOneTimePricingPolicies = (plan: any) => {\r\n    const {\r\n        pricingPolicyAdjustmentType,\r\n        pricingPolicyAdjustmentValue\r\n    } = plan\r\n\r\n    const adjustmentValue = {} as any;\r\n\r\n    switch (pricingPolicyAdjustmentType) {\r\n        case \"FIXED_AMOUNT\":\r\n        case \"PRICE\":\r\n            adjustmentValue.fixedValue = pricingPolicyAdjustmentValue;\r\n            break;\r\n        case \"PERCENTAGE\":\r\n            adjustmentValue.percentage = pricingPolicyAdjustmentValue;\r\n            break;\r\n        default:\r\n            throw new Error(`Invalid discountType: ${pricingPolicyAdjustmentType}`);\r\n    }\r\n\r\n    return [\r\n        {\r\n            fixed: {\r\n                adjustmentType: pricingPolicyAdjustmentType,\r\n                adjustmentValue,\r\n            },\r\n        },\r\n    ];\r\n}\r\n\r\nconst createGraphQLVariablesOneTimesUpdate = (\r\n    group: OneTimePlan\r\n) => {\r\n    const sellingPlansToUpdate = getsellingPlansToCreateOneTimeVariables(group);\r\n    return {\r\n        variables: {\r\n            id: group.groupId,\r\n            input: {\r\n                name: group.planName || \"Default Plan Group\",\r\n                sellingPlansToUpdate,\r\n            },\r\n        },\r\n    };\r\n}\r\n\r\n\r\nconst createGraphQLVariablesOneTimes = (\r\n    group: oneTimeGroup,\r\n    appGraphqlId: any,\r\n    productId: any,\r\n    isUpdate: boolean = false\r\n) => {\r\n    const appId = extractNumericId(appGraphqlId) as any;\r\n    let sellingPlansToCreate = getsellingPlansToCreateOneTimeVariables(group.sellingPlansToCreate[0]);\r\n    return {\r\n        variables: {\r\n            input: {\r\n                appId: `${appId}` || \"\",\r\n                name: group.groupName || \"Default Plan Group\",\r\n                merchantCode: \"Onetime Plan Group\",\r\n                options: [group.groupName],\r\n                position: 1,\r\n                sellingPlansToCreate,\r\n            },\r\n            resources: {\r\n                productIds: [`gid://shopify/Product/${productId}`],\r\n            },\r\n        },\r\n    };\r\n}\r\n\r\n\r\nconst createOnetimePlanUtils = {\r\n    createGraphQLVariablesOneTimesUpdate,\r\n    getsellingPlansToCreateOneTimeVariables,\r\n    generateOneTimeBillingPolicy,\r\n    generateOneTimeDeliveryPolicy,\r\n    generateOneTimePricingPolicies,\r\n    createGraphQLVariablesOneTimes\r\n}\r\n\r\nexport default createOnetimePlanUtils","import { createCookie } from \"@remix-run/node\";\r\n\r\n// Create a cookie for authentication\r\nexport const authCookie = createCookie(\"auth\", {\r\n    httpOnly: true,\r\n    secure: true,\r\n    sameSite: \"lax\",\r\n    path: \"/\",\r\n});\r\n\r\n/**\r\n * Save data to the auth cookie.\r\n * @param data - The data to store in the cookie.\r\n * @returns Serialized cookie string to set in the headers.\r\n */\r\nexport const setAuthCookie = async (data: Record<string, any>) => {\r\n    const encodedData = encodeURIComponent(JSON.stringify(data));\r\n    return authCookie.serialize({ query: encodedData });\r\n};\r\n\r\n/**\r\n * Read data from the auth cookie.\r\n * @param cookieHeader - The Cookie header from the request.\r\n * @returns Decoded data stored in the cookie, or null if not found.\r\n */\r\nexport const getAuthCookie = async (cookieHeader: string | null) => {\r\n    if (!cookieHeader) return null;\r\n\r\n    const cookieData = await authCookie.parse(cookieHeader);\r\n    if (!cookieData?.query) return null;\r\n\r\n    return JSON.parse(decodeURIComponent(cookieData.query));\r\n};\r\n\r\n\r\n/**\r\n * Merges the stored query string from cookies with the current request query parameters.\r\n * Creates a new `Request` instance with the updated URL.\r\n * @param {Request} request - The original request.\r\n * @param {string | null} storedQuery - The stored query string from authentication cookie.\r\n * @returns {Request} - A new `Request` instance with the updated query parameters.\r\n */\r\nexport function mergeQueryParams(request: Request, storedQuery: string | null): Request {\r\n    const url = new URL(request.url);\r\n    const existingQueryParams = new URLSearchParams(url.search);\r\n    const storedQueryParams = new URLSearchParams(storedQuery || \"\");\r\n\r\n    // Merge stored query params into existing ones\r\n    storedQueryParams.forEach((value, key) => {\r\n        existingQueryParams.set(key, value);\r\n    });\r\n\r\n    // Construct the updated URL\r\n    url.search = existingQueryParams.toString();\r\n\r\n    // Create and return a new Request with the updated URL\r\n    return new Request(url.toString(), request);\r\n}","\r\n// createPlanAPIUtils.ts\r\nimport { CREATE_SELLING_PLAN_GROUP } from \"app/graphql/mutations/sellingPlans/sellingPlanGroupCreate\";\r\nimport { getAuthCookie, mergeQueryParams } from \"app/packages/utils/cookieAuth\";\r\nimport { authenticate } from \"app/shopify.server\";\r\n\r\nexport interface AuthAdmin {\r\n    graphql: (query: any, variables: any) => Promise<any>;\r\n    // you can add more methods if needed\r\n}\r\n\r\ninterface AuthResult {\r\n    admin: AuthAdmin;\r\n}\r\n\r\nexport class MissingDataError extends Error {\r\n    constructor(message: string) {\r\n        super(message);\r\n        this.name = \"MissingDataError\";\r\n    }\r\n}\r\n\r\n// Optionally inject the function that does the Shopify call\r\nexport const authenticateAction = async (\r\n    request: Request,\r\n    doShopifyAuth: typeof authenticate.admin = authenticate.admin\r\n): Promise<AuthResult | false> => {\r\n    try {\r\n        const cookieHeader = request.headers.get(\"Cookie\");\r\n        const authData = await getAuthCookie(cookieHeader);\r\n        if (!authData) return false;\r\n\r\n        const updatedRequest = mergeQueryParams(request, authData.query);\r\n        const response = await doShopifyAuth(updatedRequest);\r\n        if (!response || !response.admin) return false;\r\n\r\n        return { admin: response.admin };\r\n    } catch (error) {\r\n        console.error(\"Authentication Error:\", error);\r\n        return false;\r\n    }\r\n};\r\n\r\nexport const authenticateRequest = async (request: Request): Promise<AuthAdmin | null> => {\r\n    const authResult = await authenticateAction(request);\r\n    return authResult ? authResult.admin : null;\r\n};\r\n\r\nexport const extractFormData = async (\r\n    request: Request,\r\n    params: any\r\n): Promise<{ plansString: string; productId: string; appGraphqlId: string }> => {\r\n    const body = await request.formData();\r\n    const plansString = body.get(\"plans\") as string;\r\n    const appGraphqlId = body.get(\"appId\") as string;\r\n\r\n    if (!plansString || !params.productId || !appGraphqlId) {\r\n        throw new MissingDataError(\"Missing required data: plans, productId, or appId\");\r\n    }\r\n\r\n    return { plansString, productId: params.productId, appGraphqlId };\r\n};\r\n\r\nexport const parsePlansJson = <T = any>(plansString: string): T => {\r\n    try {\r\n        return JSON.parse(plansString) as T;\r\n    } catch (error) {\r\n        throw new Error(\"Invalid JSON format in plans\");\r\n    }\r\n};\r\n\r\nconst executeShopifyMutation = async (\r\n    query: string,\r\n    admin: any,\r\n    variables: Record<string, any>\r\n): Promise<any> => {\r\n    try {\r\n        // Perform the GraphQL request\r\n        const createResponse = await admin.graphql(query, variables);\r\n        // Parse and return JSON\r\n        const jsonData = await createResponse.json();\r\n        return jsonData as any;\r\n    } catch (error) {\r\n        console.error(\"Error executing Shopify mutation:\", error);\r\n        throw new Error(\"Failed to execute Shopify mutation\");\r\n    }\r\n};\r\n\r\nconst createPlanAPIUtils = {\r\n    authenticateRequest,\r\n    authenticateAction,\r\n    extractFormData,\r\n    parsePlansJson,\r\n    executeShopifyMutation\r\n};\r\n\r\nexport default createPlanAPIUtils;\r\n","import { extractNumericId } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { PayPerShipmentPlanGroup, PayPerShipmentSellingPlan } from \"app/types/product/sellingPlans\";\r\nimport createOnetimePlanUtils from \"./createOneTimePlanUtils\";\r\nimport { group } from \"console\";\r\n\r\n\r\nconst createGraphQLVariablesPayPerShipment = (\r\n    group: any,\r\n    productId: any,\r\n    appGraphqlId: any,\r\n    prePaidPlan: boolean = false\r\n) => {\r\n    const appId = extractNumericId(appGraphqlId) as any;\r\n    const sellingPlansToCreate = getsellingPlansToCreatePayPerShipment(group);\r\n    return {\r\n        variables: {\r\n            input: {\r\n                appId: `${appId}` || \"\",\r\n                name: group.groupName || \"Default Plan Group\",\r\n                merchantCode: prePaidPlan ? \"PrePaid Plan Group\" : \"PayPerShipment Plan Group\",\r\n                options: [group.groupName],\r\n                position: 1,\r\n                sellingPlansToCreate,\r\n              \r\n            },\r\n            resources: {\r\n                productIds: [`gid://shopify/Product/${productId}`],\r\n                productVariantIds: [],\r\n            },\r\n        },\r\n    };\r\n}\r\n\r\nconst getsellingPlansToCreatePayPerShipment = (payPerShipmentGroup: PayPerShipmentPlanGroup) => {\r\n\r\n    const plans = payPerShipmentGroup?.sellingPlansToCreate;\r\n\r\n    if(!plans){\r\n        return [];\r\n    }\r\n\r\n    if (plans?.length === 0) {\r\n        return []\r\n    }\r\n\r\n    const sellingPlansToCreate = plans.map((plan: PayPerShipmentSellingPlan, index: number) => {\r\n        const billingPolicy = generateSubscriptionBillingPolicy(plan);\r\n        const deliveryPolicy = generateSubscriptionDeliveryPolicy(plan);\r\n        const inventoryPolicy = generateInventoryPolicy(plan);\r\n        const pricingPolicies = generateSubscriptionPricingPolicy(plan);\r\n        const {\r\n            planName,\r\n            category,\r\n            showDescription,\r\n            descriptionContent\r\n        } = plan\r\n        return {\r\n            category,\r\n            ...(showDescription ? { description: descriptionContent } : {}),\r\n            name: planName,\r\n            options: [planName],\r\n            billingPolicy,\r\n            deliveryPolicy,\r\n            inventoryPolicy,\r\n            pricingPolicies\r\n        }\r\n    })\r\n    return sellingPlansToCreate;\r\n}\r\n\r\nconst generateInventoryPolicy = (plan: any) => {\r\n    const {\r\n        inventoryPolicyEnable,\r\n        inventoryPolicyReserve\r\n    } = plan;\r\n\r\n    if (!inventoryPolicyEnable) {\r\n        return { reserve: \"ON_FULFILLMENT\" }\r\n    }\r\n\r\n    return { reserve: inventoryPolicyReserve }\r\n\r\n}\r\n\r\nconst generateSubscriptionPricingPolicy = (plan: any) => {\r\n    try {\r\n        const pricingPolicies = createOnetimePlanUtils.generateOneTimePricingPolicies(plan);\r\n        const pricingRecurringPolicy = generateRecurringPricingPolicy(plan);\r\n\r\n        if (!pricingRecurringPolicy) {\r\n            return [{\r\n                fixed: pricingPolicies[0].fixed\r\n            }];\r\n        }\r\n\r\n        return [{\r\n            fixed: pricingPolicies[0].fixed,\r\n            recurring: pricingRecurringPolicy[0].recurring\r\n\r\n        }]\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in generateSubscriptionPricingPolicy:\");\r\n    }\r\n}\r\n\r\nconst generateSubscriptionDeliveryPolicy = (plan: any) => {\r\n    try {\r\n        // const deliveryPolicy = generateOneTimeDeliveryPolicy(plan);\r\n        const deliveryPolicyRecurring = generateRecurringDeliveryPolicy(plan);\r\n\r\n        return {\r\n            // fixed: deliveryPolicy.fixed,\r\n            recurring: deliveryPolicyRecurring.recurring\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(\"Error in generateSubscriptionDeliveryPolicy:\");\r\n    }\r\n}\r\n\r\nconst generateSubscriptionBillingPolicy = (plan: any) => {\r\n    try {\r\n        const billingRecurringPolicy = generateRecurringBillingPolicy(plan)\r\n        return {\r\n            recurring: billingRecurringPolicy.recurring\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error in generateSubscriptionBillingPolicy:\");\r\n    }\r\n\r\n\r\n}\r\n\r\nconst generateRecurringBillingPolicy = (plan: any) => {\r\n    const {\r\n        billingRecurringPolicyEnable,\r\n        billingRecurringPolicyInterval,\r\n        billingRecurringPolicyIntervalCount,\r\n        billingRecurringPolicyMinCycles,\r\n        billingRecurringPolicyMaxCycles,\r\n    } = plan;\r\n\r\n    // Return default policy if billing policy is disabled\r\n    if (!billingRecurringPolicyEnable) {\r\n        return {\r\n            recurring: {\r\n                interval: billingRecurringPolicyInterval,\r\n                intervalCount: billingRecurringPolicyIntervalCount,\r\n            },\r\n        };\r\n    }\r\n\r\n    // Construct the policy object\r\n    const policy = {\r\n        recurring: {\r\n            interval: billingRecurringPolicyInterval,\r\n            intervalCount: billingRecurringPolicyIntervalCount,\r\n            ...(billingRecurringPolicyMinCycles === 0 ? {} : { minCycles: billingRecurringPolicyMinCycles }),\r\n            ...(billingRecurringPolicyMaxCycles === 0 ? {} : { maxCycles: billingRecurringPolicyMaxCycles })\r\n        },\r\n    };\r\n\r\n    return policy;\r\n}\r\n\r\nconst generateRecurringPricingPolicy = (plan: any) => {\r\n    const {\r\n        pricingPolicyAfterCycleEnable,\r\n        pricingPolicyAfterCycle,\r\n        pricingPolicyAfterCycleAdjustmentType,\r\n        pricingPolicyAfterCycleAdjustmentValue,\r\n    } = plan;\r\n\r\n    if (!pricingPolicyAfterCycleEnable) {\r\n        return false;\r\n    }\r\n\r\n    const adjustmentValue = {} as any;\r\n\r\n    switch (pricingPolicyAfterCycleAdjustmentType) {\r\n        case \"FIXED_AMOUNT\":\r\n        case \"PRICE\":\r\n            adjustmentValue.fixedValue = pricingPolicyAfterCycleAdjustmentValue;\r\n            break;\r\n        case \"PERCENTAGE\":\r\n            adjustmentValue.percentage = pricingPolicyAfterCycleAdjustmentValue;\r\n            break;\r\n        default:\r\n            throw new Error(`Invalid discountType: ${pricingPolicyAfterCycleAdjustmentType}`);\r\n    }\r\n\r\n    return [\r\n        {\r\n            recurring: {\r\n                adjustmentType: pricingPolicyAfterCycleAdjustmentType,\r\n                adjustmentValue,\r\n                afterCycle: pricingPolicyAfterCycle\r\n            },\r\n        },\r\n    ];\r\n}\r\n\r\nconst generateRecurringDeliveryPolicy = (plan: any) => {\r\n    const {\r\n        deliveryRecurringPolicyAnchorsCutoffDay,\r\n        deliveryRecurringPolicyAnchorsDay,\r\n        deliveryRecurringPolicyAnchorsMonth,\r\n        deliveryRecurringPolicyAnchorsType,\r\n        deliveryRecurringPolicyCutoff,\r\n        deliveryRecurringPolicyFulfillmentExactTime,\r\n        deliveryRecurringPolicyFulfillmentTrigger,\r\n        deliveryRecurringPolicyIntent,\r\n        deliveryRecurringPolicyInterval,\r\n        deliveryRecurringPolicyIntervalCount,\r\n        deliveryRecurringPreAnchorBehavior,\r\n        billingRecurringPolicyInterval,\r\n        billingRecurringPolicyIntervalCount,\r\n        category\r\n    } = plan;\r\n\r\n\r\n    // Retrun default delivery policy\r\n    if (deliveryRecurringPolicyFulfillmentTrigger === 'ASAP') {\r\n        return {\r\n            recurring: {\r\n                interval: category === 'SUBSCRIPTION' ? billingRecurringPolicyInterval : deliveryRecurringPolicyInterval,\r\n                intervalCount: category === 'SUBSCRIPTION' ? billingRecurringPolicyIntervalCount : deliveryRecurringPolicyIntervalCount\r\n            },\r\n        }\r\n    }\r\n\r\n    // Construct the delivery policy object\r\n    const deliveryPolicy: any = {\r\n        recurring: {\r\n            fulfillmentTrigger: deliveryRecurringPolicyFulfillmentTrigger,\r\n            ...(deliveryRecurringPolicyFulfillmentTrigger === \"ANCHOR\"\r\n                ? {\r\n                    anchors: {\r\n                        cutoffDay: deliveryRecurringPolicyAnchorsType === \"YEARDAY\" ? null : deliveryRecurringPolicyAnchorsCutoffDay,\r\n                        day: deliveryRecurringPolicyAnchorsDay,\r\n                        ...(deliveryRecurringPolicyAnchorsType === \"YEARDAY\" ? { month: deliveryRecurringPolicyAnchorsMonth } : {}), // Conditionally include month\r\n                        type: deliveryRecurringPolicyAnchorsType,\r\n                    },\r\n                }\r\n                : {}),\r\n            cutoff: deliveryRecurringPolicyCutoff,\r\n            intent: deliveryRecurringPolicyIntent,\r\n            preAnchorBehavior: deliveryRecurringPreAnchorBehavior,\r\n            interval: category === 'SUBSCRIPTION' ? billingRecurringPolicyInterval : deliveryRecurringPolicyInterval,\r\n            intervalCount: category === 'SUBSCRIPTION' ? billingRecurringPolicyIntervalCount : deliveryRecurringPolicyIntervalCount\r\n        },\r\n    };\r\n    return deliveryPolicy;\r\n}\r\n\r\n\r\nconst createVariablesSellingPlanReorder = (groupId: string, sellingPlans: any[]) => {\r\n    // Map the selling plans to the required format\r\n    const sellingPlansToUpdate = sellingPlans.map((plan, index) => ({\r\n        id: plan.id, // Use the plan's ID\r\n        position: index + 1, // Position starts from 1\r\n    }));\r\n\r\n    // Return the final structure\r\n    return {\r\n        variables: {\r\n            id: groupId, // The group ID\r\n            input: {\r\n                sellingPlansToUpdate, // The mapped selling plans\r\n            },\r\n        }\r\n    };\r\n};\r\n\r\n\r\n\r\nconst createVariablesSellingPlanUpdate = (groupId: string, sellingPlan: any) => {\r\n    console.log(groupId)\r\n    const billingPolicy = generateSubscriptionBillingPolicy(sellingPlan);\r\n    const deliveryPolicy = generateSubscriptionDeliveryPolicy(sellingPlan);\r\n    const inventoryPolicy = generateInventoryPolicy(sellingPlan);\r\n    const pricingPolicies = generateSubscriptionPricingPolicy(sellingPlan);\r\n    const {\r\n        planName,\r\n        category,\r\n        showDescription,\r\n        descriptionContent\r\n    } = sellingPlan\r\n\r\n    const sellingPlansToUpdate = [{\r\n        id: sellingPlan.id,\r\n        category,\r\n        ...(showDescription ? { description: descriptionContent } : {}),\r\n        name: planName,\r\n        options: [planName],\r\n        billingPolicy,\r\n        deliveryPolicy,\r\n        inventoryPolicy,\r\n        pricingPolicies\r\n    }]\r\n\r\n    return {\r\n        variables: {\r\n            id: groupId,\r\n            input: {\r\n                sellingPlansToUpdate,\r\n            },\r\n        },\r\n    };\r\n}\r\n\r\nconst getsellingPlansToUpdate = (group: any) => {\r\n\r\n    const plans = group.sellingPlansToUpdate;\r\n\r\n    if (plans.length === 0) {\r\n        return []\r\n    }\r\n\r\n    const sellingPlansToUpdate = plans.map((plan: any, index: number) => {\r\n        const billingPolicy = generateSubscriptionBillingPolicy(plan);\r\n        const deliveryPolicy = generateSubscriptionDeliveryPolicy(plan);\r\n        const inventoryPolicy = generateInventoryPolicy(plan);\r\n        const pricingPolicies = generateSubscriptionPricingPolicy(plan);\r\n        const {\r\n            planName,\r\n            showDescription,\r\n            descriptionContent\r\n        } = plan\r\n        return {\r\n            id: plan.id,\r\n            ...(showDescription ? { description: descriptionContent } : {}),\r\n            name: planName,\r\n            options: [planName],\r\n            billingPolicy,\r\n            deliveryPolicy,\r\n            inventoryPolicy,\r\n            pricingPolicies,\r\n\r\n        }\r\n    })\r\n    return sellingPlansToUpdate;\r\n}\r\n\r\nconst updateGraphQLVariables = (group: any) => {\r\n    const sellingPlansToUpdate = getsellingPlansToUpdate(group);\r\n    const sellingPlansToCreate = getsellingPlansToCreatePayPerShipment(group);\r\n    return {\r\n        variables: {\r\n            id: group.groupId,\r\n            input: {\r\n                name: group.groupName || \"Default Plan Group\",\r\n                sellingPlansToUpdate,\r\n                sellingPlansToCreate\r\n            },\r\n        },\r\n    };\r\n}\r\n\r\nconst createRecurringPlanUtils = {\r\n    generateRecurringBillingPolicy,\r\n    generateRecurringDeliveryPolicy,\r\n    generateRecurringPricingPolicy,\r\n    generateSubscriptionDeliveryPolicy,\r\n    generateSubscriptionPricingPolicy,\r\n    generateSubscriptionBillingPolicy,\r\n    createGraphQLVariablesPayPerShipment,\r\n    createVariablesSellingPlanReorder,\r\n    createVariablesSellingPlanUpdate,\r\n    updateGraphQLVariables\r\n}\r\n\r\nexport default createRecurringPlanUtils\r\n","import { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport { atom } from \"jotai\";\r\n\r\n// Define a product state atom\r\nexport const productAtom = atom<ProductSingleNode | any>(null);\r\n","import { OneTimePlan, PayPerShipmentPlanGroup, PayPerShipmentSellingPlan, Plan, PrePaidSubscriptionSellingPlan, prePaidSubscriptionsGroupPlanGroup } from \"app/types/product/sellingPlans\";\r\n\r\nconst defaultPlan: Plan = {\r\n    orderFrequency: 1,\r\n    frequencyUnit: \"month\",\r\n    frequencyName: \"1 Month Subscription\",\r\n    showDescription: false,\r\n    descriptionContent: '',\r\n    subscriptionRenewalDayType: \"SAME_DAY\",\r\n    yearlyRenewalDay: '',\r\n    subscriptionCuttOffDate: '',\r\n    offerDiscount: false,\r\n    discountValue: 0,\r\n    discountType: 'FIXED_AMOUNT',\r\n    changeDiscountAfterChargeEnable: false,\r\n    changeDiscountAfterCharge: 0,\r\n    changeDiscountAfterChargeValue: 0,\r\n    changeDiscountafterChargeDiscountType: 'FIXED',\r\n    inventoryPolicy: 'ON_SALE',\r\n    cancelationPolicy: 0,\r\n    allowCancelAfterCharge: 0,\r\n    enableAutomaticExpiration: false,\r\n    automaticExpiration: 0,\r\n    autoCancelAfterCharge: 0,\r\n    OfferFreeTrial: false,\r\n    freeTrialEndsPeriod: 0,\r\n    freeTrialEndsPeriodUnit: 'DAY',\r\n    freeTrialDiscountEnable: false,\r\n    freeTrialDiscountValue: 0,\r\n    freeTrialDiscountType: 'FIXED',\r\n    planType: \"Pay Per Shipment\",\r\n    billingFrequency: 1\r\n};\r\n\r\nexport const defaultPayPerShipmentPlan: PayPerShipmentSellingPlan = {\r\n    planName: '2 Week Subscription',\r\n    showDescription: false,\r\n    descriptionContent: '',\r\n    category:'SUBSCRIPTION',\r\n    pricingPolicyEnable: true,\r\n    pricingPolicyAdjustmentType: 'PERCENTAGE',\r\n    pricingPolicyAdjustmentValue: 10,\r\n    pricingPolicyAfterCycleEnable: false,\r\n    pricingPolicyAfterCycle: 0,\r\n    pricingPolicyAfterCycleAdjustmentType: 'PERCENTAGE',\r\n    pricingPolicyAfterCycleAdjustmentValue: 0,\r\n    inventoryPolicyEnable: true,\r\n    inventoryPolicyReserve: 'ON_FULFILLMENT',\r\n    deliveryPolicyEnable: true,\r\n    deliveryPolicyAnchorsCutoffDay: 2,\r\n    deliveryPolicyAnchorsDay: 1,\r\n    deliveryPolicyAnchorsMonth: 1,\r\n    deliveryPolicyAnchorsType: 'WEEKDAY',\r\n    deliveryPolicyCutoff: 2,\r\n    deliveryPolicyFulfillmentExactTime: '',\r\n    deliveryPolicyFulfillmentTrigger: 'ASAP',\r\n    deliveryPolicyIntent: 'FULFILLMENT_BEGIN',\r\n    deliveryPolicyPreAnchorBehavior: 'ASAP',\r\n    deliveryRecurringPolicyEnable: true,\r\n    preAnchorBehavior: 'ASAP',\r\n    deliveryRecurringPolicyAnchorsCutoffDay: 1,\r\n    deliveryRecurringPolicyAnchorsDay: 1,\r\n    deliveryRecurringPolicyAnchorsMonth: 1,\r\n    deliveryRecurringPolicyAnchorsType: 'WEEKDAY',\r\n    deliveryRecurringPolicyCutoff: 1,\r\n    deliveryRecurringPolicyIntent: 'FULFILLMENT_BEGIN',\r\n    deliveryRecurringPolicyInterval: 'WEEK',\r\n    deliveryRecurringPolicyIntervalCount: 1,\r\n    deliveryRecurringPreAnchorBehavior: 'ASAP',\r\n    billingRecurringPolicyEnable: true,\r\n    billingRecurringPolicyInterval: 'WEEK',\r\n    billingRecurringPolicyIntervalCount: 2,\r\n    billingRecurringPolicyMinCycles: 0,\r\n    billingRecurringPolicyMaxCycles: 0,\r\n    billingRecurringPolicyAnchorsCutoffDay: 1,\r\n    billingRecurringPolicyAnchorsDay: 1,\r\n    billingRecurringPolicyAnchorsMonth: 1,\r\n    billingRecurringPolicyAnchorsType: 'WEEKDAY',\r\n}\r\n\r\nexport const defaultPrePaidSubscriptionPlan: PrePaidSubscriptionSellingPlan = {\r\n    ...defaultPayPerShipmentPlan, \r\n    category:\"PRE_ORDER\"\r\n};\r\n\r\nexport const defaultPrePaidShipmentGroup: PayPerShipmentPlanGroup = {\r\n    groupName: \"Pre Paid Shipment Plan Group\",\r\n    sellingPlansToCreate: [defaultPrePaidSubscriptionPlan]\r\n}\r\n\r\nexport const defaultPayPerShipmentGroup: PayPerShipmentPlanGroup = {\r\n    groupName: \"Pay Per Shipment Plan Group\",\r\n    sellingPlansToCreate: [defaultPayPerShipmentPlan]\r\n}\r\n\r\nexport const defaultPrePaidGroup: prePaidSubscriptionsGroupPlanGroup = { groupName: \"PrePaid Subscription Plan Group\" }\r\n\r\nexport const defaultOneTimePlan: OneTimePlan = {\r\n    enable: false,\r\n    planName: '',\r\n    pricingPolicyEnable: true,\r\n    pricingPolicyAdjustmentType: 'PERCENTAGE',\r\n    pricingPolicyAdjustmentValue: 10,\r\n    inventoryPolicyEnable: false,\r\n    inventoryPolicyReserve: \"ON_FULFILLMENT\",\r\n    deliveryPolicyEnable: false,\r\n    deliveryPolicyAnchorsCutoffDay: 0,\r\n    deliveryPolicyAnchorsDay: 1,\r\n    deliveryPolicyAnchorsMonth: 0,\r\n    deliveryPolicyAnchorsType: 'MONTHDAY',\r\n    deliveryPolicyCutoff: 0,\r\n    deliveryPolicyFulfillmentExactTime: (new Date()).toISOString(),\r\n    deliveryPolicyFulfillmentTrigger: \"ASAP\",\r\n    deliveryPolicyIntent: 'FULFILLMENT_BEGIN',\r\n    deliveryPolicyPreAnchorBehavior: 'ASAP',\r\n    preAnchorBehavior: \"ASAP\",\r\n    billingPolicyEnable: false,\r\n    billingPolicyCheckoutChargeType: 'PERCENTAGE',\r\n    billingPolicyCheckoutChargeValue: 100,\r\n    billingPolicyRemainingBalanceChargeExactTime: '',\r\n    billingPolicyRemainingBalanceChargeTimeAfterCheckout: '',\r\n    billingPolicyRemainingBalanceChargeTrigger: 'NO_REMAINING_BALANCE'\r\n}\r\n\r\nexport default defaultPlan","import { Flex, Switch, Title } from 'rizzui';\r\nimport { MdAddShoppingCart } from 'react-icons/md';\r\n\r\nexport const PlanHeader = ({\r\n    isPlanEnabled,\r\n    onToggle,\r\n}: {\r\n    isPlanEnabled: boolean;\r\n    onToggle: (checked: boolean) => void;\r\n}) => (\r\n    <Flex align=\"center\" justify=\"between\">\r\n        <Flex align=\"center\" gap=\"2\">\r\n            {/* <MdAddShoppingCart /> */}\r\n            <Title as=\"h3\" className=\"text-sm\">\r\n                One-time plan settings\r\n            </Title>\r\n        </Flex>\r\n        <Switch checked={isPlanEnabled} onChange={() => onToggle(!isPlanEnabled)} />\r\n    </Flex>\r\n);","import { FC, useState } from 'react';\r\nimport { Input } from 'rizzui/input';\r\nimport { FaChevronUp, FaChevronDown } from 'react-icons/fa6';\r\n\r\ninterface NumberInputProps {\r\n    label: string;\r\n    value: number;\r\n    min?: number;\r\n    max?: number;\r\n    percent?: boolean; // New prop to control max limit\r\n    onChange: (value: number) => void;\r\n}\r\n\r\nexport const NumberInput: FC<NumberInputProps> = ({ label, value, min = 1, percent = false, onChange }) => {\r\n    const [internalValue, setInternalValue] = useState(value);\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newValue = e.target.value === '' ? '' : Number(e.target.value);\r\n        setInternalValue(newValue as number); // Allow empty value for manual entry\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        const finalValue = Math.max(min, Math.min(internalValue || min, percent ? 100 : Infinity)); // Apply min/max limits\r\n        setInternalValue(finalValue);\r\n        onChange(finalValue);\r\n    };\r\n\r\n    return (\r\n        <Input\r\n            type=\"number\"\r\n            value={internalValue}\r\n            onChange={handleChange}\r\n            onBlur={handleBlur}\r\n            label={label}\r\n            suffix={\r\n                <div className=\"-mr-3.5 grid gap-[2px] p-0.5 rtl:-ml-3.5 rtl:-mr-0\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"rounded-[3px] bg-gray-100 py-0.5 px-1.5 hover:bg-gray-200 focus:bg-gray-200\"\r\n                        onClick={() => {\r\n                            const newValue = Math.min(internalValue + 1, percent ? 100 : Infinity);\r\n                            setInternalValue(newValue);\r\n                            onChange(newValue);\r\n                        }}\r\n                    >\r\n                        <FaChevronUp className=\"h-3 w-3\" />\r\n                    </button>\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"rounded-[3px] bg-gray-100 py-0.5 px-1.5 hover:bg-gray-200 focus:bg-gray-200\"\r\n                        onClick={() => {\r\n                            const newValue = Math.max(internalValue - 1, min);\r\n                            setInternalValue(newValue);\r\n                            onChange(newValue);\r\n                        }}\r\n                    >\r\n                        <FaChevronDown className=\"h-3 w-3\" />\r\n                    </button>\r\n                </div>\r\n            }\r\n        />\r\n    );\r\n};\r\n","import { AnchorType, DeliveryPolicy, FulfillmentTrigger, InventoryPolicy, Plan, PreAnchorBehaviorBehavior, RemainingBalanceChargeTrigger, SellingPlanInterval } from \"app/types/product/sellingPlans\";\r\n\r\n// Type definitions\r\nexport interface SelectOption<T = string | number> {\r\n    label: string;\r\n    value: T;\r\n}\r\n\r\n\r\n\r\n// Constants\r\nexport const unitOptions: SelectOption<SellingPlanInterval>[] = [\r\n    { label: \"Day(s)\", value: \"DAY\" },\r\n    { label: \"Week(s)\", value: \"WEEK\" },\r\n    { label: \"Month(s)\", value: \"MONTH\" },\r\n    { label: \"Year(s)\", value: \"YEAR\" },\r\n];\r\n\r\nexport const PricingPolicyAdjustmentTypeOptions: SelectOption<Plan['discountType']>[] = [\r\n    { label: \"Fixed amount off\", value: \"FIXED_AMOUNT\" },\r\n    { label: \"Percentage off\", value: \"PERCENTAGE\" },\r\n    { label: \"Set Price\", value: \"PRICE\" },\r\n];\r\n\r\n\r\nexport const inventoryReserveOptions: SelectOption<InventoryPolicy['reserve']>[] = [\r\n    { label: \"Reserve Inventory on Fulfillment\", value: \"ON_FULFILLMENT\" },\r\n    { label: \"Reserve Inventory on Sale\", value: \"ON_SALE\" },\r\n];\r\n\r\nexport const deliveryPolicyFulfillmentTriggerOptions: SelectOption<FulfillmentTrigger>[] = [\r\n    { label: \"Anchor-based Fulfillment\", value: \"ANCHOR\" },\r\n    { label: \"Fulfill as Soon as Possible\", value: \"ASAP\" },\r\n    { label: \"Fulfill at an Exact Time\", value: \"EXACT_TIME\" },\r\n    { label: \"Unknown Fulfillment Trigger\", value: \"UNKNOWN\" },\r\n]\r\n\r\nexport const dayOptions: SelectOption[] = [\r\n    { label: \"Monday\", value: 1 },\r\n    { label: \"Tuesday\", value: 2 },\r\n    { label: \"Wednesday\", value: 3 },\r\n    { label: \"Thursday\", value: 4 },\r\n    { label: \"Friday\", value: 5 },\r\n    { label: \"Saturday\", value: 6 },\r\n    { label: \"Sunday\", value: 7 },\r\n];\r\n\r\n\r\nexport const anchorTypeOptions: SelectOption<AnchorType>[] = [\r\n    { label: \"Day of the Week (Monday–Sunday)\", value: \"WEEKDAY\" },\r\n    { label: \"Day of the Month (1st–31st)\", value: \"MONTHDAY\" },\r\n    { label: \"Specific Date in the Year (Month & Day)\", value: \"YEARDAY\" },\r\n]\r\n\r\nexport const preAnchorBehaviorOptions: SelectOption<PreAnchorBehaviorBehavior>[] = [\r\n    { label: \"On the Same Day\", value: \"ASAP\" },\r\n    { label: \"On Next Anchor\", value: \"NEXT\" },\r\n]\r\n\r\nexport const inventoryPolicyOptions: SelectOption<Plan['inventoryPolicy']>[] = [\r\n    { label: \"On Sale\", value: \"ON_SALE\" },\r\n    { label: \"On Fulfilment\", value: \"ON_FULFILMENT\" },\r\n];\r\n\r\nexport const monthDayOptions: SelectOption[] =\r\n    Array.from({ length: 31 }, (_, i) => ({\r\n        label: `${i + 1}${['st', 'nd', 'rd'][((i + 1) % 10) - 1] || 'th'}`,\r\n        value: (i + 1),\r\n    }));\r\n\r\nexport const subscriptionRenewalDateTypeOptions: SelectOption[] = [\r\n    { label: \"Same day of month\", value: \"SAME_DAY\" },\r\n    ...Array.from({ length: 31 }, (_, i) => ({\r\n        label: `${i + 1}${['st', 'nd', 'rd'][((i + 1) % 10) - 1] || 'th'}`,\r\n        value: (i + 1).toString(),\r\n    })),\r\n];\r\n\r\nexport const checkoutChargeTypeOptions: SelectOption[] = [\r\n    { label: \"The checkout charge is a percentage\", value: \"PERCENTAGE\" },\r\n    { label: \"The checkout charge is a fixed price amount\", value: \"PRICE\" },\r\n]\r\n\r\nexport const remainingBalanceChargeTriggerOptions: SelectOption<RemainingBalanceChargeTrigger>[] = [\r\n    { label: \"At an exact time \", value: \"EXACT_TIME\" },\r\n    // { label: \"There's no remaining balance\", value: \"NO_REMAINING_BALANCE\" },\r\n    { label: \"After the duration defined in the plan\", value: \"TIME_AFTER_CHECKOUT\" },\r\n]\r\n\r\nexport const timeUnitsOptions: SelectOption[] = [\r\n    { value: \"D\", label: \"Days\" },\r\n    { value: \"W\", label: \"Weeks\" },\r\n    { value: \"M\", label: \"Months\" },\r\n    { value: \"Y\", label: \"Years\" }\r\n]\r\n\r\nexport const subscriptionRenewalCuttOffDateOptions: SelectOption[] =\r\n    Array.from({ length: 31 }, (_, i) => ({\r\n        label: `${i + 1}${['st', 'nd', 'rd'][((i + 1) % 10) - 1] || 'th'}`,\r\n        value: (i + 1).toString(),\r\n    }));\r\n\r\n// New Options for Weekly and Yearly Plans\r\nexport const weeklyRenewalOptions: SelectOption[] = [\r\n    { label: \"Monday\", value: \"mon\" },\r\n    { label: \"Tuesday\", value: \"tue\" },\r\n    { label: \"Wednesday\", value: \"wed\" },\r\n    { label: \"Thursday\", value: \"thu\" },\r\n    { label: \"Friday\", value: \"fri\" },\r\n    { label: \"Saturday\", value: \"sat\" },\r\n    { label: \"Sunday\", value: \"sun\" },\r\n];\r\n\r\nexport const yearlyRenewalMonthOptions: SelectOption[] = [\r\n    { label: \"January\", value: 1 },\r\n    { label: \"February\", value: 2 },\r\n    { label: \"March\", value: 3 },\r\n    { label: \"April\", value: 4 },\r\n    { label: \"May\", value: 5 },\r\n    { label: \"June\", value: 6 },\r\n    { label: \"July\", value: 7 },\r\n    { label: \"August\", value: 8 },\r\n    { label: \"September\", value: 9 },\r\n    { label: \"October\", value: 10 },\r\n    { label: \"November\", value: 11 },\r\n    { label: \"December\", value: 12 },\r\n];\r\n\r\nexport const yearlyRenewalDayOptions: SelectOption[] =\r\n    Array.from({ length: 31 }, (_, i) => ({\r\n        label: `${i + 1}${['st', 'nd', 'rd'][((i + 1) % 10) - 1] || 'th'}`,\r\n        value: (i + 1).toString(),\r\n    }));","import { Select } from \"rizzui/select\";\r\nimport { Switch } from \"rizzui/switch\";\r\nimport { NumberInput } from \"../NumberInput\";\r\nimport { PricingPolicyAdjustmentTypeOptions } from \"../SellingPlanFormUtils\";\r\n\r\nexport const PricingPolicy = ({\r\n    pricingPolicyEnable,\r\n    pricingPolicyAdjustmentType,\r\n    pricingPolicyAdjustmentValue,\r\n    onToggleDiscount,\r\n    onChangePricingPolicyAdjustmentType,\r\n    onChangePricingPolicyAdjustmentValue,\r\n}: {\r\n    pricingPolicyEnable: boolean,\r\n    pricingPolicyAdjustmentType: string,\r\n    pricingPolicyAdjustmentValue: number\r\n    onToggleDiscount: () => void,\r\n    onChangePricingPolicyAdjustmentType: (value: string) => void,\r\n    onChangePricingPolicyAdjustmentValue: (value: number) => void,\r\n}) => (\r\n    <div>\r\n        <Switch\r\n            checked={pricingPolicyEnable}\r\n            onChange={onToggleDiscount}\r\n            label=\"Offer a discount\"\r\n        />\r\n        {pricingPolicyEnable && (\r\n            <div className=\"flex gap-4 mt-3\">\r\n                <div className=\"flex-1\">\r\n                    <Select\r\n                        value={PricingPolicyAdjustmentTypeOptions.find(opt => opt.value === pricingPolicyAdjustmentType)}\r\n                        options={PricingPolicyAdjustmentTypeOptions}\r\n                        onChange={(option: any) => option && onChangePricingPolicyAdjustmentType(option.value)}\r\n                        label=\"Discount Type\"\r\n                    />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                    <NumberInput\r\n                        label={pricingPolicyAdjustmentType === 'PERCENTAGE' ? 'Discount value' : 'Set Price'}\r\n                        value={pricingPolicyAdjustmentValue ?? 0}\r\n                        onChange={onChangePricingPolicyAdjustmentValue}\r\n                        percent={true}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )}\r\n    </div>\r\n);","import { Input } from 'rizzui';\r\n\r\nexport const PlanNameInput = ({\r\n    value,\r\n    onChange,\r\n    productTitle,\r\n}: {\r\n    value: string;\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n    productTitle: string;\r\n}) => (\r\n    <Input\r\n        label=\"Plan Name\"\r\n        value={value || productTitle}\r\n        onChange={onChange}\r\n        placeholder=\"Enter plan name\"\r\n    />\r\n);","\"use client\";\n\nimport { useState } from \"react\";\nimport { Input, InputProps } from \"rizzui\";\nimport cn from \"../utils/class-names\";\nimport { PiCalendarBlank, PiCaretDownBold } from \"react-icons/pi\";\nimport ReactDatePicker, {\n  type DatePickerProps as ReactDatePickerProps,\n} from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst calendarContainerClasses = {\n  base: \"[&.react-datepicker]:shadow-lg [&.react-datepicker]:border-gray-100 [&.react-datepicker]:rounded-md\",\n  monthContainer: {\n    padding: \"[&.react-datepicker>div]:pt-5 [&.react-datepicker>div]:pb-3\",\n  },\n};\n\nconst prevNextButtonClasses = {\n  base: \"[&.react-datepicker>button]:items-baseline [&.react-datepicker>button]:top-7\",\n  border:\n    \"[&.react-datepicker>button]:border [&.react-datepicker>button]:border-solid [&.react-datepicker>button]:border-gray-300 [&.react-datepicker>button]:rounded-md\",\n  size: \"[&.react-datepicker>button]:h-[22px] [&.react-datepicker>button]:w-[22px]\",\n  children: {\n    position: \"[&.react-datepicker>button>span]:top-0\",\n    border:\n      \"[&.react-datepicker>button>span]:before:border-t-[1.5px] [&.react-datepicker>button>span]:before:border-r-[1.5px] [&.react-datepicker>button>span]:before:border-gray-400\",\n    size: \"[&.react-datepicker>button>span]:before:h-[7px] [&.react-datepicker>button>span]:before:w-[7px]\",\n  },\n};\n\nconst timeOnlyClasses = {\n  base: \"[&.react-datepicker--time-only>div]:pr-0 [&.react-datepicker--time-only>div]:w-28\",\n};\n\nconst popperClasses = {\n  base: \"[&>svg]:!fill-white dark:[&>svg]:!fill-gray-100 [&>svg]:!stroke-gray-300 dark:[&>svg]:!stroke-muted dark:[&>svg]:!text-muted\",\n};\n\nexport type DatePickerProps = ReactDatePickerProps & {\n  inputProps?: InputProps;\n};\n\nexport const DatePicker = ({\n  inputProps,\n  customInput,\n  onCalendarOpen,\n  onCalendarClose,\n  popperClassName,\n  calendarClassName,\n  dateFormat = \"d MMMM yyyy\",\n  showPopperArrow = false,\n  ...props\n}: DatePickerProps) => {\n  const [isCalenderOpen, setIsCalenderOpen] = useState(false);\n  const handleCalenderOpen = () => setIsCalenderOpen(true);\n  const handleCalenderClose = () => setIsCalenderOpen(false);\n  return (\n    <div\n      className={cn(\n        \"flex [&_.react-datepicker-wrapper]:flex [&_.react-datepicker-wrapper]:w-full\",\n        props?.className\n      )}\n    >\n      <ReactDatePicker\n        customInput={\n          customInput || (\n            <Input\n              prefix={<PiCalendarBlank className=\"w-5 h-5 text-gray-500\" />}\n              suffix={\n                <PiCaretDownBold\n                  className={cn(\n                    \"h-4 w-4 text-gray-500 transition\",\n                    isCalenderOpen && \"rotate-180\"\n                  )}\n                />\n              }\n              {...inputProps}\n            />\n          )\n        }\n        onCalendarOpen={onCalendarOpen || handleCalenderOpen}\n        onCalendarClose={onCalendarClose || handleCalenderClose}\n        calendarClassName={cn(\n          calendarContainerClasses.base,\n          calendarContainerClasses.monthContainer.padding,\n          prevNextButtonClasses.base,\n          prevNextButtonClasses.border,\n          prevNextButtonClasses.size,\n          prevNextButtonClasses.children.position,\n          prevNextButtonClasses.children.border,\n          prevNextButtonClasses.children.size,\n          timeOnlyClasses.base,\n          calendarClassName\n        )}\n        popperClassName={cn(popperClasses.base, popperClassName)}\n        dateFormat={dateFormat}\n        showPopperArrow={showPopperArrow}\n        {...props}\n      />\n    </div>\n  );\n};\n","import { Select } from \"rizzui/select\";\r\nimport { Switch } from \"rizzui/switch\";\r\nimport { Text } from \"rizzui/typography\";\r\nimport { checkoutChargeTypeOptions, remainingBalanceChargeTriggerOptions } from \"../SellingPlanFormUtils\";\r\nimport { NumberInput } from \"../NumberInput\";\r\nimport { DatePicker } from \"app/packages/ui/datepicker\";\r\n\r\n/** Renders the billing policy section with conditional fields based on selections. */\r\nexport const BillingPolicySection = ({\r\n    currentPlan,\r\n    onChange\r\n}: {\r\n    currentPlan: any,\r\n    onChange: any;\r\n}) => {\r\n    const {\r\n        billingPolicyEnable,\r\n        billingPolicyCheckoutChargeType,\r\n        billingPolicyCheckoutChargeValue,\r\n        billingPolicyRemainingBalanceChargeTrigger,\r\n        billingPolicyRemainingBalanceChargeExactTime,\r\n        billingPolicyRemainingBalanceChargeTimeAfterCheckout\r\n    } = currentPlan;\r\n\r\n    return (\r\n        <div className=\"pt-3 border-t-2\">\r\n            <div>\r\n                <Switch\r\n                    checked={billingPolicyEnable}\r\n                    onChange={() => onChange('billingPolicyEnable', !billingPolicyEnable)}\r\n                    label=\"Set Billing Policy\"\r\n                />\r\n                <Text>If not set, it will treat as a normal order</Text>\r\n            </div>\r\n            {billingPolicyEnable && (\r\n                <div className=\"flex gap-4 mt-3 flex-wrap\">\r\n                    <div className=\"flex-1 w-[50%]\">\r\n                        <Select\r\n                            value={checkoutChargeTypeOptions.find(opt => opt.value === billingPolicyCheckoutChargeType)}\r\n                            options={checkoutChargeTypeOptions}\r\n                            onChange={(option: any) => option && onChange('billingPolicyCheckoutChargeType', option.value)}\r\n                            label=\"Checkout Charge Type\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"flex-1 w-[50%]\">\r\n                        <NumberInput\r\n                            label=\"Set Value\"\r\n                            value={billingPolicyCheckoutChargeValue ?? 0}\r\n                            onChange={(v) => onChange('billingPolicyCheckoutChargeValue', v)}\r\n                            percent={true}\r\n                        />\r\n                    </div>\r\n                    {(billingPolicyCheckoutChargeType === 'PERCENTAGE' && billingPolicyCheckoutChargeValue < 100) && (\r\n                        <div className=\"w-[100%]\">\r\n                            <Select\r\n                                value={remainingBalanceChargeTriggerOptions.find(opt => opt.value === billingPolicyRemainingBalanceChargeTrigger)}\r\n                                options={remainingBalanceChargeTriggerOptions}\r\n                                onChange={(option: any) => option && onChange('billingPolicyRemainingBalanceChargeTrigger', option.value)}\r\n                                label=\"Remaining Balance Charge Trigger\"\r\n                            />\r\n                        </div>\r\n                    )}\r\n\r\n                    {/* Here we need a condition that if the trigger is exact time and pricing value is less than the actuall price or percent is lesst than actual price */}\r\n                    {billingPolicyRemainingBalanceChargeTrigger === 'EXACT_TIME' && (\r\n                        <div className=\"flex-1\">\r\n                            <DatePicker\r\n                                selected={billingPolicyRemainingBalanceChargeExactTime ? new Date(billingPolicyRemainingBalanceChargeExactTime) : null}\r\n                                onChange={(date: Date | null) => {\r\n                                    const isoDate = date ? date.toISOString() : null;\r\n                                    onChange(\"billingPolicyRemainingBalanceChargeExactTime\", isoDate as any);\r\n                                }}\r\n                                dateFormat=\"yyyy-MM-dd'T'HH:mm:ss'Z'\"\r\n                                placeholderText=\"Select Date & Time\"\r\n                                showTimeSelect\r\n                                timeFormat=\"HH:mm\"\r\n                                timeIntervals={15}\r\n                                timeCaption=\"Time\"\r\n                                popperPlacement=\"bottom-end\"\r\n                                showMonthYearPicker={false}\r\n                                inputProps={{\r\n                                    variant: \"text\",\r\n                                    inputClassName:\r\n                                        \"rizzui-input-container flex items-center peer w-full transition duration-200 [&.is-focus]:ring-[0.8px] ring-[0.6px] [&.is-hover]:border-primary [&.is-focus]:border-primary [&.is-focus]:ring-primary [&_input::placeholder]:opacity-60 px-3.5 py-2 text-sm h-10 rounded-md border border-muted ring-muted bg-transparent\",\r\n                                    label: \"Select Date Time\"\r\n                                }}\r\n                                className=\"w-full\"\r\n                            />\r\n                        </div>\r\n                    )}\r\n                    {billingPolicyRemainingBalanceChargeTrigger === 'TIME_AFTER_CHECKOUT' && (\r\n                        <NumberInput\r\n                            label=\"Remaining Balance Charge Time After Checkout\"\r\n                            value={parseInt(billingPolicyRemainingBalanceChargeTimeAfterCheckout.replace(/\\D/g, \"\"), 10) || \"\"}\r\n                            onChange={(v) => onChange(\"billingPolicyRemainingBalanceChargeTimeAfterCheckout\", `P${v}${billingPolicyRemainingBalanceChargeTimeAfterCheckout.slice(-1) || \"D\"}`)}\r\n                            suffix={\r\n                                <Select\r\n                                    options={[\r\n                                        { value: \"D\", label: \"Days\" },\r\n                                        { value: \"W\", label: \"Weeks\" },\r\n                                        { value: \"M\", label: \"Months\" },\r\n                                        { value: \"Y\", label: \"Years\" }\r\n                                    ]}\r\n                                    value={{\r\n                                        value: billingPolicyRemainingBalanceChargeTimeAfterCheckout.slice(-1) || \"D\",\r\n                                        label: billingPolicyRemainingBalanceChargeTimeAfterCheckout.slice(-1) === \"D\"\r\n                                            ? \"Days\"\r\n                                            : billingPolicyRemainingBalanceChargeTimeAfterCheckout.slice(-1) === \"W\"\r\n                                                ? \"Weeks\"\r\n                                                : billingPolicyRemainingBalanceChargeTimeAfterCheckout.slice(-1) === \"M\"\r\n                                                    ? \"Months\"\r\n                                                    : \"Years\"\r\n                                    }}\r\n                                    onChange={(option: any) =>\r\n                                        option &&\r\n                                        onChange(\"billingPolicyRemainingBalanceChargeTimeAfterCheckout\", `P${parseInt(billingPolicyRemainingBalanceChargeTimeAfterCheckout.replace(/\\D/g, \"\"), 10) || 1}${option.value}`)\r\n                                    }\r\n                                />\r\n                            }\r\n                        />\r\n                    )}\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};","import { Text } from \"rizzui/typography\";\r\nimport { anchorTypeOptions, dayOptions, deliveryPolicyFulfillmentTriggerOptions, monthDayOptions, preAnchorBehaviorOptions, yearlyRenewalMonthOptions } from \"../SellingPlanFormUtils\";\r\nimport { Select } from \"rizzui/select\";\r\nimport { DatePicker } from \"app/packages/ui/datepicker\";\r\nimport { NumberInput } from \"../NumberInput\";\r\n\r\n/** Renders the delivery policy section with trigger options and conditional fields. */\r\nexport const DeliveryPolicySection = ({\r\n    currentPlan,\r\n    onChange\r\n}: {\r\n    currentPlan: any,\r\n    onChange: any;\r\n}) => {\r\n    const {\r\n        deliveryPolicyFulfillmentTrigger,\r\n        deliveryPolicyFulfillmentExactTime,\r\n        preAnchorBehavior,\r\n        deliveryPolicyAnchorsType,\r\n        deliveryPolicyAnchorsDay,\r\n        deliveryPolicyAnchorsCutoffDay,\r\n        deliveryPolicyAnchorsMonth,\r\n        deliveryPolicyCutoff\r\n    } = currentPlan;\r\n\r\n    return (\r\n        <div className=\"pt-3 w-full\">\r\n            <Text>Set Delivery Policy</Text>\r\n            <div className=\"flex gap-4 mt-3\">\r\n                <div className=\"flex-1\">\r\n                    <Select\r\n                        value={deliveryPolicyFulfillmentTriggerOptions.find(opt => opt.value === deliveryPolicyFulfillmentTrigger)}\r\n                        options={deliveryPolicyFulfillmentTriggerOptions}\r\n                        onChange={(option: any) => option && onChange('deliveryPolicyFulfillmentTrigger', option.value)}\r\n                        label=\"What triggers the fulfillment.\"\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n            {deliveryPolicyFulfillmentTrigger === 'EXACT_TIME' && (\r\n                <div className=\"flex gap-4 mt-3\">\r\n                    <div className=\"flex-1\">\r\n                        <DatePicker\r\n                            selected={deliveryPolicyFulfillmentExactTime ? new Date(deliveryPolicyFulfillmentExactTime) : null}\r\n                            onChange={(date: Date | null) => {\r\n                                const isoDate = date ? date.toISOString() : null;\r\n                                onChange(\"deliveryPolicyFulfillmentExactTime\", isoDate as any);\r\n                            }}\r\n                            dateFormat=\"yyyy-MM-dd'T'HH:mm:ss'Z'\"\r\n                            placeholderText=\"Select Date & Time\"\r\n                            showTimeSelect\r\n                            timeFormat=\"HH:mm\"\r\n                            timeIntervals={15}\r\n                            timeCaption=\"Time\"\r\n                            popperPlacement=\"bottom-end\"\r\n                            showMonthYearPicker={false}\r\n                            inputProps={{\r\n                                variant: \"text\",\r\n                                inputClassName:\r\n                                    \"rizzui-input-container flex items-center peer w-full transition duration-200 [&.is-focus]:ring-[0.8px] ring-[0.6px] [&.is-hover]:border-primary [&.is-focus]:border-primary [&.is-focus]:ring-primary [&_input::placeholder]:opacity-60 px-3.5 py-2 text-sm h-10 rounded-md border border-muted ring-muted bg-transparent\",\r\n                                label: \"Select Date Time\"\r\n                            }}\r\n                            className=\"w-full\"\r\n                        />\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                        <Select\r\n                            value={preAnchorBehaviorOptions.find(opt => opt.value === preAnchorBehavior)}\r\n                            options={preAnchorBehaviorOptions}\r\n                            onChange={(option: any) => option && onChange('preAnchorBehavior', option.value)}\r\n                            label=\"The pre-anchor behavior.\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            )}\r\n\r\n            {deliveryPolicyFulfillmentTrigger === 'ANCHOR' && (\r\n                <div className=\"flex flex-col gap-4 mt-3\">\r\n                    <div className=\"flex-1\">\r\n                        <Select\r\n                            value={anchorTypeOptions.find(opt => opt.value === deliveryPolicyAnchorsType)}\r\n                            options={anchorTypeOptions}\r\n                            onChange={(option: any) => option && onChange('deliveryPolicyAnchorsType', option.value)}\r\n                            label=\"When Should Delivery Be Scheduled?\"\r\n                        />\r\n                    </div>\r\n\r\n                    {deliveryPolicyAnchorsType == 'WEEKDAY' && (\r\n                        <div className=\"grid grid-cols-2 gap-4\">\r\n                            <div className=\"\">\r\n                                <Select\r\n                                    value={dayOptions.find(opt => opt.value === deliveryPolicyAnchorsDay)}\r\n                                    options={dayOptions}\r\n                                    onChange={(option: any) => option && onChange('deliveryPolicyAnchorsDay', option.value)}\r\n                                    label=\"Select Day\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"\">\r\n                                <Select\r\n                                    value={dayOptions.find(opt => opt.value === deliveryPolicyAnchorsCutoffDay)}\r\n                                    options={dayOptions}\r\n                                    onChange={(option: any) => option && onChange('deliveryPolicyAnchorsCutoffDay', option.value)}\r\n                                    label=\"Cutfoff Time Interval\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {deliveryPolicyAnchorsType === \"MONTHDAY\" && (\r\n                        <div className=\"grid grid-cols-2 gap-4\">\r\n                            <div>\r\n                                <Select\r\n                                    value={monthDayOptions.find(opt => opt.value === deliveryPolicyAnchorsMonth)}\r\n                                    options={monthDayOptions}\r\n                                    onChange={(option: any) => option && onChange('deliveryPolicyAnchorsMonth', option.value)}\r\n                                    label=\"Select Month\"\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <Select\r\n                                    value={monthDayOptions.find(opt => opt.value === deliveryPolicyAnchorsCutoffDay)}\r\n                                    options={monthDayOptions}\r\n                                    onChange={(option: any) => option && onChange('deliveryPolicyAnchorsCutoffDay', option.value)}\r\n                                    label=\"Cutfoff Time Interval\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {deliveryPolicyAnchorsType == 'YEARDAY' && (\r\n                        <div className=\"grid grid-cols-2 gap-4\">\r\n                            <Select\r\n                                value={yearlyRenewalMonthOptions.find(opt => opt.value === deliveryPolicyAnchorsDay)}\r\n                                options={yearlyRenewalMonthOptions}\r\n                                onChange={(option: any) => option && onChange('deliveryPolicyAnchorsDay', option.value)}\r\n                                label=\"Select Day\"\r\n                            />\r\n                        </div>\r\n                    )}\r\n\r\n                    <div className=\"flex flex-col gap-4 mt-3\">\r\n                        <div className=\"flex-1\">\r\n                            <Select\r\n                                value={preAnchorBehaviorOptions.find(opt => opt.value === preAnchorBehavior)}\r\n                                options={preAnchorBehaviorOptions}\r\n                                onChange={(option: any) => option && onChange('preAnchorBehavior', option.value)}\r\n                                label=\"The pre-anchor behavior.\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* {(deliveryPolicyAnchorsType == 'WEEKDAY' || deliveryPolicyAnchorsType == 'MONTHDAY') && (\r\n                        <div>\r\n                            <NumberInput\r\n                                label=\"Cutfoff Time Interval\"\r\n                                value={deliveryPolicyAnchorsCutoffDay}\r\n                                onChange={(v) => onChange('deliveryPolicyAnchorsCutoffDay', v)}\r\n                                max={\r\n                                    deliveryPolicyAnchorsType === \"WEEKDAY\"\r\n                                        ? 7 // Max value for WEEKDAY\r\n                                        : deliveryPolicyAnchorsType === \"MONTHDAY\"\r\n                                            ? 31 // Max value for MONTHDAY\r\n                                            : undefined // No max value for other types\r\n                                }\r\n                                percent={true}\r\n                            />\r\n                            \r\n                        </div>\r\n                    )} */}\r\n\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n","import { Select } from \"rizzui/select\";\r\nimport { Switch } from \"rizzui/switch\";\r\nimport { inventoryReserveOptions } from \"../SellingPlanFormUtils\";\r\n\r\n/** Renders the inventory policy section. */\r\nexport const InventoryPolicySection = ({\r\n    inventoryPolicyEnable,\r\n    inventoryPolicyReserve,\r\n    onToggleInventory,\r\n    onChangeInventoryReserve\r\n}: {\r\n    inventoryPolicyEnable: boolean,\r\n    inventoryPolicyReserve: string,\r\n    onToggleInventory: () => void,\r\n    onChangeInventoryReserve: (value: string) => void,\r\n}) => (\r\n    <div>\r\n        <Switch\r\n            checked={inventoryPolicyEnable}\r\n            onChange={onToggleInventory}\r\n            label=\"Set Inventory Policy\"\r\n        />\r\n        {inventoryPolicyEnable && (\r\n            <div className=\"flex gap-4 mt-3\">\r\n                <div className=\"flex-1\">\r\n                    <Select\r\n                        value={inventoryReserveOptions.find(opt => opt.value === inventoryPolicyReserve)}\r\n                        options={inventoryReserveOptions}\r\n                        onChange={(option: any) => option && onChangeInventoryReserve(option.value)}\r\n                        label=\"When to reserve inventory for the order.\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        )}\r\n    </div>\r\n);","import { OneTimePlan } from \"app/types/product/sellingPlans\";\r\nimport { PricingPolicy } from \"../components/Policies/PricingPolicy\";\r\nimport { PlanNameInput } from \"../components/PlanNameInput\";\r\nimport { BillingPolicySection } from \"../components/Policies/BillingPolicySection\";\r\nimport { DeliveryPolicySection } from \"../components/Policies/DeliveryPolicySection\";\r\nimport { InventoryPolicySection } from \"../components/Policies/InventoryPolicySection\";\r\nimport { Button, ButtonProps } from \"rizzui/button\";\r\nimport { Tab } from \"rizzui/tabs\";\r\n\r\n/** \r\n * The overall form for creating/editing the one-time plan. \r\n * It composes all the smaller sections.\r\n */\r\nexport const OneTimePlanForm = ({\r\n    currentPlan,\r\n    onChange,\r\n    onSave,\r\n    productTitle,\r\n    tabListClassName = \"w-[21%]\",\r\n    tabPanelClassName = \"w-[79%]\",\r\n    saveButtonProps = {}\r\n}: {\r\n    currentPlan: OneTimePlan,\r\n    onChange: <T extends keyof OneTimePlan>(field: T, value: OneTimePlan[T]) => void,\r\n    onSave: () => void,\r\n    productTitle: string,\r\n    tabListClassName?: string,\r\n    tabPanelClassName?: string,\r\n    saveButtonProps?: ButtonProps\r\n}) => (\r\n    <div className=\"mt-4 space-y-4\">\r\n        <Tab\r\n            vertical\r\n            onPointerDown={(e) => e.stopPropagation()}\r\n            onClick={(e) => e.stopPropagation()}\r\n        >\r\n            <Tab.List className={tabListClassName}>\r\n                <Tab.ListItem>Basic</Tab.ListItem>\r\n                <Tab.ListItem>Pricing Policy</Tab.ListItem>\r\n                <Tab.ListItem>Inventory Policy</Tab.ListItem>\r\n                <Tab.ListItem>Delivery Policy</Tab.ListItem>\r\n                <Tab.ListItem>Billing Policy</Tab.ListItem>\r\n            </Tab.List>\r\n            <Tab.Panels className={tabPanelClassName}>\r\n                <Tab.Panel>\r\n                    <PlanNameInput\r\n                        value={currentPlan.planName || \"\"}\r\n                        onChange={(e) => onChange('planName', e.target.value)}\r\n                        productTitle={productTitle}\r\n                    />\r\n                </Tab.Panel>\r\n                <Tab.Panel>\r\n                    <PricingPolicy\r\n                        pricingPolicyEnable={currentPlan.pricingPolicyEnable}\r\n                        pricingPolicyAdjustmentType={currentPlan.pricingPolicyAdjustmentType}\r\n                        pricingPolicyAdjustmentValue={currentPlan.pricingPolicyAdjustmentValue}\r\n                        onToggleDiscount={() => onChange('pricingPolicyEnable', !currentPlan.pricingPolicyEnable)}\r\n                        onChangePricingPolicyAdjustmentType={(value: any) => onChange('pricingPolicyAdjustmentType', value)}\r\n                        onChangePricingPolicyAdjustmentValue={(value: number) => onChange('pricingPolicyAdjustmentValue', value)}\r\n                    />\r\n                </Tab.Panel>\r\n                <Tab.Panel>\r\n                    <InventoryPolicySection\r\n                        inventoryPolicyEnable={currentPlan.inventoryPolicyEnable}\r\n                        inventoryPolicyReserve={currentPlan.inventoryPolicyReserve}\r\n                        onToggleInventory={() => onChange('inventoryPolicyEnable', !currentPlan.inventoryPolicyEnable)}\r\n                        onChangeInventoryReserve={(value: any) => onChange('inventoryPolicyReserve', value)}\r\n                    />\r\n                </Tab.Panel>\r\n                <Tab.Panel>\r\n                    <DeliveryPolicySection currentPlan={currentPlan} onChange={onChange} />\r\n                </Tab.Panel>\r\n\r\n                <Tab.Panel>\r\n                    <BillingPolicySection currentPlan={currentPlan} onChange={onChange} />\r\n                </Tab.Panel>\r\n            </Tab.Panels>\r\n        </Tab>\r\n        <Button\r\n            onPointerDown={(e) => e.stopPropagation()}\r\n            onClick={(e) => {\r\n                e.stopPropagation()\r\n                onSave()\r\n            }}\r\n            {...saveButtonProps}\r\n        >Save Plan</Button>\r\n    </div>\r\n);","import { FC } from 'react';\r\nimport { Button } from 'rizzui/button';\r\nimport { PiCheckCircleBold, PiTrashBold } from 'react-icons/pi';\r\nimport { FaClock, FaGift } from 'react-icons/fa6';\r\nimport { GiTakeMyMoney } from 'react-icons/gi';\r\nimport { OneTimePlan, PlanActions } from 'app/types/product/sellingPlans';\r\n\r\nexport const OneTimePlanCard: FC<{ plan: OneTimePlan; index: number; actions: PlanActions }> = ({\r\n    plan,\r\n    index,\r\n    actions\r\n}) => (\r\n    <div className=\"p-5 border rounded-lg shadow-md bg-white flex flex-col gap-3 transition-all hover:shadow-lg w-full\">\r\n        <div className=\"flex justify-between items-center\">\r\n            <div className=\"flex items-center gap-2\">\r\n                <GiTakeMyMoney className=\"text-green-600 text-xl\" />\r\n                <h4 className=\"text-base font-semibold text-gray-900\">\r\n                    {plan.planName || \"Unnamed Plan\"}\r\n                </h4>\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"flex justify-between items-center text-sm text-gray-700\">\r\n            <div className=\"flex flex-col gap-1\">\r\n                <p>\r\n                    <FaClock className=\"inline-block text-blue-500 mr-1\" />\r\n                    <strong>Plan Type:</strong> One-time Purchase\r\n                </p>\r\n                {plan.pricingPolicyAdjustmentValue && (\r\n                    <p className=\"text-green-600 font-medium\">\r\n                        <FaGift className=\"inline-block text-yellow-500 mr-1\" />\r\n                        <strong>Discount:</strong> {plan.pricingPolicyAdjustmentValue}% \r\n                    </p>\r\n                )}\r\n            </div>\r\n        </div>\r\n\r\n        <div className=\"flex justify-end gap-2 mt-2\">\r\n            <Button variant={\"outline\" as any} size=\"sm\" onClick={() => actions.onEdit(index)}>\r\n                <PiCheckCircleBold className=\"mr-1 text-blue-500\" /> Edit\r\n            </Button>\r\n            <Button variant={\"outline\" as any} size=\"sm\" color=\"danger\" onClick={() => actions.onDelete(index)}>\r\n                <PiTrashBold className=\"mr-1 text-red-500\" /> Delete\r\n            </Button>\r\n        </div>\r\n    </div>\r\n);","import { CreatePlanPageState } from \"app/types/product/sellingPlans\";\r\nimport { atom } from \"jotai\";\r\n\r\nexport const plansAtom = atom<any[]>([]); // Stores multiple plans in an array\r\n\r\nexport const prepaidPlanAtom = atom<any>([]);\r\n\r\nexport const payPerShipmentPlanAtom = atom<any>([]);\r\n\r\nexport const prePaidSubscriptionsGroupAtom = atom<any>([]);\r\n\r\nexport const createPlanPageStates = atom<CreatePlanPageState>();","import { useState, useEffect, useCallback } from 'react';\r\nimport { useAtom } from 'jotai';\r\nimport { productAtom } from 'app/states/productAtom';\r\nimport { useSearchParams } from '@remix-run/react';\r\nimport toast from 'react-hot-toast';\r\nimport { defaultOneTimePlan } from '../PayPerShipment/default.plan';\r\nimport { PlanHeader } from './PlanHeader';\r\nimport { OneTimePlanForm } from './OneTimePlanForm';\r\nimport { OneTimePlanCard } from './OneTimePlanCard';\r\nimport { Loader } from 'rizzui/loader';\r\nimport { createPlanPageStates } from 'app/states/plansAtom';\r\n\r\nconst OneTimePlanSettings = () => {\r\n    const [currentPlan, setCurrentPlan] = useState(defaultOneTimePlan);\r\n    const [isPlanEnabled, setIsPlanEnabled] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [showFormOnetime, setShowFormOnetime] = useState(false);\r\n    const [product] = useAtom(productAtom);\r\n    const [createPlanPageState, setCreatePlanPageState] = useAtom(createPlanPageStates);\r\n\r\n\r\n    useEffect(() => {\r\n        if (product) {\r\n            defaultOneTimePlan.planName = product.title;\r\n        }\r\n    }, [product]);\r\n\r\n    useEffect(() => {\r\n        if (createPlanPageState?.oneTimeGroup?.groupId) {\r\n            const alreadyExistPlan = createPlanPageState.oneTimeGroup.sellingPlansToCreate[0]\r\n            setCurrentPlan(alreadyExistPlan);\r\n\r\n            setIsPlanEnabled(true);\r\n            setShowFormOnetime(true);\r\n        }\r\n    }, [])\r\n\r\n    const handleChange = useCallback(<T extends keyof typeof defaultOneTimePlan>(field: T, value: any) => {\r\n        setCurrentPlan((prevPlan) => ({\r\n            ...prevPlan,\r\n            [field]: value,\r\n        }));\r\n\r\n\r\n\r\n        setShowFormOnetime(true);\r\n    }, []);\r\n\r\n    const handleSavePlan = async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            toast.success(\"One-time plan saved successfully!\");\r\n            setIsPlanEnabled(true); // Enable the plan after saving\r\n            setShowFormOnetime(false); // Hide the form\r\n\r\n            // Store updated plans in sellingPlansToUpdate\r\n            setCreatePlanPageState((prevState: any) => ({\r\n                ...prevState,\r\n                oneTimeGroup: {\r\n                    groupName: currentPlan.planName,\r\n                    sellingPlansToCreate: [currentPlan],\r\n                },\r\n            }));\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleTogglePlan = useCallback((checked: boolean) => {\r\n        setIsPlanEnabled(checked);\r\n        setShowFormOnetime(checked);\r\n    }, []);\r\n\r\n    const handleEditPlan = useCallback(() => {\r\n        setShowFormOnetime(true);\r\n    }, []);\r\n\r\n    const handleDeletePlan = useCallback(() => {\r\n        setIsPlanEnabled(false);\r\n        setShowFormOnetime(false);\r\n        setCurrentPlan(defaultOneTimePlan);\r\n        toast.success(\"Plan deleted successfully!\");\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (showFormOnetime) {\r\n            setTimeout(() => {\r\n                window.scrollTo({ top: document.body.scrollHeight, behavior: \"smooth\" });\r\n            }, 100);\r\n        }\r\n    }, [showFormOnetime]);\r\n\r\n    return (\r\n        <div className=\"border border-muted rounded-[10px] p-3 relative\">\r\n\r\n            {isLoading && (\r\n                <div className=\"absolute inset-0 flex items-center justify-center bg-white/80\">\r\n                    <Loader variant=\"spinner\" />\r\n                </div>\r\n            )}\r\n\r\n            <PlanHeader isPlanEnabled={isPlanEnabled} onToggle={handleTogglePlan} />\r\n\r\n            {isPlanEnabled && (\r\n                showFormOnetime ? (\r\n                    <OneTimePlanForm\r\n                        currentPlan={currentPlan}\r\n                        onChange={handleChange}\r\n                        onSave={handleSavePlan}\r\n                        productTitle={product?.title || \"\"}\r\n                    />\r\n                ) : (\r\n                    <div className=\"mt-6\">\r\n                        <OneTimePlanCard\r\n                            plan={currentPlan}\r\n                            index={0}\r\n                            actions={{\r\n                                onEdit: handleEditPlan,\r\n                                onDelete: handleDeletePlan,\r\n                                onDuplicate: () => { },\r\n                            }}\r\n                        />\r\n                    </div>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OneTimePlanSettings;\r\n","import { ShopObject } from \"app/types/shop/shopObject\";\r\nimport { atom } from \"jotai\";\r\n\r\n// Define a product state atom\r\nexport const shopObject = atom<ShopObject | any>(null);\r\n\r\n","// components/PlanCard.tsx\r\nimport { FC, useMemo } from 'react';\r\nimport { Button } from 'rizzui/button';\r\nimport { PiCheckCircleBold, PiPlusCircleBold, PiTrashBold } from 'react-icons/pi';\r\nimport { FaClock, FaGift, FaShip } from 'react-icons/fa6';\r\nimport { GiTakeMyMoney } from 'react-icons/gi';\r\nimport { MdSync } from 'react-icons/md';\r\nimport { PayPerShipmentSellingPlan, Plan, PlanActions } from 'app/types/product/sellingPlans';\r\nimport { Text } from 'rizzui/typography';\r\nimport { formatPrice } from 'app/packages/utils/shopifyIdUtils';\r\nimport { useAtom } from 'jotai';\r\nimport { shopObject } from 'app/states/shopAtom';\r\n\r\nexport const PlanCard: FC<{\r\n    plan: PayPerShipmentSellingPlan;\r\n    index: number;\r\n    actions: PlanActions,\r\n    prePaidFrom?: boolean\r\n}> = ({\r\n    plan,\r\n    index,\r\n    actions,\r\n    prePaidFrom\r\n}) => {\r\n        const {\r\n            billingRecurringPolicyInterval,\r\n            billingRecurringPolicyIntervalCount,\r\n            pricingPolicyEnable,\r\n            pricingPolicyAdjustmentValue,\r\n            pricingPolicyAfterCycleAdjustmentType,\r\n            planName,\r\n            deliveryRecurringPolicyIntervalCount,\r\n            deliveryRecurringPolicyInterval,\r\n            pricingPolicyAdjustmentType\r\n        } = plan\r\n\r\n        const [shop] = useAtom(shopObject);\r\n        const { currencyFormats: { moneyWithCurrencyFormat } } = shop;\r\n\r\n        const formattedPrice = useMemo(() => {\r\n            if (pricingPolicyAdjustmentType === \"FIXED_AMOUNT\" || pricingPolicyAdjustmentType === \"PRICE\") {\r\n                return formatPrice(pricingPolicyAdjustmentValue, moneyWithCurrencyFormat);\r\n            }\r\n            return null;\r\n        }, [pricingPolicyAdjustmentValue, pricingPolicyAdjustmentType, moneyWithCurrencyFormat]);\r\n\r\n        return (\r\n            <div className=\"p-5 border rounded-lg shadow-md bg-white flex flex-col gap-3 transition-all hover:shadow-lg w-full\">\r\n                <div className=\"flex justify-between items-center\">\r\n                    <div className=\"flex items-center gap-2\">\r\n                        <GiTakeMyMoney className=\"text-green-600 text-xl\" />\r\n                        <h4 className=\"text-base font-semibold text-gray-900\">\r\n                            {planName || \"Unnamed Plan\"}\r\n                        </h4>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"flex justify-between items-center text-sm text-gray-700\">\r\n                    <div className=\"flex flex-col gap-1\">\r\n                        <div className='capitalize flex items-center'>\r\n                            <FaClock className=\"inline-block text-blue-500 mr-2\" />\r\n                            <strong>Frequency:</strong>\r\n                            <Text className='capitalize ms-2'>\r\n                                {billingRecurringPolicyIntervalCount} {billingRecurringPolicyInterval}\r\n                            </Text>\r\n                        </div>\r\n                        {\r\n                            prePaidFrom &&\r\n                            <div className='capitalize flex items-center'>\r\n                                <FaShip className=\"inline-block text-blue-500 mr-2\" />\r\n                                <strong>Delivery Every:</strong>\r\n                                <Text className='capitalize ms-2'>\r\n                                    {deliveryRecurringPolicyIntervalCount} {deliveryRecurringPolicyInterval}\r\n                                </Text>\r\n                            </div>\r\n                        }\r\n                        {pricingPolicyEnable && (\r\n                            <>\r\n                                {pricingPolicyAdjustmentType === \"PERCENTAGE\" && (\r\n                                    <p className=\"text-green-600 font-medium flex items-center\">\r\n                                        <FaGift className=\"inline-block text-yellow-500 mr-2\" />\r\n                                        <strong>Discount:</strong> {pricingPolicyAdjustmentValue}%\r\n                                    </p>\r\n                                )}\r\n\r\n                                {formattedPrice && (\r\n                                    <div className=\"text-green-600 font-medium flex items-center\">\r\n                                        <FaGift className=\"inline-block text-yellow-500 mr-2\" />\r\n                                        <strong>\r\n                                            {pricingPolicyAdjustmentType === \"FIXED_AMOUNT\" || pricingPolicyAdjustmentType === \"PERCENTAGE\"\r\n                                                ? \"Discount:\"\r\n                                                : \"Price:\"}\r\n                                        </strong>\r\n                                        <Text className='capitaliz'>\r\n                                            {formattedPrice}\r\n                                        </Text>\r\n                                    </div>\r\n                                )}\r\n                            </>\r\n                        )}\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"flex justify-end gap-2 mt-2\">\r\n                    <Button variant={\"outline\" as any} size=\"sm\" onClick={() => actions.onEdit(index)}>\r\n                        <PiCheckCircleBold className=\"mr-1 text-blue-500\" /> Edit\r\n                    </Button>\r\n                    <Button variant={\"outline\" as any} size=\"sm\" onClick={() => actions.onDuplicate(index)}>\r\n                        <PiPlusCircleBold className=\"mr-1 text-green-500\" /> Duplicate\r\n                    </Button>\r\n                    <Button variant={\"outline\" as any} size=\"sm\" color=\"danger\" onClick={() => actions.onDelete(index)}>\r\n                        <PiTrashBold className=\"mr-1 text-red-500\" /> Delete\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }","import { PayPerShipmentSellingPlan, Plan } from 'app/types/product/sellingPlans'\r\nimport { Switch } from 'rizzui/switch'\r\nimport { NumberInput } from '../NumberInput'\r\nimport { Select } from 'rizzui/select'\r\nimport { PricingPolicyAdjustmentTypeOptions } from '../SellingPlanFormUtils'\r\n\r\n\r\nconst PricingPolicyRecurring = ({\r\n    handleChange,\r\n    plan\r\n}: {\r\n    handleChange: <T extends keyof PayPerShipmentSellingPlan>(field: T, value: PayPerShipmentSellingPlan[T]) => void,\r\n    plan: PayPerShipmentSellingPlan\r\n}) => {\r\n   const {\r\n        pricingPolicyEnable,\r\n        pricingPolicyAdjustmentValue,\r\n        pricingPolicyAdjustmentType,\r\n        pricingPolicyAfterCycleEnable,\r\n        pricingPolicyAfterCycle,\r\n        pricingPolicyAfterCycleAdjustmentValue,\r\n        pricingPolicyAfterCycleAdjustmentType\r\n\r\n    } = plan\r\n    return (\r\n        <div className=\"space-y-4\">\r\n            <Switch\r\n                checked={pricingPolicyEnable}\r\n                onChange={() => handleChange('pricingPolicyEnable', !pricingPolicyEnable)}\r\n                label=\"Offer a discount on this frequency\"\r\n            />\r\n            {pricingPolicyEnable && (\r\n                <>\r\n                    <div className=\"flex gap-4\">\r\n                        <div className=\"flex-1\">\r\n                            <NumberInput\r\n                                label=\"Discount Value\"\r\n                                value={pricingPolicyAdjustmentValue}\r\n                                onChange={(v) => handleChange('pricingPolicyAdjustmentValue', v)}\r\n                            />\r\n                        </div>\r\n                        <div className=\"flex-1\">\r\n                            <Select\r\n                                value={PricingPolicyAdjustmentTypeOptions.find(opt => opt.value === pricingPolicyAdjustmentType)}\r\n                                options={PricingPolicyAdjustmentTypeOptions}\r\n                                onChange={(option: any) => option && handleChange('pricingPolicyAdjustmentType', option.value)}\r\n                                label=\"Discount Type\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <Switch\r\n                        checked={pricingPolicyAfterCycleEnable}\r\n                        onChange={() => handleChange('pricingPolicyAfterCycleEnable', !pricingPolicyAfterCycleEnable)}\r\n                        label=\"Change discount after specific number of payments\"\r\n                    />\r\n                    {pricingPolicyAfterCycleEnable && (\r\n                        <div className=\"space-y-4\">\r\n                            <NumberInput\r\n                                label=\"Change After Charges\"\r\n                                value={pricingPolicyAfterCycle}\r\n                                onChange={(v) => handleChange('pricingPolicyAfterCycle', v)}\r\n                            />\r\n                            <div className=\"flex gap-4\">\r\n                                <div className=\"flex-1\">\r\n                                    <NumberInput\r\n                                        label=\"New Discount Value\"\r\n                                        value={pricingPolicyAfterCycleAdjustmentValue}\r\n                                        onChange={(v) => handleChange('pricingPolicyAfterCycleAdjustmentValue', v)}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"flex-1\">\r\n                                    <Select\r\n                                        value={PricingPolicyAdjustmentTypeOptions.find(opt => opt.value === pricingPolicyAfterCycleAdjustmentType)}\r\n                                        options={PricingPolicyAdjustmentTypeOptions}\r\n                                        onChange={(option: any) => option && handleChange('pricingPolicyAfterCycleAdjustmentType', option.value)}\r\n                                        label=\"New Discount Type\"\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PricingPolicyRecurring","import { PayPerShipmentSellingPlan } from 'app/types/product/sellingPlans'\r\nimport { Select } from 'rizzui/select'\r\nimport { inventoryPolicyOptions, inventoryReserveOptions } from '../SellingPlanFormUtils'\r\nimport { Switch } from 'rizzui/switch'\r\n\r\nconst InventoryPolicyRecurring = ({\r\n    handleChange,\r\n    plan\r\n}: {\r\n    handleChange: <T extends keyof PayPerShipmentSellingPlan>(field: T, value: PayPerShipmentSellingPlan[T]) => void,\r\n    plan: PayPerShipmentSellingPlan\r\n}) => {\r\n\r\n    const {\r\n        inventoryPolicyEnable,\r\n        inventoryPolicyReserve\r\n    } = plan\r\n\r\n    return (\r\n        <div className=\"space-y-4\">\r\n            <Switch\r\n                checked={inventoryPolicyEnable}\r\n                onChange={() => handleChange('inventoryPolicyEnable', !inventoryPolicyEnable)}\r\n                label=\"Set Inventory Policy\"\r\n            />\r\n            {\r\n                inventoryPolicyEnable && (\r\n                    <Select\r\n                        value={inventoryReserveOptions.find(opt => opt.value === inventoryPolicyReserve)}\r\n                        options={inventoryReserveOptions}\r\n                        onChange={(option: any) => option && handleChange('inventoryPolicyReserve', option.value)}\r\n                        label=\"When to reserve inventory for the order.\"\r\n                    />\r\n                )\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InventoryPolicyRecurring","const getDays = (interval: string | null, count: number): number => {\r\n    switch (interval) {\r\n        case 'DAY': return count;\r\n        case 'WEEK': return count * 7;\r\n        case 'MONTH': return count * 30;\r\n        case 'YEAR': return count * 365;\r\n        default: return 0;\r\n    }\r\n};\r\n\r\n\r\nconst getMaxDeliveryCount = (billingDays: number, deliveryUnit: string | null): number => {\r\n    if (!deliveryUnit) return 0;\r\n    const daysPerUnit = {\r\n        DAY: 1,\r\n        WEEK: 7,\r\n        MONTH: 30,\r\n        YEAR: 365,\r\n    }[deliveryUnit] || 1;\r\n\r\n    return Math.floor((billingDays - 1) / daysPerUnit);\r\n};\r\n\r\nconst validatePlanBeforeApiCall = (plan: any) => {\r\n    const errors: string[] = [];\r\n\r\n    \r\n\r\n    return errors;\r\n};\r\n\r\n\r\nconst sellingPlanValidators = {\r\n    getDays,\r\n    getMaxDeliveryCount,\r\n    validatePlanBeforeApiCall\r\n}\r\nexport default sellingPlanValidators","import { Text } from \"rizzui/typography\";\r\nimport { anchorTypeOptions, dayOptions, deliveryPolicyFulfillmentTriggerOptions, monthDayOptions, preAnchorBehaviorOptions, SelectOption, unitOptions, yearlyRenewalMonthOptions } from \"../SellingPlanFormUtils\";\r\nimport { Select } from \"rizzui/select\";\r\nimport { DatePicker } from \"app/packages/ui/datepicker\";\r\nimport { NumberInput } from \"../NumberInput\";\r\nimport { PayPerShipmentSellingPlan, PrePaidSubscriptionSellingPlan } from \"app/types/product/sellingPlans\";\r\nimport sellingPlanValidators from \"app/shared/products/create-plans/sellingPlanValidators\";\r\n\r\n/** Renders the delivery policy section with trigger options and conditional fields. */\r\nexport const DeliveryRecurringPolicySection = ({\r\n    currentPlan,\r\n    onChange,\r\n    prePaidFrom = false\r\n}: {\r\n    currentPlan: PayPerShipmentSellingPlan,\r\n    onChange: any;\r\n    prePaidFrom?: boolean\r\n}) => {\r\n    const {\r\n        deliveryRecurringPolicyAnchorsCutoffDay,\r\n        deliveryRecurringPolicyAnchorsDay,\r\n        deliveryRecurringPolicyAnchorsMonth,\r\n        deliveryRecurringPolicyAnchorsType,\r\n        deliveryRecurringPolicyCutoff,\r\n        deliveryRecurringPolicyInterval,\r\n        deliveryRecurringPolicyIntervalCount,\r\n        billingRecurringPolicyInterval,\r\n        billingRecurringPolicyIntervalCount,\r\n        deliveryRecurringPreAnchorBehavior,\r\n\r\n    } = currentPlan;\r\n\r\n    const billingDays = sellingPlanValidators.getDays(\r\n        billingRecurringPolicyInterval,\r\n        billingRecurringPolicyIntervalCount || 1\r\n    );\r\n\r\n    const deliveryDays = sellingPlanValidators.getDays(\r\n        deliveryRecurringPolicyInterval,\r\n        deliveryRecurringPolicyIntervalCount || 0\r\n    );\r\n\r\n    const filteredUnitOptions = unitOptions.map(opt => ({\r\n        ...opt,\r\n        disabled: sellingPlanValidators.getMaxDeliveryCount(billingDays, opt.value) < 1\r\n    }));\r\n\r\n    const maxDeliveryCount = sellingPlanValidators.getMaxDeliveryCount(billingDays, deliveryRecurringPolicyInterval);\r\n\r\n    return (\r\n        <div className=\"pt-3\">\r\n            {\r\n                prePaidFrom && (\r\n                    <div className=\"flex w-full gap-4 mb-3 flex-wrap\">\r\n                        <div className=\"w-[48%]\">\r\n                            <NumberInput\r\n                                label=\"Delivery Frequency\"\r\n                                value={deliveryRecurringPolicyIntervalCount ?? 0}\r\n                                onChange={(v) => onChange('deliveryRecurringPolicyIntervalCount', v)}\r\n                                min={1}\r\n                                max={maxDeliveryCount}\r\n                            />\r\n                        </div>\r\n                        <div className=\"w-[48%]\">\r\n                            <Select<SelectOption<Exclude<PrePaidSubscriptionSellingPlan['deliveryRecurringPolicyInterval'], null>>>\r\n                                value={unitOptions.find((opt: any) => opt.value === deliveryRecurringPolicyInterval)}\r\n                                options={unitOptions}\r\n                                onChange={(option: any) => {\r\n                                    if (option) {\r\n                                        onChange('deliveryRecurringPolicyInterval', option.value);\r\n                                    }\r\n                                }}\r\n                                label=\"Unit\"\r\n                            />\r\n                        </div>\r\n\r\n                        {deliveryDays >= billingDays && (\r\n                            <Text className=\"text-red-500 mt-2 w-[100%]\">\r\n                                Delivery interval must be shorter than the billing interval\r\n                            </Text>\r\n                        )}\r\n                    </div>\r\n                )\r\n            }\r\n\r\n            <div className=\"flex-1\">\r\n                <Select\r\n                    value={preAnchorBehaviorOptions.find(opt => opt.value === deliveryRecurringPreAnchorBehavior)}\r\n                    options={preAnchorBehaviorOptions}\r\n                    onChange={(option: any) => option && onChange('deliveryRecurringPreAnchorBehavior', option.value)}\r\n                    label=\"The pre-anchor behavior.\"\r\n                />\r\n            </div>\r\n\r\n            <div className=\"flex flex-col gap-4 mt-3\">\r\n                <div className=\"flex-1\">\r\n                    <Select\r\n                        value={anchorTypeOptions.find(opt => opt.value === deliveryRecurringPolicyAnchorsType)}\r\n                        options={anchorTypeOptions}\r\n                        onChange={(option: any) => option && onChange('deliveryRecurringPolicyAnchorsType', option.value)}\r\n                        label=\"When Should Delivery Be Scheduled?\"\r\n                    />\r\n                </div>\r\n\r\n                {deliveryRecurringPolicyAnchorsType == 'WEEKDAY' && (\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                        <div className=\"\">\r\n                            <Select\r\n                                value={dayOptions.find(opt => opt.value === deliveryRecurringPolicyAnchorsDay)}\r\n                                options={dayOptions}\r\n                                onChange={(option: any) => option && onChange('deliveryRecurringPolicyAnchorsDay', option.value)}\r\n                                label=\"Select Day\"\r\n                            />\r\n                        </div>\r\n                        <div className=\"\">\r\n                            <Select\r\n                                value={dayOptions.find(opt => opt.value === deliveryRecurringPolicyAnchorsCutoffDay)}\r\n                                options={dayOptions}\r\n                                onChange={(option: any) => option && onChange('deliveryRecurringPolicyAnchorsCutoffDay', option.value)}\r\n                                label=\"Cutfoff Time Interval\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {deliveryRecurringPolicyAnchorsType === \"MONTHDAY\" && (\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                        <div>\r\n                            <Select\r\n                                value={monthDayOptions.find(opt => opt.value === deliveryRecurringPolicyAnchorsMonth)}\r\n                                options={monthDayOptions}\r\n                                onChange={(option: any) => option && onChange('deliveryRecurringPolicyAnchorsMonth', option.value)}\r\n                                label=\"Select Month\"\r\n                            />\r\n                        </div>\r\n                        <div>\r\n                            <Select\r\n                                value={monthDayOptions.find(opt => opt.value === deliveryRecurringPolicyAnchorsCutoffDay)}\r\n                                options={monthDayOptions}\r\n                                onChange={(option: any) => option && onChange('deliveryRecurringPolicyAnchorsCutoffDay', option.value)}\r\n                                label=\"Cutfoff Time Interval\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n                {deliveryRecurringPolicyAnchorsType == 'YEARDAY' && (\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                        <Select\r\n                            value={yearlyRenewalMonthOptions.find(opt => opt.value === deliveryRecurringPolicyAnchorsDay)}\r\n                            options={yearlyRenewalMonthOptions}\r\n                            onChange={(option: any) => option && onChange('deliveryRecurringPolicyAnchorsDay', option.value)}\r\n                            label=\"Select Day\"\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"flex flex-col gap-4 mt-3\">\r\n                    <div className=\"flex-1\">\r\n                        <Select\r\n                            value={preAnchorBehaviorOptions.find(opt => opt.value === deliveryRecurringPreAnchorBehavior)}\r\n                            options={preAnchorBehaviorOptions}\r\n                            onChange={(option: any) => option && onChange('deliveryRecurringPreAnchorBehavior', option.value)}\r\n                            label=\"The pre-anchor behavior.\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import { PayPerShipmentSellingPlan } from 'app/types/product/sellingPlans'\r\nimport { DeliveryPolicySection } from './DeliveryPolicySection'\r\nimport { Title } from 'rizzui/typography'\r\nimport { DeliveryRecurringPolicySection } from './DeliveryPolicyRecurringSection'\r\nimport { Accordion } from 'rizzui/accordion';\r\nimport { FaChevronDown } from 'react-icons/fa6';\r\n\r\nconst accordionData = [\r\n    {\r\n        title: \"First Order Delivery Policy\",\r\n        component: DeliveryPolicySection,\r\n    },\r\n    {\r\n        title: \"Recurring Delivery Policy\",\r\n        component: DeliveryRecurringPolicySection,\r\n    },\r\n];\r\n\r\nconst DeliveryPolicyRecurring = ({\r\n    handleChange,\r\n    plan,\r\n    prePaidFrom = false\r\n}: {\r\n    handleChange: <T extends keyof PayPerShipmentSellingPlan>(field: T, value: PayPerShipmentSellingPlan[T]) => void,\r\n    plan: PayPerShipmentSellingPlan,\r\n    prePaidFrom?: boolean\r\n}) => {\r\n\r\n    return (\r\n        <div className=''>\r\n            <DeliveryRecurringPolicySection currentPlan={plan} onChange={handleChange} prePaidFrom={prePaidFrom} />\r\n            {/* {accordionData.map(({ title, component: Component }) => (\r\n                <Accordion key={title} className=\"mx-8 border-b last-of-type:border-b-0\">\r\n                    <Accordion.Header>\r\n                        {({ open }) => (\r\n                            <div className=\"flex w-full cursor-pointer items-center justify-between py-5 text-md \">\r\n                                {title}\r\n                                <FaChevronDown\r\n                                    className={`h-3 w-3 -rotate-90 transform transition-transform duration-300 ${open ? \"rotate-0\" : \"\"}`}\r\n                                />\r\n                            </div>\r\n                        )}\r\n                    </Accordion.Header>\r\n                    <Accordion.Body className=\"mb-7\">\r\n                        <Component currentPlan={plan} onChange={handleChange} />\r\n                    </Accordion.Body>\r\n                </Accordion>\r\n            ))} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DeliveryPolicyRecurring","import { Select } from \"rizzui/select\";\r\nimport { Switch } from \"rizzui/switch\";\r\nimport { Text } from \"rizzui/typography\";\r\nimport { anchorTypeOptions, checkoutChargeTypeOptions, dayOptions, monthDayOptions, remainingBalanceChargeTriggerOptions, yearlyRenewalMonthOptions } from \"../SellingPlanFormUtils\";\r\nimport { NumberInput } from \"../NumberInput\";\r\nimport { DatePicker } from \"app/packages/ui/datepicker\";\r\nimport { SelectOption, unitOptions } from '../SellingPlanFormUtils';\r\nimport { PayPerShipmentSellingPlan, SellingPlanInterval } from \"app/types/product/sellingPlans\";\r\nimport { useEffect } from \"react\";\r\n\r\n/** Renders the billing policy section with conditional fields based on selections. */\r\nexport const BillingRecurringPolicySection = ({\r\n    currentPlan,\r\n    onChange\r\n}: {\r\n    currentPlan: PayPerShipmentSellingPlan,\r\n    onChange: any;\r\n}) => {\r\n    const {\r\n        billingRecurringPolicyEnable,\r\n        billingRecurringPolicyInterval,\r\n        billingRecurringPolicyIntervalCount,\r\n        billingRecurringPolicyMinCycles,\r\n        billingRecurringPolicyMaxCycles,\r\n        billingRecurringPolicyAnchorsType,\r\n        billingRecurringPolicyAnchorsDay,\r\n        billingRecurringPolicyAnchorsCutoffDay,\r\n        billingRecurringPolicyAnchorsMonth\r\n    } = currentPlan;\r\n\r\n    useEffect(() => {\r\n        const defaultPlanName = `${billingRecurringPolicyIntervalCount} ${billingRecurringPolicyInterval.toLowerCase()} Subscription`;\r\n        onChange('planName', defaultPlanName);\r\n    }, [billingRecurringPolicyIntervalCount, billingRecurringPolicyInterval]);\r\n\r\n    return (\r\n        <div className=\"pt-3 border-t-2\">\r\n            <div className=\"flex gap-4 mt-3 flex-wrap\">\r\n                <div className=\"flex w-full gap-4\">\r\n                    <div className=\"w-[50%]\">\r\n                        <NumberInput\r\n                            label=\"Billing Frequency\"\r\n                            value={billingRecurringPolicyIntervalCount}\r\n                            onChange={(v) => onChange('billingRecurringPolicyIntervalCount', v)}\r\n                        />\r\n                    </div>\r\n                    <div className=\"w-[50%]\">\r\n                        <Select<SelectOption<PayPerShipmentSellingPlan['billingRecurringPolicyInterval']>>\r\n                            value={unitOptions.find((opt: any) => opt.value === billingRecurringPolicyInterval)}\r\n                            options={unitOptions}\r\n                            onChange={(option: any) => {\r\n                                if (option) {\r\n                                    onChange('billingRecurringPolicyInterval', option.value);\r\n                                }\r\n                            }}\r\n                            label=\"Unit\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"flex w-full gap-4\">\r\n                    <div className=\"flex-1 w-[50%]\">\r\n                        <NumberInput\r\n                            label=\"Billing Policy Min Cycles\"\r\n                            value={billingRecurringPolicyMinCycles ?? 0}\r\n                            onChange={(v) => onChange('billingRecurringPolicyMinCycles', v)}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"flex-1 w-[50%]\">\r\n                        <NumberInput\r\n                            label=\"Billing Policy Max Cycles\"\r\n                            value={billingRecurringPolicyMaxCycles ?? 0}\r\n                            onChange={(v) => onChange('billingRecurringPolicyMaxCycles', v)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"flex flex-col gap-4 mt-3 w-full\">\r\n                    <div className=\"flex-1\">\r\n                        <Select\r\n                            value={anchorTypeOptions.find(opt => opt.value === billingRecurringPolicyAnchorsType)}\r\n                            options={anchorTypeOptions}\r\n                            onChange={(option: any) => option && onChange('billingRecurringPolicyAnchorsType', option.value)}\r\n                            label=\"When Should Delivery Be Scheduled?\"\r\n                        />\r\n                    </div>\r\n\r\n                    {billingRecurringPolicyAnchorsType == 'WEEKDAY' && (\r\n                        <div className=\"grid grid-cols-2 gap-4\">\r\n                            <div className=\"\">\r\n                                <Select\r\n                                    value={dayOptions.find(opt => opt.value === billingRecurringPolicyAnchorsDay)}\r\n                                    options={dayOptions}\r\n                                    onChange={(option: any) => option && onChange('billingRecurringPolicyAnchorsDay', option.value)}\r\n                                    label=\"Select Day\"\r\n                                />\r\n                            </div>\r\n                            <div className=\"\">\r\n                                <Select\r\n                                    value={dayOptions.find(opt => opt.value === billingRecurringPolicyAnchorsCutoffDay)}\r\n                                    options={dayOptions}\r\n                                    onChange={(option: any) => option && onChange('billingRecurringPolicyAnchorsCutoffDay', option.value)}\r\n                                    label=\"Cutfoff Time Interval\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {billingRecurringPolicyAnchorsType === \"MONTHDAY\" && (\r\n                        <div className=\"grid grid-cols-2 gap-4\">\r\n                            <div>\r\n                                <Select\r\n                                    value={monthDayOptions.find(opt => opt.value === billingRecurringPolicyAnchorsMonth)}\r\n                                    options={monthDayOptions}\r\n                                    onChange={(option: any) => option && onChange('deliveryRecurringPolicyAnchorsMonth', option.value)}\r\n                                    label=\"Select Month\"\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <Select\r\n                                    value={monthDayOptions.find(opt => opt.value === billingRecurringPolicyAnchorsCutoffDay)}\r\n                                    options={monthDayOptions}\r\n                                    onChange={(option: any) => option && onChange('billingRecurringPolicyAnchorsCutoffDay', option.value)}\r\n                                    label=\"Cutfoff Time Interval\"\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {billingRecurringPolicyAnchorsType == 'YEARDAY' && (\r\n                        <div className=\"grid grid-cols-2 gap-4\">\r\n                            <Select\r\n                                value={yearlyRenewalMonthOptions.find(opt => opt.value === billingRecurringPolicyAnchorsDay)}\r\n                                options={yearlyRenewalMonthOptions}\r\n                                onChange={(option: any) => option && onChange('billingRecurringPolicyAnchorsDay', option.value)}\r\n                                label=\"Select Day\"\r\n                            />\r\n                        </div>\r\n                    )}\r\n\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};","import { PayPerShipmentSellingPlan } from 'app/types/product/sellingPlans'\r\nimport { DeliveryRecurringPolicySection } from './DeliveryPolicyRecurringSection'\r\nimport { Accordion } from 'rizzui/accordion';\r\nimport { FaChevronDown } from 'react-icons/fa6';\r\nimport { BillingPolicySection } from './BillingPolicySection';\r\nimport { BillingRecurringPolicySection } from './BillingRecurringPolicySection';\r\n\r\nconst accordionData = [\r\n    {\r\n        title: \"First Order Delivery Policy\",\r\n        component: BillingPolicySection,\r\n    },\r\n    {\r\n        title: \"Recurring Order Delivery Policy\",\r\n        component: BillingRecurringPolicySection,\r\n    }\r\n];\r\n\r\nconst BillingPolicyRecurring = ({\r\n    handleChange,\r\n    plan\r\n}: {\r\n    handleChange: <T extends keyof PayPerShipmentSellingPlan>(field: T, value: PayPerShipmentSellingPlan[T]) => void,\r\n    plan: PayPerShipmentSellingPlan\r\n}) => {\r\n\r\n    return (\r\n        <div>\r\n             <BillingRecurringPolicySection currentPlan={plan} onChange={handleChange} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BillingPolicyRecurring","import QuillEditor from 'app/packages/ui/quill-editor'\r\nimport { PayPerShipmentSellingPlan, Plan } from 'app/types/product/sellingPlans'\r\nimport { useEffect, useState, useRef } from 'react'\r\nimport { Input } from 'rizzui/input'\r\nimport { Switch } from 'rizzui/switch'\r\n\r\nconst DisplayContentsTab = ({\r\n    handleChange,\r\n    plan,\r\n    prePaidFrom\r\n}: {\r\n    handleChange: <T extends keyof PayPerShipmentSellingPlan>(\r\n        field: T,\r\n        value: PayPerShipmentSellingPlan[T]\r\n    ) => void,\r\n    plan: PayPerShipmentSellingPlan\r\n    prePaidFrom: boolean\r\n}) => {\r\n    const {\r\n        billingRecurringPolicyInterval,\r\n        billingRecurringPolicyIntervalCount,\r\n        pricingPolicyEnable,\r\n        pricingPolicyAdjustmentValue,\r\n        pricingPolicyAfterCycleAdjustmentType,\r\n        planName,\r\n        showDescription,\r\n        descriptionContent\r\n    } = plan;\r\n\r\n    const [planNameState, setPlanName] = useState<string>(plan.planName || '');\r\n    const [isUserEdited, setIsUserEdited] = useState(false);\r\n    const isUserEditedRef = useRef(isUserEdited);\r\n\r\n    // Synchronize ref with state\r\n    useEffect(() => {\r\n        isUserEditedRef.current = isUserEdited;\r\n    }, [isUserEdited]);\r\n\r\n    // Reset state when plan changes\r\n    useEffect(() => {\r\n        setPlanName(plan.planName || '');\r\n        setIsUserEdited(false);\r\n        isUserEditedRef.current = false;\r\n    }, [plan]); // Consider using a specific identifier if available\r\n\r\n    // Update plan name when interval/count changes and not edited\r\n    useEffect(() => {\r\n        if (!isUserEditedRef.current) {\r\n            const defaultPlanName = `${billingRecurringPolicyIntervalCount} ${billingRecurringPolicyInterval.toLowerCase()} Subscription`;\r\n            if (planNameState !== defaultPlanName) {\r\n                setPlanName(defaultPlanName);\r\n                handleChange('planName', defaultPlanName);\r\n            }\r\n        }\r\n    }, [billingRecurringPolicyIntervalCount, billingRecurringPolicyInterval]);\r\n\r\n    const handlePlanNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const newValue = e.target.value;\r\n        setPlanName(newValue);\r\n        handleChange('planName', newValue);\r\n\r\n        if (!isUserEditedRef.current) {\r\n            setIsUserEdited(true);\r\n            isUserEditedRef.current = true;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"space-y-4\">\r\n                <div>\r\n                    <label className=\"block text-sm font-medium mb-2\">Plan Name</label>\r\n                    <Input\r\n                        type=\"text\"\r\n                        value={planNameState}\r\n                        onChange={handlePlanNameChange}\r\n                        className=\"w-full p-2\"\r\n                    />\r\n                </div>\r\n                <Switch\r\n                    checked={showDescription}\r\n                    onChange={() => handleChange('showDescription', !showDescription)}\r\n                    label=\"Show Description\"\r\n                />\r\n                {showDescription && (\r\n                    // <QuillEditor\r\n                    //     value={descriptionContent}\r\n                    //     onChange={(content) => handleChange('descriptionContent', content)}\r\n                    //     label=\"Description\"\r\n                    // />\r\n                    <>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default DisplayContentsTab;","// components/PlanForm.tsx\r\nimport { FC } from 'react';\r\nimport { Tab } from 'rizzui/tabs';\r\nimport { PayPerShipmentSellingPlan, Plan } from 'app/types/product/sellingPlans';\r\nimport PricingPolicyRecurring from './Policies/PricingPolicyRecurring';\r\nimport InventoryPolicyRecurring from './Policies/InventoryPolicyRecurring';\r\nimport DeliveryPolicyRecurring from './Policies/DeliveryPolicyRecurring';\r\nimport BillingPolicyRecurring from './Policies/BillingPolicyRecurring';\r\nimport DisplayContentsTab from './TabsContent/DisplayContentsTab';\r\n\r\n\r\nexport interface FormTab {\r\n  label: string;\r\n  value: string;\r\n  content: (plan: PayPerShipmentSellingPlan, handleChange: <T extends keyof PayPerShipmentSellingPlan>(field: T, value: PayPerShipmentSellingPlan[T]) => void, prePaidFrom: boolean | undefined) => JSX.Element;\r\n}\r\n\r\nconst tabs: FormTab[] = [\r\n  {\r\n    label: 'Pricing Policy',\r\n    value: 'pricing-policy',\r\n    content: (\r\n      plan,\r\n      handleChange,\r\n      prePaidFrom = false\r\n    ) => <PricingPolicyRecurring\r\n        plan={plan}\r\n        handleChange={handleChange}\r\n      />\r\n  },\r\n  {\r\n    label: 'Inventory Policy',\r\n    value: 'inventory-policy',\r\n    content: (plan,\r\n      handleChange,\r\n      prePaidFrom = false\r\n    ) => <InventoryPolicyRecurring\r\n        plan={plan}\r\n        handleChange={handleChange}\r\n      />\r\n  },\r\n  {\r\n    label: 'Billing Policy',\r\n    value: 'billing-policy',\r\n    content: (\r\n      plan,\r\n      handleChange,\r\n      prePaidFrom = false\r\n    ) => <BillingPolicyRecurring\r\n        plan={plan}\r\n        handleChange={handleChange}\r\n      />\r\n  },\r\n  {\r\n    label: 'Delivery Policy',\r\n    value: 'delivery-policy',\r\n    content: (\r\n      plan,\r\n      handleChange,\r\n      prePaidFrom = false\r\n    ) => <DeliveryPolicyRecurring\r\n        plan={plan}\r\n        handleChange={handleChange}\r\n        prePaidFrom={prePaidFrom}\r\n      />\r\n  },\r\n  {\r\n    label: 'Display Contents',\r\n    value: 'display',\r\n    content: (plan,\r\n      handleChange,\r\n      prePaidFrom = false\r\n    ) => <DisplayContentsTab\r\n        prePaidFrom={prePaidFrom}\r\n        plan={plan}\r\n        handleChange={handleChange}\r\n      />\r\n  },\r\n];\r\n\r\ninterface PlanFormProps {\r\n  plan: PayPerShipmentSellingPlan;\r\n  onChange: (updatedPlan: PayPerShipmentSellingPlan) => void;\r\n  prePaidFrom?: boolean;\r\n}\r\n\r\nexport const PlanForm: FC<PlanFormProps> = ({\r\n  plan,\r\n  onChange, \r\n  prePaidFrom\r\n}) => {\r\n  const handleChange = <T extends keyof PayPerShipmentSellingPlan>(\r\n    field: T,\r\n    value: PayPerShipmentSellingPlan[T]\r\n  ) => {\r\n    onChange({ ...plan, [field]: value });\r\n  };\r\n\r\n  return (\r\n    <Tab vertical className=\"w-full\">\r\n      <Tab.List className=\"w-[28%]\">\r\n        {tabs.map((tab) => (\r\n          <Tab.ListItem key={tab.value}>{tab.label}</Tab.ListItem>\r\n        ))}\r\n      </Tab.List>\r\n\r\n      <Tab.Panels className=\"w-full\">\r\n        {tabs.map((tab: any) => (\r\n          <Tab.Panel key={tab.value}>\r\n            {tab.content(plan, handleChange, prePaidFrom)}\r\n          </Tab.Panel>\r\n        ))}\r\n      </Tab.Panels>\r\n    </Tab>\r\n  );\r\n};","// components/ConfirmationModal.tsx\r\nimport { FC } from 'react';\r\nimport { Modal } from 'rizzui/modal';\r\nimport { Button } from 'rizzui/button';\r\n\r\ninterface ConfirmationModalProps {\r\n  isOpen: boolean;\r\n  title: string;\r\n  message: string;\r\n  ref?: any;\r\n  onConfirm: () => void;\r\n  onCancel: () => void;\r\n}\r\n\r\nexport const ConfirmationModal: FC<ConfirmationModalProps> = ({\r\n  isOpen,\r\n  title,\r\n  ref,\r\n  message,\r\n  onConfirm,\r\n  onCancel\r\n}) => {\r\n  const handleConfirm = () => {\r\n    onConfirm(); // Perform action first\r\n    onCancel(); // Close modal\r\n  };\r\n  return (\r\n    <Modal isOpen={isOpen} onClose={onCancel}>\r\n      <div className=\"p-6\">\r\n        <h3 className=\"text-lg font-semibold\">{title}</h3>\r\n        <p className=\"text-sm text-gray-600 mt-2\">{message}</p>\r\n        <div className=\"flex gap-4 mt-4\">\r\n          <Button\r\n            variant={\"outline\" as any}\r\n            color=\"secondary\"\r\n            onClick={onCancel}\r\n            onPointerDown={(e) => e.stopPropagation()}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            variant={\"solid\" as any}\r\n            color=\"danger\"\r\n            onClick={handleConfirm}\r\n            onPointerDown={(e) => e.stopPropagation()}\r\n          >\r\n            Confirm\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </Modal>\r\n  )\r\n};","import { title } from \"process\";\n\nexport const messages = {\n  passwordOneUppercase: `The Password must contain at least one uppercase character`,\n  passwordOneLowercase: `The Password must contain at least one lowercase character`,\n  passwordOneNumeric: `The password must contain at least one numerical character.`,\n  passwordRequired: 'Password is required',\n  passwordLengthMin: 'Password must be at least 6 characters',\n  passwordLengthMax: `Password can't be more than 32 characters`,\n  newPasswordRequired: 'New Password is required',\n  newPasswordLength: 'New Password must be at least 6 characters',\n  confirmPasswordRequired: 'Confirm Password is required',\n  passwordsDidNotMatch: \"Passwords don't match\",\n  nameIsRequired: 'Name is required',\n  firstNameRequired: 'First name is required',\n  phoneNumberIsRequired: 'Phone Number is required',\n  customerNameIsRequired: 'Customer name is required',\n  lastNameRequired: 'Last name is required',\n  streetIsRequired: 'Street Address is required',\n  emailIsRequired: 'Email address is required',\n  invalidEmail: 'Invalid email address',\n  roleIsRequired: 'Role is required',\n  permissionIsRequired: 'Permission is required',\n  teamIsRequired: 'New member must be assigned to a team',\n  productNameIsRequired: 'Product name is required',\n  productTypeIsRequired: 'Product type is required',\n  priceIsRequired: 'Product price is required',\n  retailPriceIsRequired: 'Retail price is required',\n  salePriceIsRequired: 'Sale price is required',\n  shippingPriceIsRequired: 'Shipping price is required',\n  cityIsRequired: 'City is required',\n  stateIsRequired: 'State is required',\n  countryIsRequired: 'Country is required',\n  addressLineOneRequired: 'Address line 1 is required',\n  zipCodeRequired: 'ZIP code is required',\n  cardHolderNameIsRequired: 'Card holder name is required',\n  cardNumberIsRequired: 'Card Number is required',\n  cardExpireIsRequired: 'Expire Date is required',\n  cvcNumberIsRequired: 'CVC Number is required',\n  catNameIsRequired: 'Category name is required',\n  slugIsRequired: 'Slug is required',\n  addressIsRequired: 'Address is required',\n  createDateIsRequired: 'Create Date is required',\n  dueDateIsRequired: 'Due Date is required',\n  statusIsRequired: 'Status is required',\n  discountIsRequired: 'Discount amount is required',\n  taxIsRequired: 'Tax amount is required',\n  itemNameIsRequired: 'Item Name is required',\n  itemDescIsRequired: 'Item Description is required',\n  itemQtyIsRequired: 'Item Quantity is required',\n  itemPriceIsRequired: 'Item Price is required',\n  fullNameIsRequired: 'Full name is required',\n  propertyTypeIsRequired: 'Property type is required',\n  placeTypeIsRequired: 'Place type is required',\n  amenitiesAreRequired: 'Amenities are required',\n  thisFieldIsRequired: 'This Field is required',\n  propertyNameIsRequired: 'Property name is required',\n  snippetNameIsRequired: 'Snippet name is required',\n  snippetDirIsRequired: 'You must have to select a snippet folder',\n  templateNameIsRequired: 'Template name is required',\n  templateDirIsRequired: 'You must have to select a template folder',\n  folderNameIsRequired: 'Folder name is required',\n  folderNameLengthMin: 'Folder name must be at least 3 letters',\n  productColorRequired: 'Product Color is Required',\n  productSizeRequired: 'Product Size is Required',\n  descriptionIsRequired: 'Description is Required',\n  locationIsRequired: 'Location is Required',\n  startDateIsRequired: 'Start Date is required',\n  startTimeIsRequired: 'Start Time is required',\n  endDateIsRequired: 'End Date is required',\n  endTimeIsRequired: 'End Time is required',\n  roleNameIsRequired: 'Role Name is Required',\n  roleNameLengthMin: 'Role name must be at least 3 letters',\n  errorSendingEmail: 'Error sending email',\n  emailSentSuccessfully: 'Your email has been sent successfully.',\n  products: {\n    filters: {\n      title: \"Products Filters\",\n      status: {\n        title: \"Status\"\n      },\n      publicationStatus: {\n        title: \"Publication Status\"\n      },\n      publishedStatus: {\n        title: \"Online Store Status\"\n      },\n      search: {\n        placeholder: \"Product title, Variant title, Product ID, Variant ID, SKU\"\n      }\n    },\n    productDetails: {\n      title: \"Product Details\",\n    },\n    subscriptionPlanTitle: 'Subscription Groups',\n    subscriptionPlanDnD: 'Drag & drop your plans into the order they should display. Existing subscribers will not be affected by any changes.',\n    sellingPlans: {\n      groupDefaultName: \"Custom Subscription Plans\",\n      mechantCode: \"billions_grid_selling_plans\"\n    },\n    createSellingPlans: {\n      basicInfo: {\n        title: \"Plan Name\",\n        description: \"For internal purpose only. Customers won't see this.\",\n        inputs: {\n          planName: {\n            title: \"Plan Name\",\n            placeHolder: \"Subscribe and save\",\n            value: \"Subscribe and save\"\n          }\n        }\n      },\n      frequency: {\n        title: \"Subscription Frequency\",\n        description: \"\",\n        inputs: {\n          internfrequencyalName: {\n            title: \"Frequency prefix (optional)\",\n            placeHolder: \"Delivery every\",\n            value: \"Delivery every\"\n          }\n        },\n        buttons:{\n          createPlanBtn:{\n            title:\"Add New Frequency Plan\"\n          }\n        },\n        noPlanText: \"No Plan created Yet\"\n      }\n    }\n  }\n};\n","import cn from \"app/packages/utils/class-names\";\n\ninterface FormGroupProps {\n  title: React.ReactNode;\n  className?: string;\n  description?: string;\n  children?: React.ReactNode;\n}\n\nexport default function FormGroup({\n  title,\n  className,\n  description,\n  children,\n}: FormGroupProps) {\n  return (\n    <div className={cn('grid gap-5 3xl:grid-cols-12', className)}>\n      {title &&\n        <div className=\"col-span-full 4xl:col-span-4\">\n          <h4 className=\"text-base font-medium\">{title}</h4>\n          {description && <p className=\"mt-2\">{description}</p>}\n        </div>\n      }\n      {children && (\n        <div className=\"col-span-full grid gap-4 2xl:grid-cols-2 4xl:col-span-8 4xl:gap-5 xl:gap-7\">\n          {children}\n        </div>\n      )}\n    </div>\n  );\n}\n","import { messages } from \"app/config/messages\";\r\nimport QuillEditor from \"app/packages/ui/quill-editor\";\r\nimport cn from \"app/packages/utils/class-names\";\r\nimport FormGroup from \"app/shared/form-group\";\r\nimport { PayPerShipmentPlanGroup } from \"app/types/product/sellingPlans\";\r\nimport { Input } from \"rizzui/input\";\r\nimport { Text } from \"rizzui/typography\";\r\n\r\nexport default function SellingPlanGroupBasicInfo({\r\n    onChange,\r\n    currentGroup\r\n}: {\r\n    onChange: <T extends keyof PayPerShipmentPlanGroup>(field: T, value: PayPerShipmentPlanGroup[T]) => void,\r\n    currentGroup: PayPerShipmentPlanGroup\r\n}) {\r\n    const basicInfo = messages.products.createSellingPlans.basicInfo;\r\n\r\n    return (\r\n        <div className=\"border border-muted rounded-[10px] p-3\">\r\n            <FormGroup title='Basic Info' description=\"\" className={cn('')}>\r\n                <div>\r\n                    <Input\r\n                        label={basicInfo.title}\r\n                        placeholder={basicInfo.inputs.planName.placeHolder}\r\n                        value={currentGroup.groupName}\r\n                        onChange={(e) => onChange('groupName', e.target.value)} // ✅ Directly updating groupName\r\n                    />\r\n                    <Text as=\"p\" className=\"text-sm text-gray-500\">{basicInfo.description}</Text>\r\n                </div>\r\n\r\n                {/* <div>\r\n                    <QuillEditor\r\n                        value={currentGroup?.descriptionContent || ''}\r\n                        onChange={(content) => onChange('descriptionContent', content)}\r\n                        label=\"Group Description\"\r\n                    />\r\n                </div> */}\r\n            </FormGroup>\r\n        </div>\r\n    );\r\n}\r\n","import { useState, useCallback } from 'react';\r\n\r\nexport const useDebounceWithLoader = (\r\n    callback: (...args: any[]) => void,\r\n    delay: number,\r\n    setLoading: (state: boolean) => void\r\n) => {\r\n    const [timer, setTimer] = useState<NodeJS.Timeout | null>(null);\r\n\r\n    return useCallback(\r\n        (...args: any[]) => {\r\n            setLoading(true);\r\n            if (timer) clearTimeout(timer);\r\n            const newTimer = setTimeout(() => {\r\n                callback(...args);\r\n                setLoading(false);\r\n            }, delay);\r\n            setTimer(newTimer);\r\n        },\r\n        [callback, delay, setLoading]\r\n    );\r\n};","import { useEffect, useState, useCallback, useRef } from 'react';\r\nimport { useAtom } from 'jotai';\r\nimport { createPlanPageStates, plansAtom } from 'app/states/plansAtom';\r\nimport { PayPerShipmentPlanGroup, PayPerShipmentSellingPlan, Plan } from 'app/types/product/sellingPlans';\r\nimport { PlanCard } from '../components/PlanCard';\r\nimport { PlanForm } from '../components/PlanForm';\r\nimport { Button } from 'rizzui/button';\r\nimport { ConfirmationModal } from '../components/ConfirmationModal';\r\nimport toast from 'react-hot-toast';\r\nimport { Text } from 'rizzui/typography';\r\nimport { defaultPayPerShipmentGroup, defaultPayPerShipmentPlan } from './default.plan';\r\nimport SellingPlanGroupBasicInfo from '../SellingPlanGroupBasicInfo';\r\nimport { Link, useSearchParams } from '@remix-run/react';\r\nimport { Loader } from 'rizzui/loader'; // Importing Loader component\r\nimport { useDebounceWithLoader } from 'app/packages/hooks/useDebounceWithLoader';\r\n\r\n\r\nconst PayPerShipment = () => {\r\n    const [plans, setPlans] = useAtom(plansAtom);\r\n    const [createPlanPageState, setCreatePlanPageState] = useAtom(createPlanPageStates);\r\n    const [editingIndex, setEditingIndex] = useState<number | null>(null);\r\n    const [deletingIndex, setDeletingIndex] = useState<number | null>(null);\r\n    const [currentPlan, setCurrentPlan] = useState<PayPerShipmentSellingPlan>(defaultPayPerShipmentPlan);\r\n    const [currentGroup, setCurrentGroup] = useState<PayPerShipmentPlanGroup>(defaultPayPerShipmentGroup);\r\n    const [showCancelModal, setShowCancelModal] = useState(false);\r\n    const [isDirty, setIsDirty] = useState(false);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const [searchParams] = useSearchParams();\r\n    const plansUpdate = searchParams.get('plansUpdate') === 'yes';\r\n    const formRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    // Debounced Plan Update with Loader\r\n    const debouncedSetPlans = useDebounceWithLoader(setPlans, 50, setIsLoading);\r\n\r\n    useEffect(() => {\r\n        console.log('createPlanPageState', createPlanPageState)\r\n        // Initialize state from createPlanPageState if URL param exists\r\n        if (plansUpdate && createPlanPageState?.payPerShipmentGroup) {\r\n            setCurrentGroup({\r\n                groupName: createPlanPageState.payPerShipmentGroup.groupName,\r\n                sellingPlansToUpdate: createPlanPageState.payPerShipmentGroup.sellingPlansToUpdate,\r\n                descriptionContent: createPlanPageState.payPerShipmentGroup.descriptionContent,\r\n                sellingPlansToCreate: []\r\n            });\r\n\r\n            if (createPlanPageState.payPerShipmentGroup.sellingPlansToUpdate) {\r\n                setPlans(createPlanPageState.payPerShipmentGroup.sellingPlansToUpdate);\r\n            }\r\n        }\r\n    }, [plansUpdate, createPlanPageState?.payPerShipmentGroup]);\r\n\r\n    const handleAddOrUpdate = () => {\r\n        if (editingIndex !== null) {\r\n            const updatedPlans = [...plans];\r\n            updatedPlans[editingIndex] = currentPlan;\r\n            debouncedSetPlans(updatedPlans);\r\n\r\n            // Store updated plans in sellingPlansToUpdate\r\n            setCreatePlanPageState((prevState: any) => ({\r\n                ...prevState,\r\n                payPerShipmentGroup: {\r\n                    ...prevState?.payPerShipmentGroup,\r\n                    sellingPlansToUpdate: updatedPlans,\r\n                },\r\n            }));\r\n\r\n            toast.success(<Text as=\"b\">Plan updated</Text>);\r\n        } else {\r\n            const isDuplicate = plans.some(\r\n                (plan) =>\r\n                    plan.orderFrequency === currentPlan.billingRecurringPolicyIntervalCount &&\r\n                    plan.frequencyUnit === currentPlan.billingRecurringPolicyInterval\r\n            );\r\n\r\n            if (isDuplicate) {\r\n                toast.error(\r\n                    <Text as=\"b\" className=\"text-red-600\">A plan already exists.</Text>\r\n                );\r\n                return;\r\n            }\r\n\r\n            const newPlans = [...plans, currentPlan];\r\n            debouncedSetPlans(newPlans);\r\n\r\n            // Store newly created plans in sellingPlansToCreate\r\n            setCreatePlanPageState((prevState: any) => ({\r\n                ...prevState,\r\n                payPerShipmentGroup: {\r\n                    ...prevState?.payPerShipmentGroup,\r\n                    sellingPlansToCreate: newPlans,\r\n                },\r\n            }));\r\n\r\n            toast.success(<Text as=\"b\">Plan added successfully!</Text>);\r\n        }\r\n\r\n        resetForm();\r\n        debouncedSetShowForm(false);\r\n    };\r\n    useEffect(() => {\r\n        // Only update if not in plansUpdate mode\r\n        if (!plansUpdate) {\r\n            setCreatePlanPageState((prevState: any) => ({\r\n                ...prevState,\r\n                payPerShipmentGroup: {\r\n                    groupName: currentGroup.groupName,\r\n                    sellingPlansToCreate: plans,\r\n                },\r\n            }));\r\n        }\r\n    }, [currentGroup, plans, setCreatePlanPageState]);\r\n\r\n    useEffect(() => {\r\n        const hasChanged = JSON.stringify(currentPlan) !== JSON.stringify(defaultPayPerShipmentPlan);\r\n        setIsDirty(hasChanged);\r\n    }, [currentPlan]);\r\n\r\n    const resetForm = () => {\r\n        setCurrentPlan(defaultPayPerShipmentPlan);\r\n        setEditingIndex(null);\r\n        setIsDirty(false);\r\n    };\r\n\r\n    const debouncedSetShowForm = useDebounceWithLoader(setShowForm, 50, setIsLoading);\r\n\r\n    const planActions = {\r\n        onEdit: (index: number) => {\r\n            setCurrentPlan(plans[index]);\r\n            setEditingIndex(index);\r\n            debouncedSetShowForm(true);\r\n        },\r\n        onDelete: (index: number) => setDeletingIndex(index),\r\n        onDuplicate: (index: number) => {\r\n            setCurrentPlan({ ...plans[index], frequencyName: `${plans[index].frequencyName}` });\r\n            setEditingIndex(null);\r\n            debouncedSetShowForm(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (showForm) {\r\n            setTimeout(() => {\r\n                window.scrollTo({ top: document.body.scrollHeight, behavior: \"smooth\" });\r\n            }, 100);\r\n        } else window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    }, [showForm])\r\n\r\n    return (\r\n        <div className=\"rounded-[10px] p-3 relative\">\r\n            <div className={`flex flex-col gap-4 ${isLoading ? 'opacity-50 pointer-events-none' : ''}`}>\r\n                {isLoading &&\r\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-white/80\">\r\n                        <Loader variant=\"spinner\" />\r\n                    </div>\r\n                }\r\n                <div>\r\n                    {\r\n                        (plans.length || showForm) && (\r\n                            <SellingPlanGroupBasicInfo\r\n                                currentGroup={currentGroup}\r\n                                onChange={(field, value) => setCurrentGroup(prev => ({ ...prev, [field]: value }))}\r\n                            />\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className='flex flex-col gap-4'>\r\n                    {plans.map((plan, index) => (\r\n                        <PlanCard\r\n                            key={index}\r\n                            plan={plan}\r\n                            index={index}\r\n                            actions={planActions}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <div className='flex'>\r\n                    <Button variant={\"text\" as any}\r\n                        onClick={() => debouncedSetShowForm(true)}\r\n                        className='text-blue-600 cursor-pointer hover:underline text-sm'\r\n                    >\r\n                        Add another plan\r\n                    </Button>\r\n                </div>\r\n                {\r\n                    showForm && (\r\n                        <>\r\n                            <div\r\n                                ref={formRef}\r\n                                className='border border-muted rounded-[10px] p-3'\r\n                            >\r\n                                <PlanForm\r\n                                    plan={currentPlan}\r\n                                    onChange={setCurrentPlan}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"flex gap-4 mt-5\">\r\n                                <Button onClick={handleAddOrUpdate}>\r\n                                    {editingIndex !== null ? \"Done\" : \"Done\"}\r\n                                    {isLoading &&\r\n                                        <div\r\n                                            className=\"absolute inset-0 flex items-center justify-center bg-white/80\"\r\n                                        >\r\n                                            <Loader variant=\"spinner\" />\r\n                                        </div>\r\n                                    }\r\n                                </Button>\r\n                                {isDirty && (\r\n                                    <Button\r\n                                        variant={\"outline\" as any}\r\n                                        onClick={() => setShowCancelModal(true)}\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                )}\r\n                            </div>\r\n                        </>\r\n                    )\r\n                }\r\n            </div>\r\n\r\n            <ConfirmationModal\r\n                isOpen={deletingIndex !== null}\r\n                title=\"Delete Plan\"\r\n                message={`Delete plan \"${deletingIndex !== null ? plans[deletingIndex].planName : ''}\"?`}\r\n                onConfirm={() => {\r\n                    debouncedSetPlans(plans.filter((_, i) => i !== deletingIndex));\r\n                    setDeletingIndex(null);\r\n                }}\r\n                onCancel={() => setDeletingIndex(null)}\r\n            />\r\n\r\n            <ConfirmationModal\r\n                isOpen={showCancelModal}\r\n                title=\"Discard Changes\"\r\n                message=\"Are you sure you want to discard changes?\"\r\n                onConfirm={resetForm}\r\n                onCancel={() => setShowCancelModal(false)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PayPerShipment;\r\n","import { useEffect, useState, useCallback, useRef } from 'react';\r\nimport { useAtom } from 'jotai';\r\nimport { createPlanPageStates, plansAtom } from 'app/states/plansAtom';\r\nimport { PayPerShipmentPlanGroup, PayPerShipmentSellingPlan, Plan } from 'app/types/product/sellingPlans';\r\nimport { PlanCard } from '../components/PlanCard';\r\nimport { PlanForm } from '../components/PlanForm';\r\nimport { Button } from 'rizzui/button';\r\nimport { ConfirmationModal } from '../components/ConfirmationModal';\r\nimport toast from 'react-hot-toast';\r\nimport { Text } from 'rizzui/typography';\r\nimport SellingPlanGroupBasicInfo from '../SellingPlanGroupBasicInfo';\r\nimport { Link, useSearchParams } from '@remix-run/react';\r\nimport { Loader } from 'rizzui/loader'; // Importing Loader component\r\nimport { useDebounceWithLoader } from 'app/packages/hooks/useDebounceWithLoader';\r\nimport { defaultPayPerShipmentGroup, defaultPayPerShipmentPlan } from '../PayPerShipment/default.plan';\r\n\r\n\r\nconst PrePaidSubscriptions = () => {\r\n    const [plans, setPlans] = useAtom(plansAtom);\r\n    const [createPlanPageState, setCreatePlanPageState] = useAtom(createPlanPageStates);\r\n    const [editingIndex, setEditingIndex] = useState<number | null>(null);\r\n    const [deletingIndex, setDeletingIndex] = useState<number | null>(null);\r\n    const [currentPlan, setCurrentPlan] = useState<PayPerShipmentSellingPlan>(defaultPayPerShipmentPlan);\r\n    const [currentGroup, setCurrentGroup] = useState<PayPerShipmentPlanGroup>(defaultPayPerShipmentGroup);\r\n    const [showCancelModal, setShowCancelModal] = useState(false);\r\n    const [isDirty, setIsDirty] = useState(false);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const [searchParams] = useSearchParams();\r\n    const plansUpdate = searchParams.get('plansUpdate') === 'yes';\r\n    const formRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    // Debounced Plan Update with Loader\r\n    const debouncedSetPlans = useDebounceWithLoader(setPlans, 50, setIsLoading);\r\n\r\n    useEffect(() => {\r\n        console.log('createPlanPageState', createPlanPageState)\r\n        // Initialize state from createPlanPageState if URL param exists\r\n        if (plansUpdate && createPlanPageState?.prePaidSubscriptionsGroup) {\r\n            setCurrentGroup({\r\n                groupName: createPlanPageState.prePaidSubscriptionsGroup.groupName,\r\n                sellingPlansToUpdate: createPlanPageState.prePaidSubscriptionsGroup.sellingPlansToUpdate,\r\n                descriptionContent: createPlanPageState.prePaidSubscriptionsGroup.descriptionContent,\r\n                sellingPlansToCreate: []\r\n            });\r\n\r\n            if (createPlanPageState.prePaidSubscriptionsGroup.sellingPlansToUpdate) {\r\n                setPlans(createPlanPageState.prePaidSubscriptionsGroup.sellingPlansToUpdate);\r\n            }\r\n        }\r\n    }, [plansUpdate, createPlanPageState?.prePaidSubscriptionsGroup]);\r\n\r\n    const handleAddOrUpdate = () => {\r\n        if (editingIndex !== null) {\r\n            const updatedPlans = [...plans];\r\n            updatedPlans[editingIndex] = currentPlan;\r\n            debouncedSetPlans(updatedPlans);\r\n\r\n            // Store updated plans in sellingPlansToUpdate\r\n            setCreatePlanPageState((prevState: any) => ({\r\n                ...prevState,\r\n                prePaidSubscriptionsGroup: {\r\n                    ...prevState?.prePaidSubscriptionsGroup,\r\n                    sellingPlansToUpdate: updatedPlans,\r\n                },\r\n            }));\r\n\r\n            toast.success(<Text as=\"b\">Plan updated</Text>);\r\n        } else {\r\n            const isDuplicate = plans.some(\r\n                (plan) =>\r\n                    plan.orderFrequency === currentPlan.billingRecurringPolicyIntervalCount &&\r\n                    plan.frequencyUnit === currentPlan.billingRecurringPolicyInterval\r\n            );\r\n\r\n            if (isDuplicate) {\r\n                toast.error(\r\n                    <Text as=\"b\" className=\"text-red-600\">A plan already exists.</Text>\r\n                );\r\n                return;\r\n            }\r\n\r\n            const newPlans = [...plans, currentPlan];\r\n            debouncedSetPlans(newPlans);\r\n\r\n            // Store newly created plans in sellingPlansToCreate\r\n            setCreatePlanPageState((prevState: any) => ({\r\n                ...prevState,\r\n                prePaidSubscriptionsGroup: {\r\n                    ...prevState?.prePaidSubscriptionsGroup,\r\n                    sellingPlansToCreate: newPlans,\r\n                },\r\n            }));\r\n\r\n            toast.success(<Text as=\"b\">Plan added successfully!</Text>);\r\n        }\r\n\r\n        resetForm();\r\n        debouncedSetShowForm(false);\r\n    };\r\n    useEffect(() => {\r\n        // Only update if not in plansUpdate mode\r\n        if (!plansUpdate) {\r\n            setCreatePlanPageState((prevState: any) => ({\r\n                ...prevState,\r\n                prePaidSubscriptionsGroup: {\r\n                    groupName: currentGroup.groupName,\r\n                    sellingPlansToCreate: plans,\r\n                },\r\n            }));\r\n        }\r\n    }, [currentGroup, plans, setCreatePlanPageState]);\r\n\r\n    useEffect(() => {\r\n        const hasChanged = JSON.stringify(currentPlan) !== JSON.stringify(defaultPayPerShipmentPlan);\r\n        setIsDirty(hasChanged);\r\n    }, [currentPlan]);\r\n\r\n    const resetForm = () => {\r\n        setCurrentPlan(defaultPayPerShipmentPlan);\r\n        setEditingIndex(null);\r\n        setIsDirty(false);\r\n    };\r\n\r\n    const debouncedSetShowForm = useDebounceWithLoader(setShowForm, 50, setIsLoading);\r\n\r\n    const planActions = {\r\n        onEdit: (index: number) => {\r\n            setCurrentPlan(plans[index]);\r\n            setEditingIndex(index);\r\n            debouncedSetShowForm(true);\r\n        },\r\n        onDelete: (index: number) => setDeletingIndex(index),\r\n        onDuplicate: (index: number) => {\r\n            setCurrentPlan({ ...plans[index], frequencyName: `${plans[index].frequencyName}` });\r\n            setEditingIndex(null);\r\n            debouncedSetShowForm(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (showForm) {\r\n            setTimeout(() => {\r\n                window.scrollTo({ top: document.body.scrollHeight, behavior: \"smooth\" });\r\n            }, 100);\r\n        } else window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    }, [showForm])\r\n\r\n    return (\r\n        <div className=\"rounded-[10px] p-3 relative\">\r\n            <div className={`flex flex-col gap-4 ${isLoading ? 'opacity-50 pointer-events-none' : ''}`}>\r\n                {isLoading &&\r\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-white/80\">\r\n                        <Loader variant=\"spinner\" />\r\n                    </div>\r\n                }\r\n                <div>\r\n                    {\r\n                        (plans.length || showForm) && (\r\n                            <SellingPlanGroupBasicInfo\r\n                                currentGroup={currentGroup}\r\n                                onChange={(field, value) => setCurrentGroup(prev => ({ ...prev, [field]: value }))}\r\n                            />\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className='flex flex-col gap-4'>\r\n                    {plans.map((plan, index) => (\r\n                        <PlanCard\r\n                            key={index}\r\n                            plan={plan}\r\n                            index={index}\r\n                            actions={planActions}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <div className='flex'>\r\n                    <Button variant={\"text\" as any}\r\n                        onClick={() => debouncedSetShowForm(true)}\r\n                        className='text-blue-600 cursor-pointer hover:underline text-sm'\r\n                    >\r\n                        Add another plan\r\n                    </Button>\r\n                </div>\r\n                {\r\n                    showForm && (\r\n                        <>\r\n                            <div\r\n                                ref={formRef}\r\n                                className='border border-muted rounded-[10px] p-3'\r\n                            >\r\n                                <PlanForm\r\n                                    plan={currentPlan}\r\n                                    onChange={setCurrentPlan}\r\n                                    prePaidFrom={true}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"flex gap-4 mt-5\">\r\n                                <Button onClick={handleAddOrUpdate}>\r\n                                    {editingIndex !== null ? \"Done\" : \"Done\"}\r\n                                    {isLoading &&\r\n                                        <div\r\n                                            className=\"absolute inset-0 flex items-center justify-center bg-white/80\"\r\n                                        >\r\n                                            <Loader variant=\"spinner\" />\r\n                                        </div>\r\n                                    }\r\n                                </Button>\r\n                                {isDirty && (\r\n                                    <Button\r\n                                        variant={\"outline\" as any}\r\n                                        onClick={() => setShowCancelModal(true)}\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                )}\r\n                            </div>\r\n                        </>\r\n                    )\r\n                }\r\n            </div>\r\n\r\n            <ConfirmationModal\r\n                isOpen={deletingIndex !== null}\r\n                title=\"Delete Plan\"\r\n                message={`Delete plan \"${deletingIndex !== null ? plans[deletingIndex].planName : ''}\"?`}\r\n                onConfirm={() => {\r\n                    debouncedSetPlans(plans.filter((_, i) => i !== deletingIndex));\r\n                    setDeletingIndex(null);\r\n                }}\r\n                onCancel={() => setDeletingIndex(null)}\r\n            />\r\n\r\n            <ConfirmationModal\r\n                isOpen={showCancelModal}\r\n                title=\"Discard Changes\"\r\n                message=\"Are you sure you want to discard changes?\"\r\n                onConfirm={resetForm}\r\n                onCancel={() => setShowCancelModal(false)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PrePaidSubscriptions;\r\n","import { useState, useEffect, useCallback } from 'react';\r\nimport { useAtom } from 'jotai';\r\nimport { productAtom } from 'app/states/productAtom';\r\nimport { useSearchParams } from '@remix-run/react';\r\nimport toast from 'react-hot-toast';\r\nimport { defaultOneTimePlan } from '../PayPerShipment/default.plan';\r\nimport { PlanHeader } from './PlanHeader';\r\nimport { OneTimePlanForm } from './OneTimePlanForm';\r\nimport { OneTimePlanCard } from './OneTimePlanCard';\r\nimport { Loader } from 'rizzui/loader';\r\nimport { createPlanPageStates } from 'app/states/plansAtom';\r\n\r\nconst OneTimePlanSettingsCreate = () => {\r\n    const [currentPlan, setCurrentPlan] = useState(defaultOneTimePlan);\r\n    const [isPlanEnabled, setIsPlanEnabled] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [showFormOnetime, setShowFormOnetime] = useState(false);\r\n    const [product] = useAtom(productAtom);\r\n    const [createPlanPageState, setCreatePlanPageState] = useAtom(createPlanPageStates);\r\n\r\n    useEffect(() => {\r\n        if (product) {\r\n            defaultOneTimePlan.planName = product.title;\r\n        }\r\n    }, [product]);\r\n\r\n    const handleChange = useCallback(<T extends keyof typeof defaultOneTimePlan>(field: T, value: any) => {\r\n        setCurrentPlan((prevPlan) => ({\r\n            ...prevPlan,\r\n            [field]: value,\r\n        }));\r\n\r\n        setShowFormOnetime(true);\r\n    }, []);\r\n\r\n    const handleSavePlan = async () => {\r\n        setIsLoading(true);\r\n        try {\r\n            toast.success(\"One-time plan saved successfully!\");\r\n            setIsPlanEnabled(true); // Enable the plan after saving\r\n            setShowFormOnetime(false); // Hide the form\r\n\r\n            // Store updated plans in sellingPlansToUpdate\r\n            setCreatePlanPageState((prevState: any) => ({\r\n                ...prevState,\r\n                oneTimeGroup: {\r\n                  groupName:currentPlan.planName,\r\n                  sellingPlansToCreate: [currentPlan],\r\n                },\r\n            }));\r\n\r\n        } finally {\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleTogglePlan = useCallback((checked: boolean) => {\r\n        setIsPlanEnabled(checked);\r\n        setShowFormOnetime(checked);\r\n    }, []);\r\n\r\n    const handleEditPlan = useCallback(() => {\r\n        setShowFormOnetime(true);\r\n    }, []);\r\n\r\n    const handleDeletePlan = useCallback(() => {\r\n        setIsPlanEnabled(false);\r\n        setShowFormOnetime(false);\r\n        setCurrentPlan(defaultOneTimePlan);\r\n        toast.success(\"Plan deleted successfully!\");\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (showFormOnetime) {\r\n            setTimeout(() => {\r\n                window.scrollTo({ top: document.body.scrollHeight, behavior: \"smooth\" });\r\n            }, 100);\r\n        }\r\n    }, [showFormOnetime]);\r\n\r\n    return (\r\n        <div className=\"border border-muted rounded-[10px] p-3 relative\">\r\n            {isLoading && (\r\n                <div className=\"absolute inset-0 flex items-center justify-center bg-white/80\">\r\n                    <Loader variant=\"spinner\" />\r\n                </div>\r\n            )}\r\n\r\n            <PlanHeader isPlanEnabled={isPlanEnabled} onToggle={handleTogglePlan} />\r\n\r\n            {isPlanEnabled && (\r\n                showFormOnetime ? (\r\n                    <OneTimePlanForm\r\n                        currentPlan={currentPlan}\r\n                        onChange={handleChange}\r\n                        onSave={handleSavePlan}\r\n                        productTitle={product?.title || \"\"}\r\n                    />\r\n                ) : (\r\n                    <div className=\"mt-6\">\r\n                        <OneTimePlanCard\r\n                            plan={currentPlan}\r\n                            index={0}\r\n                            actions={{\r\n                                onEdit: handleEditPlan,\r\n                                onDelete: handleDeletePlan,\r\n                                onDuplicate: () => { },\r\n                            }}\r\n                        />\r\n                    </div>\r\n                )\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OneTimePlanSettingsCreate;\r\n","import { useEffect, useState, useRef } from 'react';\r\nimport { useAtom } from 'jotai';\r\nimport { createPlanPageStates, payPerShipmentPlanAtom } from 'app/states/plansAtom'; // Updated atom import\r\nimport { PayPerShipmentPlanGroup, PayPerShipmentSellingPlan } from 'app/types/product/sellingPlans';\r\nimport { PlanCard } from '../components/PlanCard';\r\nimport { PlanForm } from '../components/PlanForm';\r\nimport { Button } from 'rizzui/button';\r\nimport { ConfirmationModal } from '../components/ConfirmationModal';\r\nimport toast from 'react-hot-toast';\r\nimport { Text } from 'rizzui/typography';\r\nimport { defaultPayPerShipmentGroup, defaultPayPerShipmentPlan } from './default.plan';\r\nimport SellingPlanGroupBasicInfo from '../SellingPlanGroupBasicInfo';\r\nimport { useSearchParams } from '@remix-run/react';\r\nimport { Loader } from 'rizzui/loader';\r\nimport { useDebounceWithLoader } from 'app/packages/hooks/useDebounceWithLoader';\r\nimport sellingPlanValidators from '../../create-plans/sellingPlanValidators';\r\n\r\nconst PayPerShipmentCreate = () => {\r\n    const [plans, setPlans] = useAtom(payPerShipmentPlanAtom); // Updated atom usage\r\n    const [createPlanPageState, setCreatePlanPageState] = useAtom(createPlanPageStates);\r\n    const [editingIndex, setEditingIndex] = useState<number | null>(null);\r\n    const [deletingIndex, setDeletingIndex] = useState<number | null>(null);\r\n    const [currentPlan, setCurrentPlan] = useState<PayPerShipmentSellingPlan>(defaultPayPerShipmentPlan);\r\n    const [currentGroup, setCurrentGroup] = useState<PayPerShipmentPlanGroup>(defaultPayPerShipmentGroup);\r\n    const [showCancelModal, setShowCancelModal] = useState(false);\r\n    const [isDirty, setIsDirty] = useState(false);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const formRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    // Debounced Plan Update with Loader\r\n    const debouncedSetPlans = useDebounceWithLoader(setPlans, 50, setIsLoading);\r\n\r\n    const handleAddOrUpdate = () => {\r\n\r\n        if (editingIndex !== null) {\r\n            const updatedPlans = [...plans];\r\n            updatedPlans[editingIndex] = currentPlan;\r\n            debouncedSetPlans(updatedPlans);\r\n\r\n            // Store updated plans in sellingPlansToUpdate\r\n            setCreatePlanPageState((prevState: any) => ({\r\n                ...prevState,\r\n                payPerShipmentGroup: {\r\n                    ...prevState?.payPerShipmentGroup,\r\n                    sellingPlansToUpdate: updatedPlans,\r\n                },\r\n            }));\r\n\r\n            toast.success(<Text as=\"b\">Plan updated</Text>);\r\n        } else {\r\n            const isDuplicate = plans.some(\r\n                (plan: any) =>\r\n                    plan.orderFrequency === currentPlan.billingRecurringPolicyIntervalCount &&\r\n                    plan.frequencyUnit === currentPlan.billingRecurringPolicyInterval\r\n            );\r\n\r\n            if (isDuplicate) {\r\n                toast.error(\r\n                    <Text as=\"b\" className=\"text-red-600\">A plan already exists.</Text>\r\n                );\r\n                return;\r\n            }\r\n\r\n            const newPlans = [...plans, currentPlan];\r\n            debouncedSetPlans(newPlans);\r\n\r\n            // Store newly created plans in sellingPlansToCreate\r\n            setCreatePlanPageState((prevState: any) => ({\r\n                ...prevState,\r\n                payPerShipmentGroup: {\r\n                    ...prevState?.payPerShipmentGroup,\r\n                    sellingPlansToCreate: newPlans,\r\n                },\r\n            }));\r\n\r\n            toast.success(<Text as=\"b\">Plan added successfully!</Text>);\r\n        }\r\n\r\n        resetForm();\r\n        debouncedSetShowForm(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Only update if not in plansUpdate mode\r\n        setCreatePlanPageState((prevState: any) => ({\r\n            ...prevState,\r\n            payPerShipmentGroup: {\r\n                groupName: currentGroup.groupName,\r\n                sellingPlansToCreate: plans,\r\n            },\r\n        }));\r\n    }, [currentGroup, plans, setCreatePlanPageState]);\r\n\r\n    useEffect(() => {\r\n        const hasChanged = JSON.stringify(currentPlan) !== JSON.stringify(defaultPayPerShipmentPlan);\r\n        setIsDirty(hasChanged);\r\n    }, [currentPlan]);\r\n\r\n    const resetForm = () => {\r\n        setCurrentPlan(defaultPayPerShipmentPlan);\r\n        setEditingIndex(null);\r\n        setIsDirty(false);\r\n    };\r\n\r\n    const debouncedSetShowForm = useDebounceWithLoader(setShowForm, 50, setIsLoading);\r\n\r\n    const planActions = {\r\n        onEdit: (index: number) => {\r\n            setCurrentPlan(plans[index]);\r\n            setEditingIndex(index);\r\n            debouncedSetShowForm(true);\r\n        },\r\n        onDelete: (index: number) => setDeletingIndex(index),\r\n        onDuplicate: (index: number) => {\r\n            setCurrentPlan({ ...plans[index], frequencyName: `${plans[index].frequencyName}` });\r\n            setEditingIndex(null);\r\n            debouncedSetShowForm(true);\r\n        },\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (showForm) {\r\n            setTimeout(() => {\r\n                window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });\r\n            }, 100);\r\n        } else window.scrollTo({ top: 0, behavior: 'smooth' });\r\n    }, [showForm]);\r\n\r\n    return (\r\n        <div className=\"rounded-[10px] p-3 relative\">\r\n            <div className={`flex flex-col gap-4 ${isLoading ? 'opacity-50 pointer-events-none' : ''}`}>\r\n                {isLoading && (\r\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-white/80\">\r\n                        <Loader variant=\"spinner\" />\r\n                    </div>\r\n                )}\r\n                <div>\r\n                    {(plans.length || showForm) && (\r\n                        <SellingPlanGroupBasicInfo\r\n                            currentGroup={currentGroup}\r\n                            onChange={(field, value) => setCurrentGroup((prev) => ({ ...prev, [field]: value }))}\r\n                        />\r\n                    )}\r\n                </div>\r\n\r\n                {/* Conditionally render plan cards only if plans are saved or plansUpdate is set */}\r\n                {(plans.length > 0) && (\r\n                    <div className=\"flex flex-col gap-4\">\r\n                        {plans.map((plan: any, index: any) => (\r\n                            <PlanCard\r\n                                key={index}\r\n                                plan={plan}\r\n                                index={index}\r\n                                actions={planActions}\r\n                            />\r\n                        ))}\r\n                    </div>\r\n                )}\r\n\r\n                <div className=\"flex\">\r\n                    <Button\r\n                        variant={'text' as any}\r\n                        onClick={() => debouncedSetShowForm(true)}\r\n                        className=\"text-blue-600 cursor-pointer hover:underline text-sm\"\r\n                    >\r\n                        Add another plan\r\n                    </Button>\r\n                </div>\r\n\r\n                {showForm && (\r\n                    <>\r\n                        <div ref={formRef} className=\"border border-muted rounded-[10px] p-3\">\r\n                            <PlanForm plan={currentPlan} onChange={setCurrentPlan} />\r\n                        </div>\r\n\r\n                        <div className=\"flex gap-4 mt-5\">\r\n                            <Button onClick={handleAddOrUpdate}>\r\n                                {editingIndex !== null ? 'Done' : 'Done'}\r\n                                {isLoading && (\r\n                                    <div className=\"absolute inset-0 flex items-center justify-center bg-white/80\">\r\n                                        <Loader variant=\"spinner\" />\r\n                                    </div>\r\n                                )}\r\n                            </Button>\r\n                            {isDirty && (\r\n                                <Button\r\n                                    variant={'outline' as any}\r\n                                    onClick={() => setShowCancelModal(true)}\r\n                                >\r\n                                    Cancel\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n\r\n            <ConfirmationModal\r\n                isOpen={deletingIndex !== null}\r\n                title=\"Delete Plan\"\r\n                message={`Delete plan \"${deletingIndex !== null ? plans[deletingIndex].planName : ''}\"?`}\r\n                onConfirm={() => {\r\n                    debouncedSetPlans(plans.filter((_: any, i: any) => i !== deletingIndex));\r\n                    setDeletingIndex(null);\r\n                }}\r\n                onCancel={() => setDeletingIndex(null)}\r\n            />\r\n\r\n            <ConfirmationModal\r\n                isOpen={showCancelModal}\r\n                title=\"Discard Changes\"\r\n                message=\"Are you sure you want to discard changes?\"\r\n                onConfirm={resetForm}\r\n                onCancel={() => setShowCancelModal(false)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PayPerShipmentCreate;","import { useEffect, useState, useCallback, useRef } from 'react';\r\nimport { useAtom } from 'jotai';\r\nimport { createPlanPageStates, plansAtom } from 'app/states/plansAtom';\r\nimport { PayPerShipmentPlanGroup, PayPerShipmentSellingPlan, Plan } from 'app/types/product/sellingPlans';\r\nimport { PlanCard } from '../components/PlanCard';\r\nimport { PlanForm } from '../components/PlanForm';\r\nimport { Button } from 'rizzui/button';\r\nimport { ConfirmationModal } from '../components/ConfirmationModal';\r\nimport toast from 'react-hot-toast';\r\nimport { Text } from 'rizzui/typography';\r\nimport SellingPlanGroupBasicInfo from '../SellingPlanGroupBasicInfo';\r\nimport { Link, useSearchParams } from '@remix-run/react';\r\nimport { Loader } from 'rizzui/loader'; // Importing Loader component\r\nimport { useDebounceWithLoader } from 'app/packages/hooks/useDebounceWithLoader';\r\nimport { defaultPayPerShipmentGroup, defaultPrePaidSubscriptionPlan } from '../PayPerShipment/default.plan';\r\n\r\n\r\nconst PrePaidSubscriptionsCreate = () => {\r\n    const [plans, setPlans] = useAtom(plansAtom);\r\n    const [createPlanPageState, setCreatePlanPageState] = useAtom(createPlanPageStates);\r\n    const [editingIndex, setEditingIndex] = useState<number | null>(null);\r\n    const [deletingIndex, setDeletingIndex] = useState<number | null>(null);\r\n    const [currentPlan, setCurrentPlan] = useState<PayPerShipmentSellingPlan>(defaultPrePaidSubscriptionPlan);\r\n    const [currentGroup, setCurrentGroup] = useState<PayPerShipmentPlanGroup>(defaultPayPerShipmentGroup);\r\n    const [showCancelModal, setShowCancelModal] = useState(false);\r\n    const [isDirty, setIsDirty] = useState(false);\r\n    const [showForm, setShowForm] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const [searchParams] = useSearchParams();\r\n    const plansUpdate = searchParams.get('plansUpdate') === 'yes';\r\n    const formRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    // Debounced Plan Update with Loader\r\n    const debouncedSetPlans = useDebounceWithLoader(setPlans, 50, setIsLoading);\r\n\r\n    useEffect(() => {\r\n        console.log('createPlanPageState', createPlanPageState)\r\n        // Initialize state from createPlanPageState if URL param exists\r\n        if (plansUpdate && createPlanPageState?.prePaidSubscriptionsGroup) {\r\n            setCurrentGroup({\r\n                groupName: createPlanPageState.prePaidSubscriptionsGroup.groupName,\r\n                sellingPlansToUpdate: createPlanPageState.prePaidSubscriptionsGroup.sellingPlansToUpdate,\r\n                descriptionContent: createPlanPageState.prePaidSubscriptionsGroup.descriptionContent,\r\n                sellingPlansToCreate: []\r\n            });\r\n\r\n            if (createPlanPageState.prePaidSubscriptionsGroup.sellingPlansToUpdate) {\r\n                setPlans(createPlanPageState.prePaidSubscriptionsGroup.sellingPlansToUpdate);\r\n            }\r\n        }\r\n    }, [plansUpdate, createPlanPageState?.prePaidSubscriptionsGroup]);\r\n\r\n    const handleAddOrUpdate = () => {\r\n        if (editingIndex !== null) {\r\n            const updatedPlans = [...plans];\r\n            updatedPlans[editingIndex] = currentPlan;\r\n            debouncedSetPlans(updatedPlans);\r\n\r\n            // Store updated plans in sellingPlansToUpdate\r\n            setCreatePlanPageState((prevState: any) => ({\r\n                ...prevState,\r\n                prePaidSubscriptionsGroup: {\r\n                    ...prevState?.prePaidSubscriptionsGroup,\r\n                    sellingPlansToUpdate: updatedPlans,\r\n                },\r\n            }));\r\n\r\n            toast.success(<Text as=\"b\">Plan updated</Text>);\r\n        } else {\r\n            const isDuplicate = plans.some(\r\n                (plan) =>\r\n                    plan.orderFrequency === currentPlan.billingRecurringPolicyIntervalCount &&\r\n                    plan.frequencyUnit === currentPlan.billingRecurringPolicyInterval\r\n            );\r\n\r\n            if (isDuplicate) {\r\n                toast.error(\r\n                    <Text as=\"b\" className=\"text-red-600\">A plan already exists.</Text>\r\n                );\r\n                return;\r\n            }\r\n\r\n            const newPlans = [...plans, currentPlan];\r\n            debouncedSetPlans(newPlans);\r\n\r\n            // Store newly created plans in sellingPlansToCreate\r\n            setCreatePlanPageState((prevState: any) => ({\r\n                ...prevState,\r\n                prePaidSubscriptionsGroup: {\r\n                    ...prevState?.prePaidSubscriptionsGroup,\r\n                    sellingPlansToCreate: newPlans,\r\n                },\r\n            }));\r\n\r\n            toast.success(<Text as=\"b\">Plan added successfully!</Text>);\r\n        }\r\n\r\n        resetForm();\r\n        debouncedSetShowForm(false);\r\n    };\r\n    useEffect(() => {\r\n        // Only update if not in plansUpdate mode\r\n        if (!plansUpdate) {\r\n            setCreatePlanPageState((prevState: any) => ({\r\n                ...prevState,\r\n                prePaidSubscriptionsGroup: {\r\n                    groupName: currentGroup.groupName,\r\n                    sellingPlansToCreate: plans,\r\n                },\r\n            }));\r\n        }\r\n    }, [currentGroup, plans, setCreatePlanPageState]);\r\n\r\n    useEffect(() => {\r\n        const hasChanged = JSON.stringify(currentPlan) !== JSON.stringify(defaultPrePaidSubscriptionPlan);\r\n        setIsDirty(hasChanged);\r\n    }, [currentPlan]);\r\n\r\n    const resetForm = () => {\r\n        setCurrentPlan(defaultPrePaidSubscriptionPlan);\r\n        setEditingIndex(null);\r\n        setIsDirty(false);\r\n    };\r\n\r\n    const debouncedSetShowForm = useDebounceWithLoader(setShowForm, 50, setIsLoading);\r\n\r\n    const planActions = {\r\n        onEdit: (index: number) => {\r\n            setCurrentPlan(plans[index]);\r\n            setEditingIndex(index);\r\n            debouncedSetShowForm(true);\r\n        },\r\n        onDelete: (index: number) => setDeletingIndex(index),\r\n        onDuplicate: (index: number) => {\r\n            setCurrentPlan({ ...plans[index], frequencyName: `${plans[index].frequencyName}` });\r\n            setEditingIndex(null);\r\n            debouncedSetShowForm(true);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (showForm) {\r\n            setTimeout(() => {\r\n                window.scrollTo({ top: document.body.scrollHeight, behavior: \"smooth\" });\r\n            }, 100);\r\n        } else window.scrollTo({ top: 0, behavior: \"smooth\" });\r\n    }, [showForm])\r\n\r\n    return (\r\n        <div className=\"rounded-[10px] p-3 relative\">\r\n            <div className={`flex flex-col gap-4 ${isLoading ? 'opacity-50 pointer-events-none' : ''}`}>\r\n                {isLoading &&\r\n                    <div className=\"absolute inset-0 flex items-center justify-center bg-white/80\">\r\n                        <Loader variant=\"spinner\" />\r\n                    </div>\r\n                }\r\n                <div>\r\n                    {\r\n                        (plans.length || showForm) && (\r\n                            <SellingPlanGroupBasicInfo\r\n                                currentGroup={currentGroup}\r\n                                onChange={(field, value) => setCurrentGroup(prev => ({ ...prev, [field]: value }))}\r\n                            />\r\n                        )\r\n                    }\r\n                </div>\r\n                <div className='flex flex-col gap-4'>\r\n                    {plans.map((plan, index) => (\r\n                        <PlanCard\r\n                            key={index}\r\n                            plan={plan}\r\n                            index={index}\r\n                            actions={planActions}\r\n                        />\r\n                    ))}\r\n                </div>\r\n                <div className='flex'>\r\n                    <Button variant={\"text\" as any}\r\n                        onClick={() => debouncedSetShowForm(true)}\r\n                        className='text-blue-600 cursor-pointer hover:underline text-sm'\r\n                    >\r\n                        Add another plan\r\n                    </Button>\r\n                </div>\r\n                {\r\n                    showForm && (\r\n                        <>\r\n                            <div\r\n                                ref={formRef}\r\n                                className='border border-muted rounded-[10px] p-3'\r\n                            >\r\n                                <PlanForm\r\n                                    plan={currentPlan}\r\n                                    onChange={setCurrentPlan}\r\n                                    prePaidFrom={true}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"flex gap-4 mt-5\">\r\n                                <Button onClick={handleAddOrUpdate}>\r\n                                    {editingIndex !== null ? \"Done\" : \"Done\"}\r\n                                    {isLoading &&\r\n                                        <div\r\n                                            className=\"absolute inset-0 flex items-center justify-center bg-white/80\"\r\n                                        >\r\n                                            <Loader variant=\"spinner\" />\r\n                                        </div>\r\n                                    }\r\n                                </Button>\r\n                                {isDirty && (\r\n                                    <Button\r\n                                        variant={\"outline\" as any}\r\n                                        onClick={() => setShowCancelModal(true)}\r\n                                    >\r\n                                        Cancel\r\n                                    </Button>\r\n                                )}\r\n                            </div>\r\n                        </>\r\n                    )\r\n                }\r\n            </div>\r\n\r\n            <ConfirmationModal\r\n                isOpen={deletingIndex !== null}\r\n                title=\"Delete Plan\"\r\n                message={`Delete plan \"${deletingIndex !== null ? plans[deletingIndex].planName : ''}\"?`}\r\n                onConfirm={() => {\r\n                    debouncedSetPlans(plans.filter((_, i) => i !== deletingIndex));\r\n                    setDeletingIndex(null);\r\n                }}\r\n                onCancel={() => setDeletingIndex(null)}\r\n            />\r\n\r\n            <ConfirmationModal\r\n                isOpen={showCancelModal}\r\n                title=\"Discard Changes\"\r\n                message=\"Are you sure you want to discard changes?\"\r\n                onConfirm={resetForm}\r\n                onCancel={() => setShowCancelModal(false)}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PrePaidSubscriptionsCreate;\r\n","import OneTimePlanSettings from \"./OneTimePlanSettings\";\r\nimport PayPerShipment from \"./PayPerShipment\";\r\nimport PrePaidSubscriptions from \"./PrePaidSubscription\";\r\nimport { Tab } from \"rizzui/tabs\";\r\nimport { GiTakeMyMoney } from \"react-icons/gi\";\r\nimport { Flex } from \"rizzui/flex\";\r\nimport { Button } from \"rizzui/button\";\r\nimport { Title } from \"rizzui/typography\";\r\nimport { useSearchParams } from \"@remix-run/react\";\r\nimport OneTimePlanSettingsCreate from \"./OneTimePlanSettings/OneTimePlanSettingsCreate\";\r\nimport PayPerShipmentCreate from \"./PayPerShipment/PayPerShipmentCreate\";\r\nimport PrePaidSubscriptionsCreate from \"./PrePaidSubscription/PrePaidSubscriptionsCreate\";\r\n\r\n\r\nexport default function CreateSellingPlans({\r\n    handleSavePlans,\r\n    createPlanLoader\r\n}: any) {\r\n    const [searchParams] = useSearchParams();\r\n    const plansUpdate = searchParams.get('plansUpdate') === 'yes';\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"grid grid-cols-[80%_15%] gap-4 mt-4 relative\">\r\n                <div>\r\n                    <div className=\"grid col-span-full gap-4 2xl:grid-cols-2 4xl:col-span-8 4xl:gap-5 xl:gap-7 xyz\">\r\n                        <Tab>\r\n                            <Tab.List>\r\n                                <Tab.ListItem>Onetime Settings</Tab.ListItem>\r\n                                <Tab.ListItem>\r\n                                    <Flex align=\"center\">\r\n                                        <GiTakeMyMoney />\r\n                                        <Title as='h3' className='text-sm'>\r\n                                            Pay Per Shipment\r\n                                        </Title>\r\n                                    </Flex>\r\n                                </Tab.ListItem>\r\n                                <Tab.ListItem>Prepaid Subscriptions</Tab.ListItem>\r\n                            </Tab.List>\r\n                            <Tab.Panels>\r\n                                <Tab.Panel>\r\n                                    {\r\n                                        plansUpdate ? (\r\n                                            <OneTimePlanSettings />\r\n                                        ) : (\r\n                                            <OneTimePlanSettingsCreate />\r\n                                        )\r\n                                    }\r\n\r\n                                </Tab.Panel>\r\n                                <Tab.Panel>\r\n                                    {\r\n                                        plansUpdate ? (\r\n                                            <PayPerShipment />\r\n                                        ) : (\r\n                                            <PayPerShipmentCreate />\r\n                                        )\r\n                                    }\r\n                                </Tab.Panel>\r\n                                <Tab.Panel>\r\n                                    {\r\n                                        plansUpdate ? (\r\n                                            <PrePaidSubscriptions />\r\n                                        ) : (\r\n                                            <PrePaidSubscriptionsCreate />\r\n                                        )\r\n                                    }\r\n                                </Tab.Panel>\r\n                            </Tab.Panels>\r\n                        </Tab>\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"p-3 border border-muted rounded-[10px] sticky top-0 right-0 h-full w-full\">\r\n                    <div className='flex'>\r\n                        <Button\r\n                            className='ml-auto'\r\n                            isLoading={createPlanLoader}\r\n                            onClick={() => handleSavePlans()}\r\n                        >\r\n                            {plansUpdate ? \"Update Plan\" : \"Save Changes\"}\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div >\r\n    )\r\n\r\n}","\r\nexport const CREATE_SELLING_PLAN_GROUP = `#graphql\r\n mutation createSellingPlanGroup(\r\n    $input: SellingPlanGroupInput!, \r\n    $resources: SellingPlanGroupResourceInput\r\n) {\r\n  sellingPlanGroupCreate(\r\n  input: $input, \r\n  resources: $resources\r\n) {\r\n    sellingPlanGroup {\r\n      id\r\n      sellingPlans(first: 1) {\r\n        edges {\r\n          node {\r\n            id\r\n            name\r\n          }\r\n        }\r\n      }\r\n    }\r\n    userErrors {\r\n      field\r\n      message\r\n      code\r\n    }\r\n  }\r\n}`;","\r\nexport const UPDATE_SELLING_PLAN_GROUP = `#graphql\r\nmutation sellingPlanGroupUpdate($id: ID!, $input: SellingPlanGroupInput!) {\r\n  sellingPlanGroupUpdate(id: $id, input: $input) {\r\n    sellingPlanGroup {\r\n      id\r\n      sellingPlans(first: 250) {\r\n        edges {\r\n          node {\r\n            id\r\n            position\r\n          }\r\n        }\r\n      }\r\n    }\r\n    userErrors {\r\n      field\r\n      message\r\n    }\r\n  }\r\n}`;","import { ActionFunctionArgs, json } from \"@remix-run/node\";\r\nimport { useFetcher, useNavigate, useParams, useSearchParams } from \"@remix-run/react\";\r\nimport { useIsMounted } from \"app/packages/hooks/use-is-mounted\";\r\nimport createOnetimePlanUtils from \"app/shared/products/create-plans/createOneTimePlanUtils\";\r\nimport createPlanAPIUtils from \"app/shared/products/create-plans/createPlanAPIUtils\";\r\nimport createRecurringPlanUtils from \"app/shared/products/create-plans/createRecurringPlanUtility\";\r\nimport CreateSellingPlans from \"app/shared/products/selling-plan-groups\";\r\nimport { createPlanPageStates } from \"app/states/plansAtom\";\r\nimport { productAtom } from \"app/states/productAtom\";\r\nimport { useAtom } from \"jotai\";\r\nimport { useEffect, useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport type { oneTimeGroup, OneTimePlan } from \"app/types/product/sellingPlans\";\r\nimport { CREATE_SELLING_PLAN_GROUP } from \"app/graphql/mutations/sellingPlans/sellingPlanGroupCreate\";\r\nimport { UPDATE_SELLING_PLAN_GROUP } from \"app/graphql/mutations/sellingPlans/sellingPlanGroupUpdate\";\r\nimport { Loader } from \"rizzui/loader\";\r\nimport { logToFile } from \"app/packages/utils/logUtils\";\r\n\r\n// Constants for group keys and error messages\r\nconst GROUP_KEYS = {\r\n    ONE_TIME: \"oneTimeGroup\",\r\n    PAY_PER_SHIPMENT: \"payPerShipmentGroup\",\r\n    PRE_PAID: \"prePaidSubscriptionsGroup\",\r\n} as const;\r\n\r\nexport const ERROR_MESSAGES = {\r\n    UNAUTHORIZED: \"Unauthorized\",\r\n    METHOD_NOT_ALLOWED: \"Method not allowed\",\r\n    INVALID_REQUEST: \"Invalid request data\",\r\n    INTERNAL_SERVER_ERROR: \"Internal server error\",\r\n    PRODUCT_ID_NOT_FOUND: \"Product ID not found\",\r\n    REQUIRED_PARAMS_MISSING: \"Required parameters are missing\",\r\n    ACTION_NOT_FOUND: \"Action not found\",\r\n    CONTRACTID_MISSING:\"Subscription contract id missing\"\r\n\r\n} as const;\r\n\r\ntype SellingPlanResponse = any;\r\n\r\n// Server-Side Action\r\nexport async function action({\r\n    request,\r\n    params\r\n}: ActionFunctionArgs) {\r\n    if (request.method !== \"POST\") {\r\n        return json({ error: ERROR_MESSAGES.METHOD_NOT_ALLOWED }, { status: 405 });\r\n    }\r\n\r\n    try {\r\n        const admin = await createPlanAPIUtils.authenticateRequest(request);\r\n        console.log(admin);\r\n        if (!admin) return json({ error: ERROR_MESSAGES.UNAUTHORIZED }, { status: 401 });\r\n        const formData = await request.formData();\r\n        const plansString = formData.get(\"plans\")?.toString();\r\n        const productId = formData.get(\"productId\")?.toString();\r\n        const appGraphqlId = formData.get(\"appId\")?.toString();\r\n        if (!plansString || !productId || !appGraphqlId) {\r\n            return json({ error: ERROR_MESSAGES.INVALID_REQUEST }, { status: 400 });\r\n        }\r\n        const groups = JSON.parse(plansString) as Record<any, unknown>;\r\n        const response: Partial<SellingPlanResponse> = {};\r\n        let hasPartialFailure = false;\r\n\r\n        // get is update\r\n        const isUpdate = formData.get(\"plansUpdate\")?.toString() === \"yes\";\r\n\r\n        for (const [groupKey, groupData] of Object.entries(groups) as any) {\r\n            try {\r\n                if (!Object.values(GROUP_KEYS).includes(groupKey as any)) {\r\n                    continue;\r\n                }\r\n\r\n                if (!groupData) continue;\r\n\r\n                const plansToUpdate = groupData?.sellingPlansToUpdate || [];\r\n                const plansToCreate = groupData?.sellingPlansToCreate || [];\r\n\r\n                const plans = isUpdate ? [...plansToUpdate, ...plansToCreate] : plansToCreate;\r\n\r\n                // Remove null values from the array\r\n                const filteredPlans = plans.filter((plan : any) => plan !== null);\r\n\r\n                if (filteredPlans.length === 0) {\r\n                    continue; // Skip if both arrays are empty\r\n                }\r\n\r\n                const variables = await createVariablesForGroup(\r\n                    groupKey as any,\r\n                    groupData,\r\n                    productId,\r\n                    appGraphqlId,\r\n                    isUpdate\r\n                );\r\n\r\n                console.log('variables here', groupKey, JSON.stringify(variables));\r\n                // logToFile(variables, `Mutation Variables for ${groupKey} :- ${groupKey}`);\r\n\r\n                const query = (isUpdate && (groupData?.groupId || groupData?.sellingPlansToCreate[0]?.groupId))\r\n                    ? UPDATE_SELLING_PLAN_GROUP\r\n                    : CREATE_SELLING_PLAN_GROUP;\r\n                console.log('query here', groupKey, JSON.stringify(query));\r\n\r\n                const result = await createPlanAPIUtils.executeShopifyMutation(\r\n                    query,\r\n                    admin, variables\r\n                );\r\n\r\n                console.log('result here', groupKey, JSON.stringify(result));\r\n                const userErrors = result?.data?.sellingPlanGroupCreate?.userErrors || result?.data?.sellingPlanGroupUpdate?.userErrors;\r\n                if (userErrors.length > 0) {\r\n                    hasPartialFailure = true;\r\n                    response[groupKey] = {\r\n                        success: false,\r\n                        errors: userErrors.map((err: { message: string }) => err.message),\r\n                    };\r\n                } else {\r\n                    response[groupKey] = { success: true };\r\n                }\r\n            } catch (error) {\r\n                hasPartialFailure = true;\r\n                response[groupKey] = {\r\n                    success: false,\r\n                    errors: [ERROR_MESSAGES.INTERNAL_SERVER_ERROR],\r\n                };\r\n                console.error(`Error processing ${groupKey}:`, error);\r\n            }\r\n        }\r\n        return json(response, { status: hasPartialFailure ? 207 : 200 });\r\n    } catch (error) {\r\n        console.error(\"Unexpected error:\", error);\r\n        return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n    }\r\n}\r\n\r\nasync function createVariablesForGroup(\r\n    groupKey: any,\r\n    groupData: any,\r\n    productId: string,\r\n    appGraphqlId: string,\r\n    isUpdate: boolean\r\n) {\r\n    switch (groupKey) {\r\n        case GROUP_KEYS.ONE_TIME:\r\n            var groupId = groupData?.sellingPlansToCreate[0]?.groupId\r\n            if (isUpdate && groupId) {\r\n                const oneTimeGroup = groupData.sellingPlansToCreate ? groupData.sellingPlansToCreate[0] : groupData\r\n                return createOnetimePlanUtils.createGraphQLVariablesOneTimesUpdate(oneTimeGroup);\r\n            }\r\n            return createOnetimePlanUtils.createGraphQLVariablesOneTimes(\r\n                groupData as oneTimeGroup,\r\n                appGraphqlId,\r\n                productId\r\n            );\r\n        case GROUP_KEYS.PAY_PER_SHIPMENT:\r\n            var groupId = groupData?.groupId\r\n            if (isUpdate && groupId) {\r\n                return createRecurringPlanUtils.updateGraphQLVariables(\r\n                    groupData\r\n                );\r\n            }\r\n            return createRecurringPlanUtils.createGraphQLVariablesPayPerShipment(\r\n                groupData,\r\n                productId,\r\n                appGraphqlId\r\n            );\r\n        case GROUP_KEYS.PRE_PAID:\r\n            var groupId = groupData?.groupId\r\n            if (isUpdate && groupId) {\r\n                return createRecurringPlanUtils.updateGraphQLVariables(\r\n                    groupData\r\n                );\r\n            }\r\n            return createRecurringPlanUtils.createGraphQLVariablesPayPerShipment(\r\n                groupData,\r\n                productId,\r\n                appGraphqlId,\r\n                true\r\n            );\r\n        default:\r\n            throw new Error(`Unsupported group type: ${groupKey}`);\r\n    }\r\n}\r\n\r\n\r\n// Client Component\r\nconst CreatePlansHome = () => {\r\n    const isMounted = useIsMounted();\r\n    const fetcher = useFetcher<Partial<SellingPlanResponse>>();\r\n    const { productId } = useParams();\r\n\r\n    const [searchParams] = useSearchParams();\r\n    const plansUpdate = searchParams.get('plansUpdate') === 'yes';\r\n    const [\r\n        createPlanLoader,\r\n        setCreatePlanLoader\r\n    ] = useState(false);\r\n    const [createPlanPageState] = useAtom(createPlanPageStates);\r\n    const [product] = useAtom(productAtom);\r\n\r\n    useEffect(() => {\r\n        if (!fetcher.data) return;\r\n        setCreatePlanLoader(false);\r\n        const response = fetcher.data;\r\n\r\n        if (\"error\" in response) {\r\n            toast.error(response.error as unknown as string);\r\n            return;\r\n        }\r\n\r\n        let successMessages: string[] = [];\r\n        let errorMessages: string[] = [];\r\n\r\n        Object.entries(response).forEach(([group, result]) => {\r\n            const groupName = formatGroupName(group);\r\n            if (result?.success) {\r\n                successMessages.push(`${groupName} created successfully!`);\r\n            } else if (result?.errors) {\r\n                result.errors.forEach((err: string) => {\r\n                    errorMessages.push(`${groupName}: ${err}`);\r\n                });\r\n            }\r\n        });\r\n\r\n        if (errorMessages.length > 0) {\r\n            toast.error(errorMessages.join(\"\\n\"));\r\n        } else if (successMessages.length > 0) {\r\n            toast.success(successMessages.join(\"\\n\"));\r\n            window.history.back(); // Redirect only if there are no errors\r\n        }\r\n    }, [fetcher.data]);\r\n\r\n\r\n    const organizeSellingPlans = (planData: any) => {\r\n        const updatedPlanData = { ...planData };\r\n\r\n        Object.keys(updatedPlanData).forEach((groupKey) => {\r\n            const group = updatedPlanData[groupKey];\r\n\r\n            if (!group || (!group.sellingPlansToCreate && !group.sellingPlansToUpdate)) {\r\n                return;\r\n            }\r\n\r\n            const sellingPlansToCreate = group.sellingPlansToCreate || [];\r\n            const sellingPlansToUpdate = group.sellingPlansToUpdate || [];\r\n\r\n            // Separate plans into update vs create based on the presence of an ID\r\n            const newSellingPlansToUpdate = sellingPlansToCreate.filter((plan: any) => plan?.id);\r\n            const newSellingPlansToCreate = sellingPlansToCreate.filter((plan: any) => !plan?.id);\r\n\r\n            // Assign the updated arrays back to the group\r\n            updatedPlanData[groupKey] = {\r\n                ...group,\r\n                sellingPlansToCreate: newSellingPlansToCreate,\r\n                sellingPlansToUpdate: [...sellingPlansToUpdate, ...newSellingPlansToUpdate]\r\n            };\r\n        });\r\n\r\n        return updatedPlanData;\r\n    };\r\n\r\n    const handleSavePlans = () => {\r\n        if (!product?.currentAppInstallation?.app) {\r\n            toast.error(\"Missing required product information\");\r\n            return;\r\n        }\r\n\r\n        const updatedPlans = plansUpdate ? createPlanPageState : organizeSellingPlans(createPlanPageState);\r\n        setCreatePlanLoader(true);\r\n        const formData = new FormData();\r\n        formData.append(\"plans\", JSON.stringify(updatedPlans));\r\n        formData.append(\"productId\", productId!);\r\n        formData.append(\"appId\", product.currentAppInstallation.app.id);\r\n\r\n        if (plansUpdate) {\r\n            formData.append(\"plansUpdate\", \"yes\");\r\n        }\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n    if (!isMounted) return null;\r\n\r\n    if (!product) {\r\n        return (\r\n            <div className=\"flex justify-center items-center h-screen flex-col\">\r\n                <Loader variant='spinner' className=\"h-8 w-8\" />\r\n                <span className=\"ml-2\">Need to load data here...</span>\r\n            </div>\r\n        );\r\n    }\r\n    return (\r\n        <div className=\"position-relative\">\r\n            <CreateSellingPlans\r\n                handleSavePlans={handleSavePlans}\r\n                createPlanLoader={createPlanLoader}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n// Helper function to format group names for display\r\nfunction formatGroupName(groupKey: string) {\r\n    return groupKey\r\n        .replace(/([A-Z])/g, \" $1\")\r\n        .replace(/^./, str => str.toUpperCase())\r\n        .replace(\" Group\", \"\");\r\n}\r\n\r\nexport default CreatePlansHome;","import { Link, useParams } from \"@remix-run/react\";\r\nimport { VariantPlanHeaderProps } from \"../types\";\r\nimport { Flex } from \"rizzui/flex\";\r\n// import { ActionIcon } from \"rizzui/action-icon\";\r\nimport { FaArrowLeft } from \"react-icons/fa6\";\r\nimport { Title } from \"rizzui/typography\";\r\nimport { ActionIcon } from \"rizzui/action-icon\";\r\n\r\nconst VariantPlanHeader = ({ product }: VariantPlanHeaderProps) => {\r\n    const { title } = product;\r\n    const { productId } = useParams();\r\n\r\n    return (\r\n        <Flex className=\"w-full\">\r\n            <Link to={`/merchant/products/${productId}`}>\r\n                <ActionIcon variant={\"outline\" as any}>\r\n                    <FaArrowLeft />\r\n                </ActionIcon>\r\n            </Link>\r\n            <Title>Manage variant plans for {title}</Title>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default VariantPlanHeader","import { Box } from \"rizzui/box\";\r\nimport { Button } from \"rizzui/button\";\r\nimport { Flex } from \"rizzui/flex\";\r\nimport { Loader } from \"rizzui/loader\";\r\n\r\ninterface VariantSellingPlanActionsProps {\r\n    disabled: boolean;\r\n    handleDiscardChanges: () => void;\r\n    handleSaveChanges: () => void;\r\n    isLoading: boolean;\r\n    setIsLoading: (isLoading: boolean) => void;\r\n}\r\n\r\nconst VariantSellingPlanActions = ({\r\n    disabled,\r\n    handleDiscardChanges,\r\n    handleSaveChanges,\r\n    isLoading,\r\n    setIsLoading\r\n}: VariantSellingPlanActionsProps) => {\r\n    return (\r\n        <Flex>\r\n            <Box className=\"ms-auto flex gap-4\">\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={handleDiscardChanges}\r\n                    variant={'outline' as any}\r\n                    color='danger'\r\n                >\r\n                    Discard changes\r\n                </Button>\r\n                <Button\r\n                    disabled={disabled}\r\n                    onClick={handleSaveChanges}\r\n                    isLoading={isLoading}\r\n                    loader={<Loader variant=\"spinner\" />}\r\n                >\r\n                    Save Changes\r\n                </Button>\r\n            </Box>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default VariantSellingPlanActions","import { extractNumericId, formatPrice } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { shopObject } from \"app/states/shopAtom\";\r\nimport { useAtom } from \"jotai\";\r\nimport { Box, Flex, Text } from \"rizzui\";\r\nimport { VariantDetailColumnsProps } from \"../../types\";\r\n\r\nconst VariantDetailColumns: React.FC<VariantDetailColumnsProps> = ({ variant }) => {\r\n    const [shop] = useAtom(shopObject);\r\n    const { currencyFormats: { moneyWithCurrencyFormat } } = shop;\r\n    const { price, sku, id } = variant;\r\n    const formattedPrice = formatPrice(price, moneyWithCurrencyFormat);\r\n    const ID = extractNumericId(id);\r\n\r\n    return (\r\n        <Flex className=\"flex gap-4\">\r\n            <Box>\r\n                <img\r\n                    src={variant?.image?.url || '/no-image.png'}\r\n                    alt={variant?.title || ''}\r\n                    height={56}\r\n                    width={56}\r\n                />\r\n            </Box>\r\n            <Box>\r\n                <Text as='p' className='text-sm'>{variant?.title}</Text>\r\n                <Text as='p' className=\"text-xs text-gray-400 font-normal\">{formattedPrice} | SKU: {sku} </Text>\r\n                <Text as='p' className=\"text-xs text-gray-400\">\r\n                    Variant Id {ID}\r\n                </Text>\r\n            </Box>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default VariantDetailColumns","import VariantDetailColumns from './VariantDetailColumns';\r\nimport { ProductVariantNode, SellingPlanEdge } from 'app/types/product/ProductNode';\r\nimport { Checkbox, Table } from 'rizzui';\r\n\r\ninterface VariantPlanListTableProps {\r\n    sellingPlans: SellingPlanEdge[];\r\n    tableData: ProductVariantNode[];\r\n    handleCheckboxChange: (variantId: string, planId: string, checked: boolean) => void;\r\n    variantCheckboxes: Record<string, boolean>;\r\n    handleAllVariantsChange: any,\r\n    allVariantsChecked:any\r\n}\r\n\r\nconst VariantPlanListTable = ({\r\n    sellingPlans,\r\n    tableData,\r\n    handleCheckboxChange,\r\n    variantCheckboxes,\r\n    handleAllVariantsChange,\r\n    allVariantsChecked\r\n}: VariantPlanListTableProps) => {\r\n    return (\r\n        <Table>\r\n            <Table.Header>\r\n                <Table.Row>\r\n                    <Table.Head>Variant Title</Table.Head>\r\n                    {sellingPlans.map((plan: SellingPlanEdge) => (\r\n                        <Table.Head key={plan.node.id}>{plan.node.name}</Table.Head>\r\n                    ))}\r\n                </Table.Row>\r\n            </Table.Header>\r\n            <Table.Body>\r\n                <Table.Row>\r\n                    <Table.Head>All</Table.Head>\r\n                    {sellingPlans.map((plan: SellingPlanEdge, planIndex: number) => (\r\n                        <Table.Head key={plan.node.id}>\r\n                            <Checkbox\r\n                                checked={allVariantsChecked[planIndex]}\r\n                                onChange={(e) => handleAllVariantsChange(planIndex, e.target.checked)}\r\n                            />\r\n                        </Table.Head>\r\n                    ))}\r\n                </Table.Row>\r\n\r\n                {tableData.map((variant: ProductVariantNode) => (\r\n                    <Table.Row key={variant.id}>\r\n                        <Table.Cell>\r\n                            <VariantDetailColumns variant={variant} />\r\n                        </Table.Cell>\r\n                        {sellingPlans.map((plan: SellingPlanEdge) => {\r\n                            const key = `${variant.id}-${plan.node.id}`;\r\n                            return (\r\n                                <Table.Cell key={key}>\r\n                                    <Checkbox\r\n                                        checked={variantCheckboxes[key] || false}\r\n                                        onChange={(e) => handleCheckboxChange(variant.id, plan.node.id, e.target.checked)}\r\n                                    />\r\n                                </Table.Cell>\r\n                            );\r\n                        })}\r\n                    </Table.Row>\r\n                ))}\r\n            </Table.Body>\r\n        </Table>\r\n    )\r\n}\r\n\r\nexport default VariantPlanListTable","import { useFetcher, useNavigate, useSearchParams } from \"@remix-run/react\";\r\nimport { VariantSellingPlanListingProps } from \"../types\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport VariantSellingPlanActions from \"./VariantSellingPlanActions\";\r\nimport { ConfirmationModal } from \"../../selling-plan-groups/components/ConfirmationModal\";\r\nimport VariantPlanListTable from \"./VariantPlanListTable\";\r\nimport toast from \"react-hot-toast\";\r\n\r\nconst VariantSellingPlanListing: React.FC<VariantSellingPlanListingProps> = ({ product }) => {\r\n    const { variants: { nodes }, id } = product;\r\n    const [searchParams] = useSearchParams();\r\n    const groupId = searchParams.get('groupId');\r\n\r\n    const selectedGroup = nodes\r\n        .flatMap((variant) => variant.sellingPlanGroups.edges)\r\n        .find((edge) => edge.node.id === `gid://shopify/SellingPlanGroup/${groupId}`);\r\n    const sellingPlans = selectedGroup?.node.sellingPlans.edges || [];\r\n    const [allVariantsChecked, setAllVariantsChecked] = useState<boolean[]>(sellingPlans.map(() => false));\r\n    const [variantCheckboxes, setVariantCheckboxes] = useState<{ [key: string]: boolean }>({});\r\n    const [originalVariantCheckboxes, setOriginalVariantCheckboxes] = useState<{ [key: string]: boolean }>({});\r\n    const [isModified, setIsModified] = useState(false);\r\n    const [showConfirmationModal, setShowConfirmationModal] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const tableData = useMemo(() => (nodes ? nodes : []), [product]);\r\n    const fetcher = useFetcher<any>();\r\n    const navigate = useNavigate();\r\n    useEffect(() => {\r\n        const initialCheckboxes: { [key: string]: boolean } = {};\r\n        console.log('sellingPlans', sellingPlans);\r\n        tableData.forEach((variant) => {\r\n            sellingPlans.forEach((plan: any) => {\r\n                const key = `${variant.id}-${plan.node.id}`;\r\n\r\n                // Default assumption: Use existing selling plan assignment\r\n                let hasSellingPlan = variant.sellingPlanGroups.edges\r\n                    .find((edge: any) => edge.node.id === `gid://shopify/SellingPlanGroup/${groupId}`)\r\n                    ?.node.sellingPlans.edges.some((edge: any) => edge.node.id === plan.node.id);\r\n\r\n                // Retrieve metafields (if available)\r\n                const metafieldNodes = plan?.node?.metafields?.nodes || [];\r\n                const restrictedMetafield = metafieldNodes.find((m: any) => m.key === \"restrictedVariants\");\r\n                const addedMetafield = metafieldNodes.find((m: any) => m.key === \"addedVariants\");\r\n\r\n                // If metafields exist, override the default state\r\n                if (metafieldNodes.length > 0) {\r\n                    const restrictedVariants = restrictedMetafield ? JSON.parse(restrictedMetafield.value) : [];\r\n                    const addedVariants = addedMetafield ? JSON.parse(addedMetafield.value) : [];\r\n\r\n                    if (restrictedVariants.includes(variant.id)) {\r\n                        hasSellingPlan = false; // Uncheck if in restrictedVariants\r\n                    } else if (addedVariants.includes(variant.id)) {\r\n                        hasSellingPlan = true; // Check if in addedVariants\r\n                    }\r\n                }\r\n\r\n                initialCheckboxes[key] = hasSellingPlan || false;\r\n            });\r\n        });\r\n\r\n        setVariantCheckboxes(initialCheckboxes);\r\n        setOriginalVariantCheckboxes(initialCheckboxes); // Store the original state\r\n\r\n        // Check if all variants are selected for each plan\r\n        const initialAllVariantsChecked = sellingPlans.map((plan) =>\r\n            tableData.every((variant) => initialCheckboxes[`${variant.id}-${plan.node.id}`])\r\n        );\r\n\r\n        setAllVariantsChecked(initialAllVariantsChecked);\r\n        setIsModified(false); // Reset modification tracking\r\n    }, [tableData, sellingPlans, groupId]);\r\n\r\n\r\n    const handleCheckboxChange = (variantId: string, planId: string, checked: boolean) => {\r\n        setVariantCheckboxes((prev) => {\r\n            const newCheckboxes = { ...prev, [`${variantId}-${planId}`]: checked };\r\n            const allChecked = tableData.every((variant) => newCheckboxes[`${variant.id}-${planId}`]);\r\n\r\n            setAllVariantsChecked((prev) => {\r\n                const newAllVariantsChecked = [...prev];\r\n                const planIndex = sellingPlans.findIndex((plan) => plan.node.id === planId);\r\n                if (planIndex !== -1) {\r\n                    newAllVariantsChecked[planIndex] = allChecked;\r\n                }\r\n                return newAllVariantsChecked;\r\n            });\r\n\r\n            setIsModified(true); // Mark changes as modified\r\n            return newCheckboxes;\r\n        });\r\n    };\r\n\r\n    const handleDiscardChanges = () => {\r\n        setVariantCheckboxes(originalVariantCheckboxes); // Reset to original values\r\n        setIsModified(false);\r\n    };\r\n\r\n    const handleAllVariantsChange = (planIndex: number, checked: boolean) => {\r\n        setAllVariantsChecked((prev) => {\r\n            const newAllVariantsChecked = [...prev];\r\n            newAllVariantsChecked[planIndex] = checked;\r\n            return newAllVariantsChecked;\r\n        });\r\n\r\n        setVariantCheckboxes((prev) => {\r\n            const newCheckboxes = { ...prev };\r\n            tableData.forEach((variant) => {\r\n                const key = `${variant.id}-${sellingPlans[planIndex].node.id}`;\r\n                newCheckboxes[key] = checked;\r\n            });\r\n            return newCheckboxes;\r\n        });\r\n\r\n        setIsModified(true);\r\n    };\r\n\r\n    const handleSaveChanges = async () => {\r\n        try {\r\n            setIsLoading(true);\r\n            const transformedVariantData = transformShopifyData(variantCheckboxes);\r\n            const variantData = {\r\n                groupId,\r\n                transformedVariantData\r\n            }\r\n            const formData = new FormData();\r\n            formData.append(\"variantData\", JSON.stringify(variantData));\r\n            formData.append(\"productId\", id!);\r\n            formData.append(\"appId\", product.currentAppInstallation.app.id);\r\n            fetcher.submit(formData, {\r\n                method: \"POST\",\r\n                action: `.`,\r\n                encType: \"multipart/form-data\",\r\n            });\r\n\r\n        } catch (error) {\r\n            console.error('Failed to save changes:', error);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n                setTimeout(() => {\r\n                    navigate(-1); \r\n                }, 1000); \r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    const transformShopifyData = (data: any) => {\r\n        let result: { [key: string]: { sellingPlanId: string; restrictedVariants: string[]; addedVariants: string[] } } = {};\r\n\r\n        for (let key in data) {\r\n            let [variantId, sellingPlanId] = key.split('-gid://shopify/SellingPlan/');\r\n            // variantId = variantId.replace(\"gid://shopify/ProductVariant/\", \"\"); // Extract variant ID\r\n            sellingPlanId = `gid://shopify/SellingPlan/${sellingPlanId}`; // Construct selling plan ID\r\n\r\n            if (!result[sellingPlanId]) {\r\n                result[sellingPlanId] = {\r\n                    sellingPlanId: sellingPlanId,\r\n                    restrictedVariants: [],\r\n                    addedVariants: []\r\n                };\r\n            }\r\n\r\n            if (data[key]) {\r\n                result[sellingPlanId].addedVariants.push(variantId);\r\n            } else {\r\n                result[sellingPlanId].restrictedVariants.push(variantId);\r\n            }\r\n        }\r\n\r\n        return Object.values(result);\r\n    }\r\n\r\n    return (\r\n        <div className='w-full flex flex-col gap-4'>\r\n            <VariantSellingPlanActions\r\n                disabled={!isModified}\r\n                handleDiscardChanges={() => setShowConfirmationModal(true)}\r\n                handleSaveChanges={handleSaveChanges}\r\n                isLoading={isLoading}\r\n                setIsLoading={setIsLoading}\r\n            />\r\n            <div className=\"w-full border border-muted rounded-md\">\r\n                <VariantPlanListTable\r\n                    sellingPlans={sellingPlans}\r\n                    tableData={tableData}\r\n                    handleCheckboxChange={handleCheckboxChange}\r\n                    variantCheckboxes={variantCheckboxes}\r\n                    handleAllVariantsChange={handleAllVariantsChange}\r\n                    allVariantsChecked={allVariantsChecked}\r\n                />\r\n            </div>\r\n\r\n            {/* Action Buttons */}\r\n            <VariantSellingPlanActions\r\n                disabled={!isModified}\r\n                handleDiscardChanges={() => setShowConfirmationModal(true)}\r\n                handleSaveChanges={handleSaveChanges}\r\n                isLoading={isLoading}\r\n                setIsLoading={setIsLoading}\r\n            />\r\n\r\n            <ConfirmationModal\r\n                isOpen={showConfirmationModal}\r\n                title=\"Discard Changes\"\r\n                message=\"Are you sure you want to discard all changes?\"\r\n                onConfirm={handleDiscardChanges}\r\n                onCancel={() => {\r\n                    setShowConfirmationModal(false)\r\n                }}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default VariantSellingPlanListing","import { Flex } from \"rizzui/flex\";\r\nimport { VariantSellingPlanManagerProps } from \"../types\";\r\nimport VariantSellingPlanListing from \"./VariantSellingPlanListing\";\r\n\r\nconst VariantSellingPlanManager: React.FC<VariantSellingPlanManagerProps> = ({ product }) => {\r\n    return (\r\n        <Flex className=\"mt-5\" direction=\"col\">\r\n            <VariantSellingPlanListing product={product} />\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default VariantSellingPlanManager","import { ProductSingleNode } from \"app/types/product/ProductNode\"\r\nimport VariantPlanHeader from \"./components/VariantPlanHeader\"\r\nimport VariantSellingPlanManager from \"./components/VariantSellingPlanManager\"\r\n\r\ninterface VariantPlanHeaderProps {\r\n    product: ProductSingleNode\r\n}\r\n\r\nexport default function EditVariantPlans({ product }: VariantPlanHeaderProps) {\r\n    return (\r\n        <div className=\"position-relative\">\r\n            <VariantPlanHeader product={product} />\r\n            <VariantSellingPlanManager product={product} />\r\n        </div>\r\n    )\r\n}\r\n","import { ActionFunctionArgs, json } from \"@remix-run/node\";\r\nimport { ERROR_MESSAGES } from \"./merchant.products_.$productId_.plans\";\r\nimport createPlanAPIUtils from \"app/shared/products/create-plans/createPlanAPIUtils\";\r\nimport { UPDATE_SELLING_PLAN_GROUP } from \"app/graphql/mutations/sellingPlans/sellingPlanGroupUpdate\";\r\nimport { generateGraphQLId, ShopifyObjectType } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { useIsMounted } from \"app/packages/hooks/use-is-mounted\";\r\nimport { useAtom } from \"jotai\";\r\nimport { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport { productAtom } from \"app/states/productAtom\";\r\nimport { Loader } from \"rizzui/loader\";\r\nimport EditVariantPlans from \"app/shared/products/edit-variant-plans\";\r\n\r\nexport async function action({\r\n    request,\r\n    params\r\n}: ActionFunctionArgs) {\r\n    if (request.method !== \"POST\") {\r\n        return json({ error: ERROR_MESSAGES.METHOD_NOT_ALLOWED }, { status: 405 });\r\n    }\r\n\r\n    try {\r\n        const admin = await createPlanAPIUtils.authenticateRequest(request);\r\n        if (!admin) return json({ error: ERROR_MESSAGES.UNAUTHORIZED }, { status: 401 });\r\n        const formData = await request.formData();\r\n        const productId = formData.get(\"productId\")?.toString();\r\n        const appGraphqlId = formData.get(\"appId\")?.toString();\r\n        const variantData = formData.get(\"variantData\")?.toString();\r\n        if (!variantData || !productId || !appGraphqlId) return json({ error: ERROR_MESSAGES.REQUIRED_PARAMS_MISSING }, { status: 400 });\r\n        const variantDataJson = JSON.parse(variantData) as Record<any, unknown>;\r\n        const variables = generateRemoveVariantVariables(variantDataJson);\r\n        const result = await createPlanAPIUtils.executeShopifyMutation(\r\n            UPDATE_SELLING_PLAN_GROUP,\r\n            admin,\r\n            variables\r\n        );\r\n        const userErrors = result?.data?.sellingPlanGroupCreate?.userErrors || [];\r\n        if (userErrors.length > 0) {\r\n            return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n        }\r\n\r\n        return json({ success: true }, { status: 200 });\r\n\r\n    } catch (error) {\r\n        console.error(\"Unexpected error:\", error);\r\n        return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n    }\r\n}\r\n\r\nconst generateRemoveVariantVariables = (variantData: Record<any, unknown>) => {\r\n    const { groupId, transformedVariantData } = variantData;\r\n\r\n    const graphqlGroupId = generateGraphQLId(Number(groupId), ShopifyObjectType.SellingPlanGroup);\r\n    const sellingPlansToUpdate = prepareInputUpdateSellingPlans(transformedVariantData)\r\n    return {\r\n        variables: {\r\n            id: graphqlGroupId,\r\n            input: {\r\n                sellingPlansToUpdate\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst prepareInputUpdateSellingPlans = (transformedVariantData: any) => {\r\n    return transformedVariantData.map((plan: any) => ({\r\n        id: plan.sellingPlanId,\r\n        metafields: [\r\n            {\r\n                value:JSON.stringify(plan.restrictedVariants),\r\n                type: \"list.variant_reference\",\r\n                key: \"restrictedVariants\",\r\n                namespace: \"billion-grid-app\"\r\n            },\r\n            {\r\n                value: JSON.stringify(plan.addedVariants),\r\n                type: \"list.variant_reference\",\r\n                key: \"addedVariants\",\r\n                namespace: \"billion-grid-app\"\r\n            }\r\n        ]\r\n    }));\r\n}\r\n\r\nconst SelectVariantPlansHome: React.FC = () => {\r\n    const isMounted = useIsMounted();\r\n    const [product] = useAtom<ProductSingleNode>(productAtom);\r\n\r\n    if (!isMounted) return null;\r\n\r\n    if (!product) {\r\n        return (\r\n            <div className=\"flex justify-center items-center h-screen flex-col\">\r\n                <Loader variant='spinner' className=\"h-8 w-8\" />\r\n                <span className=\"ml-2\">Need to load data here...</span>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return <EditVariantPlans product={product} />\r\n};\r\n\r\n\r\nexport default SelectVariantPlansHome;","export const CURRENT_APP_INSTALLATION_FRAGMENT = `#graphql\r\n  fragment currentAppInstallation on AppInstallation {\r\n    id\r\n    app {\r\n      id\r\n    }\r\n  }\r\n`;\r\n","import { CURRENT_APP_INSTALLATION_FRAGMENT } from \"../fragments/currentAppInstallation\";\r\n\r\nexport const CURRENT_APP_INSTALLATION = `#graphql\r\n    ${CURRENT_APP_INSTALLATION_FRAGMENT}\r\n    query CurrentAppInstallation {\r\n        currentAppInstallation {\r\n            ...currentAppInstallation\r\n        }\r\n    }\r\n`;","\r\nexport const CURRENT_SHOP = `#graphql\r\n   query CurrentShop {\r\n    shop{\r\n        currencyCode\r\n        currencyFormats{\r\n            moneyFormat\r\n            moneyWithCurrencyFormat\r\n        }\r\n    }\r\n}\r\n`;","export const SUBSCRIPTION_BILLING_CYCLES_QUERY = `#graphql\r\nquery subscriptionBillingCycles($subscriptionContractId: ID!,\r\n$billingCyclesIndexRangeSelector:SubscriptionBillingCyclesIndexRangeSelector,\r\n$billingCyclesDateRangeSelector:SubscriptionBillingCyclesDateRangeSelector\r\n) {\r\n  subscriptionBillingCycles(\r\n    first: 50, \r\n    contractId: $subscriptionContractId,\r\n    billingCyclesIndexRangeSelector:  $billingCyclesIndexRangeSelector\r\n    billingCyclesDateRangeSelector:  $billingCyclesDateRangeSelector\r\n    ) {\r\n    edges {\r\n      node {\r\n        billingAttemptExpectedDate\r\n        edited\r\n        skipped\r\n        status\r\n        cycleIndex\r\n        sourceContract {\r\n            customer{\r\n                firstName\r\n                lastName\r\n                email\r\n                displayName\r\n                addressesV2(first: 10) {\r\n                edges{\r\n                    cursor\r\n                    node{\r\n                        id\r\n                        address1\r\n                        address2\r\n                        city\r\n                        country\r\n                        province\r\n                        zip\r\n                    }\r\n                }\r\n            }\r\n            }\r\n            deliveryPrice {\r\n                amount\r\n                currencyCode\r\n            }\r\n            deliveryMethod {\r\n            ... on SubscriptionDeliveryMethodShipping {\r\n              __typename\r\n              shippingOption {\r\n                code\r\n                description\r\n                presentmentTitle\r\n                title\r\n              }\r\n            }\r\n          }\r\n          lines(first: 10) {\r\n            edges {\r\n              cursor\r\n              node {\r\n                variantTitle\r\n                variantImage {\r\n                  url(transform: {maxHeight: 48, maxWidth: 48})\r\n                }\r\n                title\r\n                sku\r\n                quantity\r\n                lineDiscountedPrice {\r\n                  amount\r\n                  currencyCode\r\n                }\r\n                taxable\r\n                currentPrice {\r\n                  amount\r\n                  currencyCode\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`;","export const SUBSCRIPTION_CONTRACT_QUERY = `#graphql\r\nquery SubscriptionContract(\r\n    $subscriptionContractId: ID!\r\n) {\r\n   subscriptionContract(\r\n    id: $subscriptionContractId\r\n   ){\r\n        id\r\n        createdAt\r\n        customAttributes{\r\n            key\r\n            value\r\n        }\r\n        note\r\n        deliveryMethod{\r\n            ... on SubscriptionDeliveryMethodShipping {\r\n                address{\r\n                    address1\r\n                    address2\r\n                    city\r\n                    company\r\n                    country\r\n                    countryCode\r\n                    firstName\r\n                    lastName\r\n                    name\r\n                    phone\r\n                    province\r\n                    provinceCode\r\n                    zip\r\n                }\r\n            }\r\n        }\r\n        lines(first: 10){\r\n            edges{\r\n                cursor\r\n                node{\r\n                    id\r\n                    title\r\n                    variantTitle\r\n                    quantity\r\n                    variantId\r\n                    productId\r\n                    lineDiscountedPrice{\r\n                        amount\r\n                        currencyCode\r\n                    }\r\n                    variantImage{\r\n                        url(transform:  {\r\n                           maxHeight: 48,\r\n                           maxWidth: 48\r\n                        })\r\n                    }\r\n                    customAttributes {\r\n                        key\r\n                        value\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        deliveryPolicy{\r\n            interval\r\n            intervalCount\r\n        }\r\n        billingPolicy{\r\n            intervalCount\r\n            interval\r\n        }\r\n        customer{\r\n            id\r\n            firstName\r\n            lastName\r\n            email\r\n            displayName\r\n            addressesV2(first: 10) {\r\n                edges{\r\n                    cursor\r\n                    node{\r\n                        address1\r\n                        address2\r\n                        city\r\n                        country\r\n                        province\r\n                        zip\r\n                        id\r\n                        firstName\r\n                        lastName\r\n                        provinceCode\r\n                        phone\r\n                        company\r\n                        countryCodeV2\r\n                    }\r\n                }\r\n            }\r\n            paymentMethods(first: 10) {\r\n                edges{\r\n                    cursor\r\n                    node{\r\n                        instrument{\r\n                            ... on CustomerCreditCard {\r\n                                firstDigits\r\n                                source\r\n                                brand\r\n                                expiresSoon\r\n                                expiryMonth\r\n                                expiryYear\r\n                                isRevocable\r\n                                lastDigits\r\n                                maskedNumber\r\n                                name\r\n                                virtualLastDigits\r\n                            }\r\n                            ... on CustomerPaypalBillingAgreement {\r\n                                paypalAccountEmail\r\n                                inactive\r\n                                isRevocable\r\n                            }\r\n                            ... on CustomerShopPayAgreement {\r\n                                __typename\r\n                                expiresSoon\r\n                                expiryMonth\r\n                                expiryYear\r\n                                inactive\r\n                                isRevocable\r\n                                lastDigits\r\n                                maskedNumber\r\n                                name\r\n                            }\r\n\r\n                        }\r\n                        id\r\n                        revokedAt\r\n                        revokedReason\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        customerPaymentMethod{\r\n            instrument{\r\n                ... on CustomerCreditCard {\r\n                    firstDigits\r\n                    source\r\n                    brand\r\n                    expiresSoon\r\n                    expiryMonth\r\n                    expiryYear\r\n                    isRevocable\r\n                    lastDigits\r\n                    maskedNumber\r\n                    name\r\n                    virtualLastDigits\r\n                }\r\n                ... on CustomerPaypalBillingAgreement {\r\n                    paypalAccountEmail\r\n                    inactive\r\n                    isRevocable\r\n                }\r\n                ... on CustomerShopPayAgreement {\r\n                    __typename\r\n                    expiresSoon\r\n                    expiryMonth\r\n                    expiryYear\r\n                    inactive\r\n                    isRevocable\r\n                    lastDigits\r\n                    maskedNumber\r\n                    name\r\n                }\r\n\r\n            }\r\n        }\r\n        discounts(first: 10) {\r\n            edges{\r\n                cursor\r\n                node{\r\n                    id\r\n                    title\r\n                    type\r\n                    value{\r\n                        ... on SubscriptionDiscountFixedAmountValue{\r\n                            amount{\r\n                                amount\r\n                                currencyCode\r\n                            }\r\n                        }\r\n                        ... on SubscriptionDiscountPercentageValue{\r\n                            percentage\r\n                        }\r\n                    }   \r\n                }\r\n\r\n            }\r\n        }\r\n        billingAttempts(first: 10) {\r\n            edges{\r\n                node{\r\n                    id\r\n                    createdAt\r\n                    completedAt\r\n                    nextActionUrl\r\n                    idempotencyKey\r\n                    ready\r\n                    paymentGroupId\r\n                    paymentSessionId\r\n                    originTime\r\n                    errorCode\r\n                    errorMessage\r\n                    order{\r\n                        id\r\n                        customer{\r\n                            firstName\r\n                            lastName\r\n                            email\r\n                            displayName\r\n                            addressesV2(first: 10) {\r\n                                edges{\r\n                                    cursor\r\n                                    node{\r\n                                        id\r\n                                        address1\r\n                                        address2\r\n                                        city\r\n                                        country\r\n                                        province\r\n                                        zip\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        lineItems(first: 10) {\r\n                            edges {\r\n                                cursor\r\n                                node {\r\n                                    variantTitle\r\n                                    title\r\n                                    variant {\r\n                                        image {\r\n                                            url(transform: {maxHeight: 48, maxWidth: 48})\r\n                                        }\r\n                                    }\r\n                                    product{\r\n                                        featuredMedia{\r\n                                            preview{\r\n                                                image{\r\n                                                    url(transform: {maxHeight: 48, maxWidth: 48})\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    sku\r\n                                    quantity\r\n                                    originalTotalSet{\r\n                                        presentmentMoney{\r\n                                            amount\r\n                                            currencyCode\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        capturable\r\n                        currentTaxLines{\r\n                            title\r\n                            ratePercentage\r\n                            priceSet {\r\n                                presentmentMoney {\r\n                                    amount\r\n                                    currencyCode\r\n                                }\r\n                            }\r\n                        }\r\n                        currentTotalPriceSet{\r\n                            presentmentMoney{\r\n                                amount\r\n                                currencyCode\r\n                            }\r\n                        }\r\n                        currentTotalTaxSet{\r\n                            presentmentMoney{\r\n                                amount\r\n                                currencyCode\r\n                            }\r\n                        }\r\n                        currentSubtotalPriceSet{\r\n                            presentmentMoney{\r\n                                amount\r\n                                currencyCode\r\n                            }\r\n                        }\r\n                        shippingLine{\r\n                            id\r\n                            title\r\n                        }\r\n                        currentShippingPriceSet{\r\n                            presentmentMoney{\r\n                                amount\r\n                                currencyCode\r\n                            }\r\n                        }\r\n                        createdAt\r\n                        name\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        orders(first: 10) {\r\n            edges{\r\n                cursor\r\n                node{\r\n                    id\r\n                    customer{\r\n                        firstName\r\n                        lastName\r\n                        email\r\n                        displayName\r\n                        addressesV2(first: 10) {\r\n                            edges{\r\n                                cursor\r\n                                node{\r\n                                    id\r\n                                    address1\r\n                                    address2\r\n                                    city\r\n                                    country\r\n                                    province\r\n                                    zip\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    lineItems(first: 10) {\r\n                        edges {\r\n                            cursor\r\n                            node {\r\n                                variantTitle\r\n                                title\r\n                                variant {\r\n                                    image {\r\n                                        url(transform: {maxHeight: 48, maxWidth: 48})\r\n                                    }\r\n                                }\r\n                                product{\r\n                                    featuredMedia{\r\n                                        preview{\r\n                                            image{\r\n                                                url(transform: {maxHeight: 48, maxWidth: 48})\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                                sku\r\n                                quantity\r\n                                originalTotalSet{\r\n                                    presentmentMoney{\r\n                                        amount\r\n                                        currencyCode\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    capturable\r\n                    currentTaxLines{\r\n                        title\r\n                        ratePercentage\r\n                        priceSet {\r\n                            presentmentMoney {\r\n                                amount\r\n                                currencyCode\r\n                            }\r\n                        }\r\n                    }\r\n                    currentTotalPriceSet{\r\n                        presentmentMoney{\r\n                            amount\r\n                            currencyCode\r\n                        }\r\n                    }\r\n                    currentTotalTaxSet{\r\n                        presentmentMoney{\r\n                            amount\r\n                            currencyCode\r\n                        }\r\n                    }\r\n                    currentSubtotalPriceSet{\r\n                        presentmentMoney{\r\n                            amount\r\n                            currencyCode\r\n                        }\r\n                    }\r\n                    shippingLine{\r\n                        id\r\n                        title\r\n                    }\r\n                    currentShippingPriceSet{\r\n                        presentmentMoney{\r\n                            amount\r\n                            currencyCode\r\n                        }\r\n                    }\r\n                    createdAt\r\n                    name\r\n                }\r\n            }\r\n        }\r\n        status\r\n        nextBillingDate\r\n        createdAt\r\n        updatedAt\r\n    }\r\n}`;\r\n\r\n","import { Link } from '@remix-run/react';\nimport React from 'react';\nimport cn from '../utils/class-names';\n\nexport type BreadcrumbItemProps = {\n  href?: string;\n  className?: string;\n  children: React.ReactNode;\n};\n\nconst BreadcrumbItem = ({\n  href = '#',\n  className,\n  children,\n}: BreadcrumbItemProps) => (\n  <Link\n    to={href}\n    role=\"button\"\n    className={cn('inline-flex items-center gap-2 text-sm', className)}\n  >\n    {children}\n  </Link>\n);\n\nexport interface BreadcrumbProps extends React.HTMLAttributes<HTMLDivElement> {\n  separator?: React.ReactNode;\n  disableCurrent?: boolean;\n  children: React.ReactNode;\n  className?: string;\n  separatorClassName?: string;\n  separatorVariant?: 'default' | 'circle';\n}\n\nconst Breadcrumb = ({\n  separator = '/',\n  disableCurrent = true,\n  children,\n  className,\n  separatorClassName,\n  separatorVariant = 'default',\n}: BreadcrumbProps) => {\n  const numOfItems = React.Children.count(children);\n\n  return (\n    <div className={cn('inline-flex items-center gap-2.5', className)}>\n      {React.Children.map(children, (child, index) => {\n        if (!React.isValidElement<BreadcrumbItemProps>(child)) return child;\n\n        return (\n          <>\n            {React.cloneElement(child, {\n              className: cn(\n                'text-gray-700 last:text-gray-500 font-medium',\n                disableCurrent && 'last:pointer-events-none'\n              ),\n            })}\n            {index < numOfItems - 1 &&\n              (separatorVariant === 'default' ? (\n                <span\n                  className={cn('text-sm text-gray-500', separatorClassName)}\n                >\n                  {separator}\n                </span>\n              ) : (\n                <span className=\"h-1 w-1 rounded-full bg-gray-300\" />\n              ))}\n          </>\n        );\n      })}\n    </div>\n  );\n};\n\nBreadcrumb.Item = BreadcrumbItem;\nBreadcrumb.displayName = 'Breadcrumb';\nexport default Breadcrumb;\n","import Breadcrumb from 'app/packages/ui/breadcrumb';\nimport cn from 'app/packages/utils/class-names';\nimport { Title } from 'rizzui/typography';\n\nexport type PageHeaderTypes = {\n  title: string;\n  breadcrumb: { name: string; href?: string }[];\n  className?: string;\n};\n\nexport default function PageHeader({\n  title,\n  breadcrumb,\n  children,\n  className,\n}: React.PropsWithChildren<PageHeaderTypes>) {\n  return (\n    <header className={cn('mb-6 container xs:-mt-2 lg:mb-7', className)}>\n      <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between\">\n        <div>\n          <Title\n            as=\"h2\"\n            className=\"mb-2 text-[22px] lg:text-2xl 4xl:text-[26px]\"\n          >\n            {title}\n          </Title>\n\n          <Breadcrumb\n            separator=\"\"\n            separatorVariant=\"circle\"\n            className=\"flex-wrap\"\n          >\n            {breadcrumb.map((item) => (\n              <Breadcrumb.Item\n                key={item.name}\n                {...(item?.href && { href: item?.href })}\n              >\n                {item.name}\n              </Breadcrumb.Item>\n            ))}\n          </Breadcrumb>\n        </div>\n        {children}\n      </div>\n    </header>\n  );\n}\n","import { SubscriptionContractStatus } from \"app/shared/subscriptions/SubscriptionsTable/types\";\r\nimport { ShopObject } from \"../shop/shopObject\";\r\n\r\n// Interface for subcription query variables\r\nexport interface SubscriptionContractsVariables {\r\n    first: number | null | undefined; // Number of products to fetch\r\n    last: number | null | undefined; // Number of products to fetch\r\n    after?: string | null; // Cursor for pagination (next page)\r\n    before?: string | null; // Cursor for pagination (previous page)\r\n    query?: string; // Filter query, e.g., \"status:ACTIVE\"\r\n    reverse?: boolean; // Sorting order (true = DESC, false = ASC)\r\n}\r\n\r\n\r\nexport interface SubscriptionContractsResponse {\r\n    response: {\r\n        shop: ShopObject\r\n        subscriptionContracts: {\r\n            edges: SubscriptionContractEdge[];\r\n            pageInfo: PageInfo;\r\n        };\r\n        currentAppInstallation: CurrentAppInstallation\r\n    }\r\n}\r\n\r\nexport type CurrentAppInstallation = {\r\n    app: {\r\n        id: string\r\n    }\r\n    id: string\r\n\r\n}\r\n\r\nexport type TableData = TransformedContract;\r\n\r\nexport type SubscripiontLinesTablesData = SubscriptionLinesTransformedData\r\n\r\nexport interface SubscriptionLinesTransformedData {\r\n    id: string | null;\r\n    title: string;\r\n    variantTitle: string;\r\n    quantity: number;\r\n    lineDiscountedPrice: Money;\r\n    variantImage?: VariantImage;\r\n    nextBillingDate?: string;\r\n    deliveryPolicyInterval: string;\r\n    deliveryPolicyIntervalCount: number;\r\n    billingPolicyInterval: string;\r\n    billingPolicyIntervalCount: number;\r\n    shop: ShopObject;\r\n    otherActions: OtherAactions;\r\n    status: SubscriptionContractSubscriptionStatus,\r\n    note?: string;\r\n    node?: SubscriptionLineItem\r\n}\r\n\r\n\r\nexport interface TransformedContract {\r\n    id: number | null;\r\n    variantTitle: string;\r\n    quantity: number;\r\n    lineDiscountedPrice: string;\r\n    deliveryPolicyInterval: string;\r\n    deliveryPolicyIntervalCount: number;\r\n    billingPolicyInterval: string;\r\n    billingPolicyIntervalCount: number;\r\n    customerFirstName: string;\r\n    customerLastName: string;\r\n    customerName: string;\r\n    customerEmail: string;\r\n    status: string;\r\n    moneyFormat: string\r\n    nextBillingDate: string\r\n    onRowClick: () => void;\r\n}\r\n\r\nexport interface SubscriptionContractsNextParams {\r\n    first: number;\r\n    after?: string | null;\r\n    before?: string | null;\r\n}\r\n\r\nexport interface PageInfo {\r\n    hasNextPage: boolean;\r\n    hasPreviousPage: boolean;\r\n    startCursor?: string;\r\n    endCursor?: string;\r\n}\r\n\r\nexport interface SubscriptionContractsFilterQuery {\r\n    [key: string]: string | number | boolean | undefined;\r\n}\r\n\r\nexport interface SubscriptionContractEdge {\r\n    cursor: string;\r\n    node: SubscriptionContractNode;\r\n}\r\n\r\nexport interface SubscriptionContractNode {\r\n    id: string;\r\n    lines: {\r\n        edges: SubscriptionLineEdge[];\r\n    };\r\n    deliveryPolicy: DeliveryPolicy;\r\n    deliveryPrice?: Money;\r\n    billingPolicy: BillingPolicy;\r\n    customer: Customer;\r\n    status: SubscriptionContractSubscriptionStatus\r\n    nextBillingDate: string;\r\n    deliveryMethod: DeliveryMethod;\r\n    orders?: OrderResponse;\r\n    createdAt?: string;\r\n    customAttributes: CustomAttributes;\r\n    note: string;\r\n    billingAttempts: BillingAttempts;\r\n}\r\n\r\nexport interface BillingAttempts {\r\n    edges: {\r\n        node: BillingAttempt;\r\n    }[];\r\n}\r\n\r\nexport interface BillingAttempt {\r\n    id: string;\r\n    createdAt: string;\r\n    completedAt: string | null;\r\n    nextActionUrl: string | null;\r\n    idempotencyKey: string | null;\r\n    ready: boolean;\r\n    paymentGroupId: string | null;\r\n    paymentSessionId: string | null;\r\n    originTime: string | null;\r\n    errorCode: string | null;\r\n    errorMessage: string | null;\r\n    order: OrderNode;\r\n}\r\n\r\nexport interface OrderResponse {\r\n    edges: OrderEdge[];\r\n}\r\n\r\nexport interface OrderEdge {\r\n    cursor: string;\r\n    node: OrderNode;\r\n}\r\n\r\nexport interface OrderNode {\r\n    id: string;\r\n    lineItems: {\r\n        edges: LineItemEdge[];\r\n    };\r\n    capturable: boolean;\r\n    currentTaxLines: TaxLine[];\r\n    currentTotalPriceSet: PriceSet;\r\n    currentTotalTaxSet: PriceSet;\r\n    currentSubtotalPriceSet: PriceSet;\r\n    shippingLine: ShippingLine;\r\n    currentShippingPriceSet: PriceSet;\r\n    createdAt: string;\r\n    name: string;\r\n    customer: Customer\r\n}\r\n\r\nexport interface LineItemEdge {\r\n    cursor: string;\r\n    node: LineItemNode;\r\n}\r\n\r\nexport interface LineItemNode {\r\n    variantTitle: string;\r\n    title: string;\r\n    variant: {\r\n        image: Image | null;\r\n    };\r\n    sku: string;\r\n    quantity: number;\r\n    originalTotalSet: PriceSet;\r\n    product: {\r\n        featuredMedia: {\r\n            preview: {\r\n                image: Image;\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\nexport interface Image {\r\n    url: string;\r\n}\r\n\r\nexport interface TaxLine {\r\n    title: string;\r\n    ratePercentage: number;\r\n    priceSet: PriceSet;\r\n}\r\n\r\nexport interface PriceSet {\r\n    presentmentMoney: Money;\r\n}\r\n\r\nexport interface ShippingLine {\r\n    id: string | null;\r\n    title: string;\r\n}\r\n\r\nexport interface SubscriptionContractSingleNode extends SubscriptionContractNode {\r\n    customerPaymentMethod: PaymentMethod\r\n    discounts?: Discounts;\r\n    shop: ShopObject;\r\n    subscriptionBillingCycles: SubscriptionBillingCycles\r\n}\r\n\r\nexport interface OtherAactions {\r\n    setIsRescheduleModalOpen: (value: boolean) => void\r\n    setIsEditOrderFrequencyModalOpen: (value: boolean) => void\r\n    setIsCancelSubscriptionModalOpen: (value: boolean) => void\r\n    setIsReactiveSubscriptionModalOpen: (value: boolean) => void\r\n    setIsEditLineItemAttributesModalOpen: (value: boolean) => void\r\n    setSubscriptionLine: (value: any) => void\r\n    setIsEditSubscriptionProductModalOpen: (value: any) => void\r\n    setIsSwapProductModalOpen: (value: any) => void\r\n}\r\n\r\nexport interface OtherAactionsUpCommingOrders {\r\n    setIsRescheduleModalOpen: (value: any) => void\r\n    setSelectedUpcommingOrders: (value: any) => void\r\n}\r\n\r\n\r\nexport interface SubscriptionBillingCycles {\r\n    edges: BillingCycleEdge[];\r\n}\r\n\r\nexport interface BillingCycleNode {\r\n    billingAttemptExpectedDate: string;\r\n    edited: boolean;\r\n    skipped: boolean;\r\n    status: string;\r\n    sourceContract: SubscriptionContractNode;\r\n    cycleIndex: number | string\r\n}\r\n\r\nexport interface BillingCycleEdge {\r\n    node: BillingCycleNode;\r\n}\r\n\r\n\r\nexport interface Discounts {\r\n    edges: {\r\n        cursor: string;\r\n        node: Discount;\r\n    }[];\r\n}\r\n\r\nexport interface Discount {\r\n    id: string;\r\n    title: string;\r\n    type: string;\r\n    value: DiscountValue;\r\n}\r\n\r\nexport type DiscountValue =\r\n    | SubscriptionDiscountFixedAmountValue\r\n    | SubscriptionDiscountPercentageValue;\r\n\r\n\r\nexport interface SubscriptionDiscountFixedAmountValue {\r\n    amount: Money;\r\n}\r\n\r\nexport interface SubscriptionDiscountPercentageValue {\r\n    percentage: number;\r\n}\r\n\r\nexport enum SubscriptionContractSubscriptionStatus {\r\n    ACTIVE = \"ACTIVE\",\r\n    CANCELLED = \"CANCELLED\",\r\n    EXPIRED = \"EXPIRED\",\r\n    FAILED = \"FAILED\",\r\n    PAUSED = \"PAUSED\",\r\n}\r\n\r\nexport enum SubscriptionBillingCycleScheduleEditInputScheduleEditReason {\r\n    BUYER_INITIATED = \"BUYER_INITIATED\",\r\n    DEV_INITIATED = \"DEV_INITIATED\",\r\n    MERCHANT_INITIATED = \"MERCHANT_INITIATED\"\r\n}\r\n\r\n\r\nexport interface SubscriptionLineEdge {\r\n    cursor: string;\r\n    node: SubscriptionLineItem;\r\n}\r\n\r\nexport interface SubscriptionLineItem {\r\n    id?: string;\r\n    variantTitle: string;\r\n    quantity: number;\r\n    lineDiscountedPrice: Money\r\n    variantImage?: VariantImage;\r\n    title?: string;\r\n    sku?: string;\r\n    currentPrice?: Money\r\n    productId?: string;\r\n    variantId?: string;\r\n    otherActions?: OtherAactions;\r\n    customAttributes?: CustomAttributes,\r\n    node?: SubscriptionLineItem\r\n}\r\n\r\n\r\nexport interface ShippingOption {\r\n    code: string;\r\n    description: string | null;\r\n    presentmentTitle: string;\r\n    title: string;\r\n}\r\n\r\nexport interface DeliveryMethod {\r\n    shippingOption: ShippingOption;\r\n    address: Address\r\n}\r\n\r\n\r\nexport interface VariantImage {\r\n    url: string;\r\n}\r\n\r\nexport interface Money {\r\n    amount: string;\r\n    currencyCode: string;\r\n}\r\n\r\nexport interface DeliveryPolicy {\r\n    interval: string;\r\n    intervalCount: number;\r\n}\r\n\r\nexport interface BillingPolicy {\r\n    interval: string;\r\n    intervalCount: number;\r\n}\r\n\r\nexport interface Customer {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    displayName: string;\r\n    addressesV2?: AddressesV2;\r\n    paymentMethods?: PaymentMethods;\r\n    id?: string;\r\n}\r\n\r\nexport interface PaymentMethods {\r\n    edges: {\r\n        cursor: string;\r\n        node: PaymentMethod;\r\n    }[];\r\n}\r\n\r\nexport interface PaymentMethod {\r\n    id: string;\r\n    instrument: PaymentInstrument;\r\n    revokedAt?: string | null;\r\n    revokedReason?: string | null;\r\n}\r\n\r\nexport interface PaymentInstrument {\r\n    firstDigits: string;\r\n    lastDigits: string;\r\n    maskedNumber: string;\r\n    source: string;\r\n    brand: string;\r\n    expiresSoon: boolean;\r\n    expiryMonth: number;\r\n    expiryYear: number;\r\n    isRevocable: boolean;\r\n    name: string;\r\n    virtualLastDigits?: string | null;\r\n}\r\n\r\nexport interface CustomAttribute {\r\n    key: string;\r\n    value: string;\r\n}\r\n\r\nexport type CustomAttributes = CustomAttribute[];\r\n\r\nexport interface Address {\r\n    address1: string;\r\n    address2?: string | null;\r\n    city: string;\r\n    country: string;\r\n    province?: string | null;\r\n    zip: string;\r\n    id?: string;\r\n    firstName?: string;\r\n    lastName?: string;\r\n    phone?: string;\r\n    company?: string;\r\n    countryCode?: string\r\n    countryCodeV2?: string;\r\n    name?: string;\r\n    provinceCode?: string\r\n}\r\n\r\nexport interface AddressesV2 {\r\n    edges: {\r\n        cursor: string;\r\n        node: Address;\r\n    }[];\r\n}\r\n\r\n\r\n\r\n","import { SubscriptionContractSubscriptionStatus } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { Badge, Box, Text } from \"rizzui\";\r\nconst SubscriptionStatusBadge = ({\r\n    status\r\n}: {\r\n    status: SubscriptionContractSubscriptionStatus\r\n}) => {\r\n    // Map status to badge colors\r\n    const statusColors: Record<SubscriptionContractSubscriptionStatus, string> = {\r\n        [SubscriptionContractSubscriptionStatus.ACTIVE]: \"success\",\r\n        [SubscriptionContractSubscriptionStatus.CANCELLED]: \"danger\",\r\n        [SubscriptionContractSubscriptionStatus.EXPIRED]: \"gray\",\r\n        [SubscriptionContractSubscriptionStatus.FAILED]: \"warning\",\r\n        [SubscriptionContractSubscriptionStatus.PAUSED]: \"info\",\r\n    };\r\n    return (\r\n        <Box className='flex gap-1 items-center'>\r\n            <Badge renderAsDot color={statusColors[status] as any} />\r\n            <Text className='capitalize'>{status}</Text>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default SubscriptionStatusBadge","import { SubscriptionContractSingleNode } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { atom } from \"jotai\";\r\n\r\nexport const subscriptionContractAtom = atom<SubscriptionContractSingleNode>();","import { extractNumericId } from 'app/packages/utils/shopifyIdUtils';\r\nimport { SubscriptionContractSingleNode } from 'app/types/subscription/subscriptionQueryTypes';\r\nimport { Box, Flex, Text, Title } from \"rizzui\";\r\nimport SubscriptionStatusBadge from './SubscriptionStatusBadge';\r\nimport { useAtom } from 'jotai';\r\nimport { subscriptionContractAtom } from 'app/states/subscriptionContractAtom';\r\n\r\n\r\nconst SubscriptionTopBlock = () => {\r\n    const [subscriptionContract] = useAtom(subscriptionContractAtom);\r\n\r\n    if (!subscriptionContract) {\r\n        return null; // Handle the case where subscriptionContract is undefined\r\n    }\r\n\r\n    const { status, customer: { displayName }, id } = subscriptionContract;\r\n    const numbericSubscriptionId = extractNumericId(id);\r\n    return (\r\n        <Flex direction=\"col\" gap=\"0\">\r\n            <Box className=\"flex gap-3\">\r\n                <Title className=\"text-md\">Subscription #{numbericSubscriptionId}</Title>\r\n                <SubscriptionStatusBadge status={status} />\r\n            </Box>\r\n            <Text className=\"text-sm text-primary\">{displayName}</Text>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default SubscriptionTopBlock","import React from \"react\";\r\nimport { Flex, Text, Dropdown } from \"rizzui\";\r\nimport { IconType } from \"react-icons\";\r\n\r\ninterface DropdownActionItemProps {\r\n    icon: IconType;\r\n    label: string;\r\n    onClick?: () => void;\r\n}\r\n\r\nconst DropdownActionItem: React.FC<DropdownActionItemProps> = ({ icon: Icon, label, onClick }) => {\r\n    return (\r\n        <Dropdown.Item onClick={onClick}>\r\n            <Flex align=\"center\" gap=\"2\">\r\n                <Icon />\r\n                <Text>{label}</Text>\r\n            </Flex>\r\n        </Dropdown.Item>\r\n    );\r\n};\r\n\r\nexport default DropdownActionItem;\r\n","'use client';\nimport PhoneInput, { PhoneInputProps } from 'react-phone-input-2';\nimport { cn, FieldError, FieldHelperText, FieldClearButton } from 'rizzui';\nimport 'react-phone-input-2/lib/style.css';\n\nconst labelClasses = {\n  size: {\n    sm: 'text-xs mb-1',\n    md: 'text-sm mb-1.5',\n    lg: 'text-sm mb-1.5',\n    xl: 'text-base mb-2',\n  },\n};\n\nconst inputClasses = {\n  base: 'block peer !w-full focus:outline-none transition duration-200 disabled:!bg-gray-100 disabled:!text-gray-500 disabled:placeholder:!text-gray-500 disabled:!cursor-not-allowed disabled:!border-muted',\n  error:\n    '!border-red not-read-only:hover:enabled:!border-red not-read-only:focus:enabled:!border-red not-read-only:focus:!ring-red',\n  size: {\n    sm: 'py-1 !text-xs !h-8 !leading-[32px]',\n    md: 'py-2 !text-sm !h-10 !leading-[40px]',\n    lg: 'py-2 !text-base !h-12 !leading-[48px]',\n    xl: 'py-2.5 !text-base !h-14 !leading-[56px]',\n  },\n  rounded: {\n    none: '!rounded-none',\n    sm: '!rounded-sm',\n    md: '!rounded-md',\n    lg: '!rounded-lg',\n    pill: '!rounded-full',\n  },\n  variant: {\n    flat: '!border-0 focus:ring-2 placeholder:!opacity-90 read-only:focus:!ring-0 focus:!bg-transparent !bg-primary-lighter/70 focus:!ring-primary/30 !text-primary-dark',\n    outline:\n      '!bg-transparent focus:ring-[0.6px] !border !border-muted read-only:!border-muted read-only:focus:!ring-0 placeholder:!text-gray-500 hover:!border-primary focus:!border-primary focus:!ring-primary',\n    text: '!border-0 focus:ring-2 !bg-transparent hover:!text-primary-dark focus:!ring-primary/30 !text-primary',\n  },\n};\n\nconst buttonClasses = {\n  base: '!border-0 !bg-transparent !static [&>.selected-flag]:!absolute [&>.selected-flag]:!top-[1px] [&>.selected-flag]:!bottom-[1px] [&>.selected-flag]:!left-[1px] [&>.selected-flag.open]:!bg-transparent [&>.selected-flag:hover]:!bg-transparent [&>.selected-flag:focus]:!bg-transparent',\n  size: {\n    sm: '[&>.selected-flag]:!h-[30px]',\n    md: '[&>.selected-flag]:!h-[38px]',\n    lg: '[&>.selected-flag]:!h-[46px]',\n    xl: '[&>.selected-flag]:!h-[54px]',\n  },\n};\n\nconst dropdownClasses = {\n  base: '!shadow-xl !text-sm !max-h-[216px] !w-full !my-1.5 !bg-gray-0 [&>.no-entries-message]:!text-center [&>.divider]:!border-muted',\n  rounded: {\n    none: '!rounded-sm',\n    sm: '!rounded',\n    md: '!rounded-md',\n    lg: '!rounded-lg',\n    pill: '!rounded-xl',\n  },\n  searchBox:\n    '!pr-2.5 !bg-gray-0 [&>.search-box]:!w-full [&>.search-box]:!m-0 [&>.search-box]:!px-3 [&>.search-box]:!py-1 [&>.search-box]:!text-sm [&>.search-box]:!capitalize [&>.search-box]:!h-9 [&>.search-box]:!leading-[36px] [&>.search-box]:!rounded-md [&>.search-box]:!bg-transparent [&>.search-box]:!border-muted [&>.search-box:focus]:!border-gray-400/70 [&>.search-box:focus]:!ring-0 [&>.search-box]:placeholder:!text-gray-500',\n  highlightListColor:\n    '[&>li.country.highlight]:!bg-gray-100 [&>li.country:hover]:!bg-gray-100',\n};\n\nconst clearIconClasses = {\n  base: 'absolute right-2 group-hover/phone-number:visible group-hover/phone-number:translate-x-0 group-hover/phone-number:opacity-100',\n  position: {\n    sm: 'top-[9px]',\n    md: 'top-3',\n    lg: 'top-4',\n    xl: 'top-5',\n  },\n};\n\nexport interface PhoneNumberProps\n  extends Omit<\n    PhoneInputProps,\n    | 'inputClass'\n    | 'buttonClass'\n    | 'containerClass'\n    | 'dropdownClass'\n    | 'searchClass'\n    | 'enableSearch'\n    | 'disableSearchIcon'\n  > {\n  /** Set field label */\n  label?: React.ReactNode;\n  /** Show error message using this prop */\n  error?: string;\n  /** The size of the component. `\"sm\"` is equivalent to the dense input styling. */\n  size?: keyof typeof inputClasses.size;\n  /** The rounded variants are: */\n  rounded?: keyof typeof inputClasses.rounded;\n  /** The variants of the component are: */\n  variant?: keyof typeof inputClasses.variant;\n  /** add clearable option */\n  clearable?: boolean;\n  /** add search filed at the top of dropdown list */\n  enableSearch?: boolean;\n  /** clear event */\n  onClear?: (event: React.MouseEvent) => void;\n  /** Use labelClassName prop to do some addition style for the field label */\n  labelClassName?: string;\n  /** Add custom classes for the input field */\n  inputClassName?: string;\n  /** Add custom classes for dropdown button */\n  buttonClassName?: string;\n  /** Add custom classes for dropdown */\n  dropdownClassName?: string;\n  /** Add custom classes for dropdown's search */\n  searchClassName?: string;\n  /** This prop allows you to customize the helper message style */\n  helperClassName?: string;\n  /** This prop allows you to customize the error message style */\n  errorClassName?: string;\n  /** Add helper text. It could be string or a React component */\n  helperText?: React.ReactNode;\n  /** Add custom classes into the component wrapper for extra style like spacing */\n  className?: string;\n}\n\nexport const PhoneNumber = ({\n  size = 'md',\n  rounded = 'md',\n  variant = 'outline',\n  label,\n  helperText,\n  error,\n  clearable,\n  onClear,\n  enableSearch,\n  labelClassName,\n  inputClassName,\n  buttonClassName,\n  dropdownClassName,\n  searchClassName,\n  helperClassName,\n  errorClassName,\n  className,\n  ...props\n}: PhoneNumberProps) => (\n  <div className={cn('rizzui-phone-number', className)}>\n    {label ? (\n      <label className={cn('block', labelClasses.size[size], labelClassName)}>\n        {label}\n      </label>\n    ) : null}\n\n    <div className=\"group/phone-number relative\">\n      <PhoneInput\n        inputClass={cn(\n          inputClasses.base,\n          inputClasses.size[size],\n          inputClasses.rounded[rounded],\n          inputClasses.variant[variant],\n          error && inputClasses.error,\n          inputClassName\n        )}\n        buttonClass={cn(\n          buttonClasses.base,\n          buttonClasses.size[size],\n          // @ts-ignore\n          props.inputProps?.disabled && 'pointer-events-none',\n          // @ts-ignore\n          props.inputProps?.readOnly && 'pointer-events-none',\n          buttonClassName\n        )}\n        dropdownClass={cn(\n          dropdownClasses.base,\n          dropdownClasses.rounded[rounded],\n          dropdownClasses.highlightListColor,\n          dropdownClassName\n        )}\n        searchClass={cn(dropdownClasses.searchBox, searchClassName)}\n        enableSearch={enableSearch}\n        disableSearchIcon\n        {...props}\n      />\n\n      {clearable ? (\n        <FieldClearButton\n          size={size}\n          onClick={onClear}\n          className={cn(clearIconClasses.base, clearIconClasses.position[size])}\n        />\n      ) : null}\n    </div>\n\n    {!error && helperText ? (\n      <FieldHelperText size={size} className={helperClassName}>\n        {helperText}\n      </FieldHelperText>\n    ) : null}\n\n    {error ? (\n      <FieldError size={size} error={error} className={errorClassName} />\n    ) : null}\n  </div>\n);\n","import { useEffect, useState } from \"react\";\r\nimport { FaXmark } from \"react-icons/fa6\";\r\nimport {\r\n    Modal,\r\n    Button,\r\n    Title,\r\n    Text,\r\n    ActionIcon,\r\n    Input,\r\n    Password,\r\n    Checkbox,\r\n    Flex,\r\n    Select,\r\n    Loader,\r\n} from \"rizzui\";\r\n\r\nimport { Country, State, City } from 'country-state-city';\r\nimport { Address } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { PhoneNumber } from \"app/packages/ui/phone-input\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\nimport { useAtom } from \"jotai\";\r\nimport { subscriptionContractAtom } from \"app/states/subscriptionContractAtom\";\r\n\r\ntype EditAddressMOdalProp = {\r\n    modalState: boolean,\r\n    setModalState: (state: boolean) => void\r\n    defaultAddress?: Address;\r\n}\r\n\r\nconst EditAddressModal = ({ modalState, setModalState, defaultAddress }: EditAddressMOdalProp) => {\r\n    const [address, setAddress] = useState<Address>({\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        company: \"\",\r\n        country: \"\",\r\n        address1: \"\",\r\n        address2: \"\",\r\n        city: \"\",\r\n        province: \"\",\r\n        zip: \"\",\r\n        phone: \"\",\r\n        countryCode: \"\",\r\n        provinceCode: \"\"\r\n    });\r\n    const fetcher = useFetcher<any>();\r\n    const [originalAddress, setOriginalAddress] = useState<Address | null>(null);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    // Country and State options\r\n    const countryOptions = Country.getAllCountries().map((country) => ({\r\n        label: country.name,\r\n        value: country.isoCode,\r\n    }));\r\n\r\n    const stateOptions = address.country\r\n        ? State.getStatesOfCountry(address.countryCode).map((state) => ({\r\n            label: state.name,\r\n            value: state.isoCode,\r\n        }))\r\n        : [];\r\n\r\n    // Set default values from props\r\n    useEffect(() => {\r\n        if (defaultAddress) {\r\n            setAddress((prev) => ({ ...prev, ...defaultAddress }));\r\n            setOriginalAddress({ ...defaultAddress });\r\n        }\r\n    }, [defaultAddress]);\r\n\r\n    const handleChange = (field: keyof Address, value: string) => {\r\n        setAddress((prev) => ({ ...prev, [field]: value }));\r\n    };\r\n\r\n    const handleUpdate = () => {\r\n        console.log(\"Updated Address:\", address);\r\n        setIsLoading(true);\r\n        const formData = new FormData();\r\n        formData.append(\"action\", 'updateAddress');\r\n        formData.append(\"address\", JSON.stringify(address));\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    const isAddressEqual = (a: Address, b: Address) => {\r\n        const keys: (keyof Address)[] = [\r\n            \"firstName\", \"lastName\", \"company\", \"country\", \"countryCode\",\r\n            \"address1\", \"address2\", \"city\", \"province\", \"provinceCode\", \"zip\", \"phone\"\r\n        ];\r\n\r\n        return keys.every((key) => (a[key] || \"\") === (b[key] || \"\"));\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log('fetcherdata', fetcher.data);\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n                setIsLoading(false);\r\n\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n\r\n    return (\r\n        <Modal isOpen={modalState} onClose={() => setModalState(false)} containerClassName=\"min-w-[525px] max-h-[400px] overflow-y-auto\">\r\n            <div className=\"m-auto px-7 pt-6 pb-8\">\r\n                {/* Header */}\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Edit Shipping Address</Title>\r\n                    <ActionIcon size=\"sm\" variant={\"text\" as any} onClick={() => setModalState(false)}>\r\n                        <FaXmark className=\"h-auto w-6\" strokeWidth={1.8} />\r\n                    </ActionIcon>\r\n                </div>\r\n\r\n                {/* Form Fields */}\r\n                <div className=\"grid grid-cols-2 gap-y-6 gap-x-5 [&_label>span]:font-medium\">\r\n                    {/* First Name */}\r\n                    <Input\r\n                        label=\"First Name\"\r\n                        placeholder=\"Enter first name\"\r\n                        value={address?.firstName || ''}\r\n                        onChange={(e) => handleChange(\"firstName\", e.target.value)}\r\n                        required\r\n                    />\r\n\r\n                    {/* Last Name */}\r\n                    <Input\r\n                        label=\"Last Name\"\r\n                        placeholder=\"Enter last name\"\r\n                        value={address?.lastName || ''}\r\n                        onChange={(e) => handleChange(\"lastName\", e.target.value)}\r\n                        required\r\n                    />\r\n\r\n                    {/* Company Name (Full Width) */}\r\n                    <div className=\"col-span-2\">\r\n                        <Input\r\n                            label=\"Company Name\"\r\n                            placeholder=\"Enter company name\"\r\n                            value={address?.company || ''}\r\n                            onChange={(e) => handleChange(\"company\", e.target.value)}\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Country (Full Width) */}\r\n                    <div className=\"col-span-2\">\r\n                        <Select\r\n                            label=\"Country\"\r\n                            placeholder=\"Select a country\"\r\n                            searchable={true}\r\n                            options={countryOptions}\r\n                            value={address.country}\r\n                            onChange={(option: any) => handleChange(\"country\", option.value)}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"col-span-1\">\r\n                        <Select\r\n                            label=\"State/Province\"\r\n                            options={stateOptions}\r\n                            searchable={true}\r\n                            placeholder=\"Select State\"\r\n                            value={stateOptions.find((s) => s.value === address.provinceCode) || null}\r\n                            onChange={(selectedOption: any) => handleChange(\"province\", selectedOption?.value || \"\")}\r\n                            disabled={!address.country} // Disable if no country is selected\r\n                        />\r\n                    </div>\r\n\r\n                    {/* Address 1 */}\r\n                    <Input\r\n                        label=\"Address Line 1\"\r\n                        placeholder=\"Enter address line 1\"\r\n                        value={address?.address1 || ''}\r\n                        onChange={(e) => handleChange(\"address1\", e.target.value)}\r\n                        required\r\n                    />\r\n\r\n                    {/* Address 2 */}\r\n                    <Input\r\n                        label=\"Address Line 2\"\r\n                        placeholder=\"Enter address line 2\"\r\n                        value={address?.address2 || \"\"}\r\n                        onChange={(e) => handleChange(\"address2\", e.target.value)}\r\n                    />\r\n\r\n                    {/* City */}\r\n                    <Input\r\n                        label=\"City\"\r\n                        placeholder=\"Enter city\"\r\n                        value={address.city || ''}\r\n                        onChange={(e) => handleChange(\"city\", e.target.value)}\r\n                        required\r\n                    />\r\n\r\n                    {/* Zip Code */}\r\n                    <Input\r\n                        label=\"Zip Code\"\r\n                        placeholder=\"Enter zip code\"\r\n                        value={address.zip || ''}\r\n                        onChange={(e) => handleChange(\"zip\", e.target.value)}\r\n                        required\r\n                    />\r\n\r\n                    <PhoneNumber\r\n                        label=\"Phone\"\r\n                        placeholder=\"Enter phone number\"\r\n                        value={address.phone}\r\n                        onChange={(phone: string) => handleChange(\"phone\", phone)}\r\n                    />\r\n                </div>\r\n\r\n                {/* Action Buttons */}\r\n                <Flex justify=\"end\" gap=\"1\" className=\"mt-8 space-x-1\">\r\n                    <Button variant={\"outline\" as any} onClick={() => {\r\n                        setIsLoading(false)\r\n                        setModalState(false)\r\n                    }}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={handleUpdate}\r\n                        isLoading={isLoading}\r\n                        loader={<Loader variant=\"spinner\" />}\r\n                        disabled={isLoading || !originalAddress || isAddressEqual(address, originalAddress)}\r\n                    >\r\n                        Update\r\n                    </Button>\r\n                </Flex>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nexport default EditAddressModal","import { useState } from \"react\";\r\nimport { FaRegCopy, FaCheck } from \"react-icons/fa\";\r\n\r\ninterface CopyToClipboardProps {\r\n    text: any;\r\n    className?: string;\r\n}\r\n\r\nconst CopyToClipboard: React.FC<CopyToClipboardProps> = ({ text, className }) => {\r\n    const [copied, setCopied] = useState(false);\r\n\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(text);\r\n        setCopied(true);\r\n        setTimeout(() => setCopied(false), 2000); // Reset after 2 seconds\r\n    };\r\n\r\n    return (\r\n        <span\r\n            onClick={handleCopy}\r\n            className={className}\r\n            aria-label=\"Copy to clipboard\"\r\n        >\r\n            {copied ? <FaCheck className=\"text-green-500\" /> : <FaRegCopy />}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default CopyToClipboard;\r\n","import { useFetcher } from \"@remix-run/react\";\r\nimport { CustomAttribute, CustomAttributes } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { useEffect, useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { FaXmark, FaTrash } from \"react-icons/fa6\";\r\nimport {\r\n    Modal,\r\n    Title,\r\n    ActionIcon,\r\n    Button,\r\n    Input,\r\n    Box,\r\n    Flex,\r\n    Loader,\r\n} from \"rizzui\";\r\n\r\n\r\n\r\nconst EditAttrModal = ({\r\n    isEditAttrModalOpen,\r\n    setIsEditAttrModalOpen,\r\n    customAttributes\r\n}: any) => {\r\n    const [attributes, setAttributes] = useState<CustomAttributes>(customAttributes);\r\n    const fetcher = useFetcher<any>();\r\n    const [errors, setErrors] = useState<{ key?: string; value?: string }[]>([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n\r\n    const handleAddAttribute = () => {\r\n        setAttributes((prev) => [...prev, { key: \"\", value: \"\" }]);\r\n        setErrors((prev) => [...prev, {}]);\r\n    };\r\n\r\n    const handleRemove = (index: number) => {\r\n        setAttributes((prev) => prev.filter((_, i) => i !== index));\r\n        setErrors((prev) => prev.filter((_, i) => i !== index));\r\n    };\r\n\r\n    const handleChange = (index: number, field: keyof CustomAttribute, value: string) => {\r\n        setAttributes((prev) =>\r\n            prev.map((item, i) =>\r\n                i === index ? { ...item, [field]: value } : item\r\n            )\r\n        );\r\n\r\n        setErrors((prev) =>\r\n            prev.map((err, i) =>\r\n                i === index ? { ...err, [field]: undefined } : err\r\n            )\r\n        );\r\n    };\r\n\r\n    const handleUpdate = () => {\r\n        const newErrors = attributes.map(attr => ({\r\n            key: !attr.key.trim() ? \"Name is required\" : undefined,\r\n            value: !attr.value.trim() ? \"Value is required\" : undefined\r\n        }));\r\n\r\n        const hasErrors = newErrors.some(err => err.key || err.value);\r\n\r\n        if (hasErrors) {\r\n            setErrors(newErrors);\r\n            return;\r\n        }\r\n\r\n        setIsLoading(true);\r\n        const formData = new FormData();\r\n        formData.append(\"action\", \"updateAttribute\");\r\n        formData.append(\"attributes\", JSON.stringify(attributes));\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    const areAttributesEqual = (a: CustomAttributes, b: CustomAttributes) => {\r\n        if (a.length !== b.length) return false;\r\n        return a.every((attr, i) => attr.key === b[i].key && attr.value === b[i].value);\r\n    };\r\n\r\n    useEffect(() => {\r\n        setAttributes(customAttributes);\r\n        setErrors(customAttributes.map(() => ({})));\r\n    }, [customAttributes]);\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n                setIsLoading(false);\r\n                setIsEditAttrModalOpen(false)\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={isEditAttrModalOpen}\r\n            onClose={() => setIsEditAttrModalOpen(false)}\r\n            containerClassName=\"min-w-[500px]\"\r\n        >\r\n            <div className=\"m-auto p-3\">\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Edit Order Attributes</Title>\r\n                    <ActionIcon\r\n                        size=\"sm\"\r\n                        variant={\"text\" as any}\r\n                        onClick={() => setIsEditAttrModalOpen(false)}\r\n                    >\r\n                        <FaXmark className=\"h-auto w-6\" strokeWidth={1.8} />\r\n                    </ActionIcon>\r\n                </div>\r\n\r\n                <div className=\"space-y-3\">\r\n                    {attributes.length > 0 ? (\r\n                        attributes.map((attr, index) => (\r\n                            <Box key={index} className=\"flex gap-2 items-start\">\r\n                                <Input\r\n                                    placeholder=\"Name\"\r\n                                    className=\"w-[45%]\"\r\n                                    value={attr.key}\r\n                                    onChange={(e) => handleChange(index, \"key\", e.target.value)}\r\n                                    error={errors[index]?.key}\r\n                                />\r\n                                <Input\r\n                                    placeholder=\"Value\"\r\n                                    className=\"w-[45%]\"\r\n                                    value={attr.value}\r\n                                    onChange={(e) => handleChange(index, \"value\", e.target.value)}\r\n                                    error={errors[index]?.value}\r\n                                />\r\n                                <Button\r\n                                    variant={\"text\" as any}\r\n                                    color=\"danger\"\r\n                                    className=\"w-[10%]\"\r\n                                    onClick={() => handleRemove(index)}\r\n                                >\r\n                                    <FaTrash />\r\n                                </Button>\r\n                            </Box>\r\n                        ))\r\n                    ) : null}\r\n\r\n                    {/* Add button shown always, but full width if no attributes */}\r\n                    <Button\r\n                        variant={\"text\" as any}\r\n                        className=\"font-bold text-primary\"\r\n                        onClick={handleAddAttribute}\r\n                    >\r\n                        + Add Order Attribute\r\n                    </Button>\r\n                </div>\r\n\r\n                {/* Action Buttons */}\r\n                <Flex justify=\"end\" gap=\"1\" className=\"mt-8 space-x-1\">\r\n                    <Button variant={\"outline\" as any} onClick={() => {\r\n\r\n                    }}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={handleUpdate}\r\n                        isLoading={isLoading}\r\n                        loader={<Loader variant=\"spinner\" />}\r\n                        disabled={isLoading || areAttributesEqual(attributes, customAttributes)}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </Flex>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default EditAttrModal;\r\n","import { useFetcher } from \"@remix-run/react\";\r\nimport { useEffect, useState } from \"react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { FaXmark } from \"react-icons/fa6\";\r\nimport {\r\n    Modal,\r\n    Title,\r\n    ActionIcon,\r\n    Button,\r\n    Textarea,\r\n    Flex,\r\n    Loader,\r\n} from \"rizzui\";\r\n\r\nconst EditOrderNoteModal = ({\r\n    isEditOrderNoteModalOpen,\r\n    setEditOrderNoteModalOpen,\r\n    orderNoteDefault,\r\n}: any) => {\r\n    const [orderNote, setOrderNote] = useState<string>(orderNoteDefault || \"\");\r\n    const fetcher = useFetcher<any>();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const canSave = orderNote.trim() !== \"\" && orderNote !== orderNoteDefault;\r\n\r\n    const handleUpdate = () => {\r\n        setIsLoading(true);\r\n        const formData = new FormData();\r\n        formData.append(\"action\", \"updateOrderNote\");\r\n        formData.append(\"orderNote\", orderNote);\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setOrderNote(orderNoteDefault || \"\");\r\n    }, [orderNoteDefault]);\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n                setEditOrderNoteModalOpen(false);\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={isEditOrderNoteModalOpen}\r\n            onClose={() => setEditOrderNoteModalOpen(false)}\r\n            containerClassName=\"min-w-[500px]\"\r\n        >\r\n            <div className=\"m-auto p-3\">\r\n                {/* Header */}\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Order Note</Title>\r\n                    <ActionIcon\r\n                        size=\"sm\"\r\n                        variant={\"text\" as any}\r\n                        onClick={() => setEditOrderNoteModalOpen(false)}\r\n                    >\r\n                        <FaXmark className=\"h-auto w-6\" strokeWidth={1.8} />\r\n                    </ActionIcon>\r\n                </div>\r\n\r\n                {/* Textarea */}\r\n                <Textarea\r\n                    label=\"Message\"\r\n                    placeholder=\"Write your message...\"\r\n                    value={orderNote}\r\n                    onChange={(e) => setOrderNote(e.target.value)}\r\n                    maxLength={5000}\r\n                />\r\n\r\n                {/* Action Buttons */}\r\n                <Flex justify=\"end\" gap=\"1\" className=\"mt-8 space-x-1\">\r\n                    <Button\r\n                        variant={\"outline\" as any}\r\n                        onClick={() => setEditOrderNoteModalOpen(false)}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={handleUpdate}\r\n                        isLoading={isLoading}\r\n                        loader={<Loader variant=\"spinner\" />}\r\n                        disabled={!canSave || isLoading}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </Flex>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default EditOrderNoteModal;\r\n","import { useEffect, useState } from \"react\";\r\nimport { FaHashtag, FaXmark } from \"react-icons/fa6\";\r\nimport {\r\n    Modal,\r\n    Button,\r\n    Title,\r\n    Text,\r\n    ActionIcon,\r\n    Input,\r\n    Password,\r\n    Checkbox,\r\n    Flex,\r\n    Select,\r\n    Loader,\r\n    Box,\r\n} from \"rizzui\";\r\n\r\nimport toast from \"react-hot-toast\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\nimport { useAtom } from \"jotai\";\r\nimport { subscriptionContractAtom } from \"app/states/subscriptionContractAtom\";\r\nimport CopyToClipboard from \"app/shared/CopyToClipboard\";\r\nimport { Address } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { extractNumericId } from \"app/packages/utils/shopifyIdUtils\";\r\nimport EditAttrModal from \"./EditAttrModal\";\r\nimport EditOrderNoteModal from \"./EditOrderNoteModal\";\r\n\r\ntype ViewOrderNoteAndAttributeModalProp = {\r\n    modalState: boolean,\r\n    setModalState: (state: boolean) => void\r\n    shippingAddress?: Address;\r\n    customerAddress?: Address;\r\n}\r\n\r\nconst ViewOrderNoteAndAttributeModal = ({\r\n    modalState,\r\n    setModalState,\r\n    shippingAddress,\r\n    customerAddress\r\n}: ViewOrderNoteAndAttributeModalProp) => {\r\n    const addressId = customerAddress?.id\r\n    const adressNumericId = extractNumericId(addressId || '');\r\n    const [subscriptionContract] = useAtom(subscriptionContractAtom);\r\n    if (!subscriptionContract) return null;\r\n    const { customAttributes, note } = subscriptionContract\r\n    const [isEditAttrModalOpen, setIsEditAttrModalOpen] = useState(false);\r\n    const [isEditOrderNoteModalOpen, setEditOrderNoteModalOpen] = useState(false);\r\n\r\n    return (\r\n        <Modal isOpen={modalState} onClose={() => setModalState(false)} containerClassName=\"min-w-[525px] max-h-[400px] overflow-y-auto\">\r\n            <div className=\"m-auto px-7 pt-6 pb-8\">\r\n                {/* Header */}\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Address details</Title>\r\n                    <ActionIcon size=\"sm\" variant={\"text\" as any} onClick={() => setModalState(false)}>\r\n                        <FaXmark className=\"h-auto w-6\" strokeWidth={1.8} />\r\n                    </ActionIcon>\r\n                </div>\r\n                <div className=\"[&_label>span]:font-medium\">\r\n                    <Flex direction=\"col\" className=\"w-full\">\r\n                        <Box>\r\n                            <Title as=\"h6\" className=\"text-md font-semibold uppercase text-[#848BD4] flex items-center gap-1\">\r\n                                <FaHashtag />\r\n                                Address ID\r\n                            </Title>\r\n                            <Text className=\"flex items-center gap-2 text-sm ms-3 mt-2\">#{adressNumericId}\r\n                                <CopyToClipboard text={adressNumericId} className=\"\" />\r\n                            </Text>\r\n                        </Box>\r\n                        <hr className=\"w-full col-span-1\" />\r\n\r\n                        <Box className=\"w-full\">\r\n                            <Box className=\"flex w-full justify-between\">\r\n                                <Title as=\"h6\" className=\"text-md font-semibold uppercase text-[#848BD4] flex items-center gap-1\">\r\n                                    <FaHashtag />\r\n                                    Order Attributes\r\n                                </Title>\r\n\r\n                                <Button\r\n                                    variant={\"text\" as any}\r\n                                    className=\"font-bold text-primary\"\r\n                                    onClick={() => setIsEditAttrModalOpen(true)}\r\n                                >\r\n                                    Edit\r\n                                </Button>\r\n                            </Box>\r\n\r\n                            <Box className=\"ms-3 mt-2 space-y-1 w-full\">\r\n                                {customAttributes && customAttributes.length > 0 ? (\r\n                                    customAttributes.map((attr, index) => (\r\n                                        <Text key={index} className=\"flex items-center gap-2 text-sm\">\r\n                                            <span className=\"font-semibold\">{attr.key}:</span> {attr.value}\r\n                                        </Text>\r\n                                    ))\r\n                                ) : (\r\n                                    <Text className=\"text-sm\">None</Text>\r\n                                )}\r\n                            </Box>\r\n                        </Box>\r\n\r\n                        <hr className=\"w-full col-span-1\" />\r\n\r\n                        <Box className=\"w-full\">\r\n                            <Box className=\"flex w-full justify-between\">\r\n                                <Title as=\"h6\" className=\"text-md font-semibold uppercase text-[#848BD4] flex items-center gap-1\">\r\n                                    <FaHashtag />\r\n                                    Order Note\r\n                                </Title>\r\n\r\n                                <Button\r\n                                    variant={\"text\" as any}\r\n                                    className=\"font-bold text-primary\"\r\n                                    onClick={() => setEditOrderNoteModalOpen(true)}\r\n                                >\r\n                                    Edit\r\n                                </Button>\r\n                            </Box>\r\n\r\n                            <Box className=\"ms-3 mt-2 space-y-1 w-full\">\r\n                                <Text className=\"text-sm\">{note ? note : 'None'}</Text>\r\n                            </Box>\r\n                        </Box>\r\n                    </Flex>\r\n                </div>\r\n            </div>\r\n            <EditAttrModal\r\n                isEditAttrModalOpen={isEditAttrModalOpen}\r\n                setIsEditAttrModalOpen={setIsEditAttrModalOpen}\r\n                customAttributes={customAttributes}\r\n            />\r\n            <EditOrderNoteModal\r\n                isEditOrderNoteModalOpen={isEditOrderNoteModalOpen}\r\n                setEditOrderNoteModalOpen={setEditOrderNoteModalOpen}\r\n                orderNoteDefault={note}\r\n            />\r\n\r\n        </Modal>\r\n    )\r\n}\r\n\r\n\r\nexport default ViewOrderNoteAndAttributeModal","import { Flex, Text, Dropdown, Button } from \"rizzui\";\r\nimport { BsChevronDown } from \"react-icons/bs\";\r\nimport { PiPencil } from \"react-icons/pi\";\r\nimport { FaBars } from \"react-icons/fa6\";\r\nimport DropdownActionItem from \"./DropdownActionItem\";\r\nimport { useState } from \"react\";\r\nimport { Customer } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { useAtom } from \"jotai\";\r\nimport { subscriptionContractAtom } from \"app/states/subscriptionContractAtom\";\r\nimport EditAddressModal from \"./Modals/EditAddressModal\";\r\nimport ViewOrderNoteAndAttributeModal from \"./Modals/ViewOrderNoteAndAttributeModal\";\r\n\r\nconst ACTIONS = [\r\n    { icon: PiPencil, label: \"Edit Address\", action: \"edit_address\" },\r\n    { icon: FaBars, label: \"View order note & attributes\", action: \"edit_orderNote\" },\r\n];\r\n\r\nconst SubscriptionActions = ({\r\n    customer\r\n}: {\r\n    customer: Customer\r\n}) => {\r\n    const [isEditAddressOpen, setIsEditAddressOpen] = useState(false);\r\n    const [isViewOrderNoteModalOpen, setIsViewOrderNoteModalOpen] = useState(false);\r\n\r\n    const [subscriptionContract] = useAtom(subscriptionContractAtom);\r\n\r\n    if (!subscriptionContract) {\r\n        return null; // Handle the case where subscriptionContract is undefined\r\n    }\r\n\r\n    const handleActionClick = (action: string) => {\r\n        if (action === \"edit_address\") {\r\n            setIsEditAddressOpen(true);\r\n        } else {\r\n            setIsViewOrderNoteModalOpen(true);\r\n        }\r\n\r\n    };\r\n\r\n    const { deliveryMethod: { address } } = subscriptionContract;\r\n    const customerAddress = subscriptionContract.customer.addressesV2?.edges[0].node\r\n    return (\r\n        <>\r\n            <Dropdown>\r\n                <Dropdown.Trigger>\r\n                    <Button as=\"span\" variant={\"text\" as any} color=\"primary\" className=\"text-primary font-bold text-md\">\r\n                        Action <BsChevronDown className=\"ml-2 w-5\" />\r\n                    </Button>\r\n                </Dropdown.Trigger>\r\n                <Dropdown.Menu className=\"min-w-[280px]\">\r\n                    {ACTIONS.map((action, index) => (\r\n                        <DropdownActionItem\r\n                            key={index}\r\n                            icon={action.icon}\r\n                            label={action.label}\r\n                            onClick={() => handleActionClick(action.action)}\r\n                        />\r\n                    ))}\r\n                </Dropdown.Menu>\r\n            </Dropdown>\r\n            <EditAddressModal\r\n                modalState={isEditAddressOpen}\r\n                setModalState={setIsEditAddressOpen}\r\n                defaultAddress={address} />\r\n            <ViewOrderNoteAndAttributeModal\r\n                modalState={isViewOrderNoteModalOpen}\r\n                setModalState={setIsViewOrderNoteModalOpen}\r\n                shippingAddress={address}\r\n                customerAddress={customerAddress}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default SubscriptionActions;\r\n","import { Flex, Text, Button, type ButtonProps } from \"rizzui\";\r\nimport { FaRegCreditCard } from \"react-icons/fa6\";\r\n// Extracted PaymentMethod Button Component\r\n\r\nconst PaymentMethodButton = ({ brand, lastDigits, ...props }: { brand: string; lastDigits: string } & ButtonProps) => (\r\n    <Button variant={\"outline\" as any} {...props}>\r\n        <Flex gap=\"1\" align=\"center\">\r\n            <FaRegCreditCard />\r\n            <Text className=\"capitalize\">{brand}</Text>\r\n            <Text>••••{lastDigits}</Text>\r\n        </Flex>\r\n    </Button>\r\n);\r\n\r\nexport default PaymentMethodButton","import { Flex, Text, Button, type ButtonProps } from \"rizzui\";\r\nimport { FaTag } from \"react-icons/fa6\";\r\n\r\nconst DiscountButton = ({ discountTitle, ...props }: { discountTitle?: string } & ButtonProps) => (\r\n    <Button variant={\"outline\" as any} {...props}>\r\n        <Flex gap=\"1\" align=\"center\">\r\n            <FaTag />\r\n            <Text className=\"capitalize\">{discountTitle || \"No Discount\"}</Text>\r\n        </Flex>\r\n    </Button>\r\n);\r\n\r\nexport default DiscountButton;","export default function CheckCircleIcon({ ...props }: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      {...props}\n    >\n      <path\n        fill=\"currentColor\"\n        fillRule=\"evenodd\"\n        d=\"M3.85 12a8.15 8.15 0 0110.697-7.744.85.85 0 10.53-1.615A9.841 9.841 0 0012 2.15c-5.44 0-9.85 4.41-9.85 9.85 0 5.44 4.41 9.85 9.85 9.85 5.44 0 9.85-4.41 9.85-9.85a.85.85 0 00-1.7 0 8.15 8.15 0 01-16.3 0zm15.752-4.4a.85.85 0 10-1.204-1.2l-6.348 6.376-2.43-2.598a.85.85 0 10-1.241 1.16l3.03 3.242a.85.85 0 001.223.02l6.97-7z\"\n        clipRule=\"evenodd\"\n      />\n    </svg>\n  );\n}\n","import { useEffect, useState } from \"react\";\r\nimport { FaXmark } from \"react-icons/fa6\";\r\nimport {\r\n    Modal,\r\n    Button,\r\n    Title,\r\n    ActionIcon,\r\n    Flex,\r\n    Loader,\r\n    RadioGroup,\r\n    AdvancedRadio,\r\n    Text,\r\n    Alert,\r\n} from \"rizzui\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\nimport { Customer, PaymentMethod } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport CheckCircleIcon from \"app/packages/components/icons/check-circle\";\r\n\r\ntype UpdatePaymentMethodModalProp = {\r\n    modalState: boolean;\r\n    setModalState: (state: boolean) => void;\r\n    activePaymentMethod: PaymentMethod;\r\n    customer: Customer;\r\n};\r\n\r\nconst UpdatePaymentMethodModal = ({\r\n    modalState,\r\n    setModalState,\r\n    activePaymentMethod,\r\n    customer,\r\n}: UpdatePaymentMethodModalProp) => {\r\n    const fetcher = useFetcher<any>();\r\n    const [isSaving, setIsSaving] = useState(false); // For Save button\r\n    const [emailLoadingId, setEmailLoadingId] = useState<string | null>(null);\r\n    const [selectedMethodId, setSelectedMethodId] = useState<string>(\"\");\r\n\r\n    // Initialize with active method ID\r\n    useEffect(() => {\r\n        const defaultId = customer?.paymentMethods?.edges?.find(\r\n            (edge) =>\r\n                edge.node.instrument.lastDigits ===\r\n                activePaymentMethod?.instrument?.lastDigits &&\r\n                edge.node.instrument.brand === activePaymentMethod?.instrument?.brand\r\n        )?.node?.id;\r\n\r\n        if (defaultId) setSelectedMethodId(defaultId);\r\n    }, [activePaymentMethod, customer, modalState]);\r\n\r\n    const handleUpdate = (isUpdate = false, methodId?: string) => {\r\n        if (isUpdate) {\r\n            setIsSaving(true);\r\n        } else if (methodId) {\r\n            setEmailLoadingId(methodId);\r\n        }\r\n        const formData = new FormData();\r\n        const action = isUpdate ? \"updatePaymentMethod\" : \"sendUpdatePaymentMethodEmail\";\r\n        formData.append(\"action\", action);\r\n        formData.append(\"paymentMethodId\", methodId || selectedMethodId);\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        console.log(fetcher.data);\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Email Send successfully!\");\r\n                setModalState(false);\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setIsSaving(false);\r\n            setEmailLoadingId(null);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalState}\r\n            onClose={() => setModalState(false)}\r\n            containerClassName=\"min-w-[625px] max-h-[500px] overflow-y-auto\"\r\n        >\r\n            <div className=\"m-auto px-7 pt-6 pb-8\">\r\n                {/* Header */}\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Update Payment Method</Title>\r\n                    <ActionIcon\r\n                        size=\"sm\"\r\n                        variant={\"text\" as any}\r\n                        onClick={() => setModalState(false)}\r\n                    >\r\n                        <FaXmark className=\"h-auto w-6\" strokeWidth={1.8} />\r\n                    </ActionIcon>\r\n                </div>\r\n\r\n                {/* Form Fields */}\r\n                <div className=\"space-y-4\">\r\n                    <RadioGroup value={selectedMethodId} setValue={setSelectedMethodId} className=\"flex flex-col gap-3\">\r\n                        {customer?.paymentMethods?.edges?.map(({ node }) => (\r\n                            <AdvancedRadio\r\n                                key={node.id}\r\n                                name=\"paymentMethod\"\r\n                                value={node.id}\r\n                                inputClassName=\"[&:checked~span_.icon]:block\"\r\n                            >\r\n                                <span className=\"relative\">\r\n                                    <span className=\"flex justify-between\">\r\n                                        <span className=\"flex gap-2\">\r\n                                            <Text className=\"capitalize\">{node.instrument.brand}</Text>\r\n                                            <Text>•••• {node.instrument.lastDigits}</Text>\r\n                                        </span>\r\n                                        <CheckCircleIcon className=\"icon hidden h-5 w-5 text-secondary\" />\r\n                                    </span>\r\n                                    <Text className=\"text-sm\">\r\n                                        Expires {node.instrument.expiryMonth}/{node.instrument.expiryYear}\r\n                                    </Text>\r\n                                </span>\r\n                                <Button\r\n                                    variant={\"text\" as any}\r\n                                    className=\"font-bold text-primary px-0\"\r\n                                    onClick={() => {\r\n                                        setSelectedMethodId(node.id)\r\n                                        handleUpdate()\r\n                                    }}\r\n                                    isLoading={emailLoadingId === node.id}\r\n                                    loader={<Loader variant=\"spinner\" />}\r\n                                >\r\n                                    Request an update via email\r\n                                </Button>\r\n                            </AdvancedRadio>\r\n                        ))}\r\n                    </RadioGroup>\r\n                </div>\r\n\r\n                <Flex direction=\"col\" className=\"mt-3\">\r\n                    <Alert\r\n                        color=\"info\"\r\n                        variant=\"flat\"\r\n                        icon={<CheckCircleIcon className=\"h-5 w-5\" />}\r\n                    >\r\n                        <Text>\r\n                            Shopify Payments manages all payment method details. If you need the customer to update their payment information, you can\r\n                        </Text>\r\n                    </Alert>\r\n                </Flex>\r\n\r\n                {/* Action Buttons */}\r\n                {(customer?.paymentMethods?.edges?.length ?? 0) > 1 && (\r\n                    <Flex justify=\"end\" gap=\"1\" className=\"mt-8 space-x-1\">\r\n                        <Button\r\n                            variant={\"outline\" as any}\r\n                            onClick={() => setModalState(false)}\r\n                        >\r\n                            Cancel\r\n                        </Button>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            onClick={() => handleUpdate(true)}\r\n                            isLoading={isSaving}\r\n                            loader={<Loader variant=\"spinner\" />}\r\n                            disabled={\r\n                                !selectedMethodId ||\r\n                                isSaving ||\r\n                                selectedMethodId === activePaymentMethod?.id\r\n                            }\r\n                        >\r\n                            Save\r\n                        </Button>\r\n                    </Flex>\r\n                )}\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default UpdatePaymentMethodModal;\r\n","import { useEffect, useState } from \"react\";\r\nimport { FaXmark } from \"react-icons/fa6\";\r\nimport {\r\n    Modal,\r\n    Title,\r\n    ActionIcon,\r\n    Button,\r\n    Input,\r\n    Flex,\r\n    Loader,\r\n    Text,\r\n} from \"rizzui\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { Discounts } from \"app/types/subscription/subscriptionQueryTypes\";\r\n\r\nconst AddDiscountModal = ({\r\n    modalState,\r\n    setModalState,\r\n    discounts,\r\n}: {\r\n    modalState: boolean;\r\n    setModalState: (state: boolean) => void;\r\n    discounts?: Discounts;\r\n}) => {\r\n    const fetcher = useFetcher<any>();\r\n    const [discount, setDiscount] = useState<string>(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const existingDiscount = discounts?.edges?.[0]?.node;\r\n    const canSave = discount.trim() !== \"\";\r\n\r\n    const handleSubmit = (remove = false) => {\r\n        setIsLoading(true);\r\n        const formData = new FormData();\r\n\r\n        if (remove && existingDiscount?.id) {\r\n            formData.append(\"action\", \"removeDiscount\");\r\n            formData.append(\"discountId\", existingDiscount.id);\r\n        } else {\r\n            formData.append(\"action\", \"updateDiscount\");\r\n            formData.append(\"discountCode\", discount);\r\n        }\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher.data.success) {\r\n                toast.success(\"Discount updated successfully!\");\r\n                setModalState(false);\r\n            } else {\r\n                toast.error(fetcher.data.error || \"Something went wrong\");\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal isOpen={modalState} onClose={() => setModalState(false)} containerClassName=\"min-w-[500px]\">\r\n            <div className=\"m-auto p-3\">\r\n                {/* Header */}\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">\r\n                        {existingDiscount ? \"Remove Discount\" : \"Add Discount\"}\r\n                    </Title>\r\n                    <ActionIcon size=\"sm\" variant={\"text\" as any} onClick={() => setModalState(false)}>\r\n                        <FaXmark className=\"h-auto w-6\" strokeWidth={1.8} />\r\n                    </ActionIcon>\r\n                </div>\r\n\r\n                {/* Discount Form */}\r\n                {existingDiscount ? (\r\n                    <>\r\n                        <Text className=\"text-sm mb-4\">\r\n                            Are you sure you want to remove the discount code <strong>{existingDiscount.title}</strong> from this address?\r\n                        </Text>\r\n                        <Flex justify=\"end\" gap=\"1\" className=\"mt-8 space-x-1\">\r\n                            <Button variant={\"outline\" as any} onClick={() => setModalState(false)}>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button\r\n                                color=\"danger\"\r\n                                onClick={() => handleSubmit(true)}\r\n                                isLoading={isLoading}\r\n                                loader={<Loader variant=\"spinner\" />}\r\n                            >\r\n                                Remove Discount\r\n                            </Button>\r\n                        </Flex>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Input\r\n                            label=\"Discount\"\r\n                            placeholder=\"Enter discount code\"\r\n                            value={discount}\r\n                            onChange={(e) => setDiscount(e.target.value)}\r\n                        />\r\n\r\n                        <Flex justify=\"end\" gap=\"1\" className=\"mt-8 space-x-1\">\r\n                            <Button variant={\"outline\" as any} onClick={() => setModalState(false)}>\r\n                                Cancel\r\n                            </Button>\r\n                            <Button\r\n                                color=\"primary\"\r\n                                onClick={() => handleSubmit(false)}\r\n                                isLoading={isLoading}\r\n                                loader={<Loader variant=\"spinner\" />}\r\n                                disabled={!canSave || isLoading}\r\n                            >\r\n                                Save\r\n                            </Button>\r\n                        </Flex>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default AddDiscountModal;\r\n","import { SubscriptionContractSingleNode } from \"app/types/subscription/subscriptionQueryTypes\"\r\nimport { Box, Flex, Text, Button } from \"rizzui\";\r\nimport { FaLocationDot, FaRegCreditCard, FaTag } from \"react-icons/fa6\";\r\nimport SubscriptionActions from \"./SubscriptionActions\";\r\nimport { useAtom } from \"jotai\";\r\nimport { subscriptionContractAtom } from \"app/states/subscriptionContractAtom\";\r\nimport PaymentMethodButton from \"./PaymentMethodButton\";\r\nimport DiscountButton from \"./DiscountButton\";\r\nimport UpdatePaymentMethodModal from \"./Modals/UpdatePaymentMethodModal\";\r\nimport { useState } from \"react\";\r\nimport AddDiscountModal from \"./Modals/AddDiscountModal\";\r\n\r\nconst SubscriptionDetailsHeader = () => {\r\n    const [subscriptionContract] = useAtom(subscriptionContractAtom);\r\n    const [isUpdatePaymentMethodModalOpen, setIsUpdatePaymentMethodModalOpen] = useState(false);\r\n    const [isAddDiscountModalOpen, setIsDiscountModalOpen] = useState(false);\r\n    if (!subscriptionContract) return null;\r\n    const { customer, customerPaymentMethod, discounts, deliveryMethod: { address } } = subscriptionContract;\r\n    if (!address) return null;\r\n\r\n    return (\r\n        <Flex direction=\"col\" gap=\"2\" className=\"rounded-lg\">\r\n            <Box className=\"flex gap-2 text-lg justify-between w-full p-3 [&>div:nth-child(3)]:hidden\">\r\n                <Box>\r\n                    <Box className=\"flex gap-2\">\r\n                        <FaLocationDot className=\"mt-1\" />\r\n                        <Box>\r\n\r\n                            {/* Address 1 & 2 */}\r\n                            {address.address1 && <Text className=\"font-bold\">{address.address1}</Text>}\r\n                            {address.address2 && <Text className=\"font-bold\">{address.address2}</Text>}\r\n\r\n                            {/* City, State, Country, ZIP */}\r\n                            {(address.city || address.province || address.country || address.zip) && (\r\n                                <Text className=\"font-bold\">\r\n                                    {[address.city, address.province, address.country]\r\n                                        .filter(Boolean)\r\n                                        .join(\", \")}{\" \"}\r\n                                    {address.zip ? `- ${address.zip}` : \"\"}\r\n                                </Text>\r\n                            )}\r\n                            {/* Company */}\r\n                            {address.company && <Text className=\"font-bold\">{address.company}</Text>}\r\n                            {/* Phone */}\r\n                            {address.phone && <Text className=\"font-bold\">📞 {address.phone}</Text>}\r\n                        </Box>\r\n                    </Box>\r\n\r\n                    <Box className=\"mt-3 flex gap-4\">\r\n                        {customerPaymentMethod && (\r\n                            <PaymentMethodButton\r\n                                brand={customerPaymentMethod.instrument.brand}\r\n                                lastDigits={customerPaymentMethod.instrument.lastDigits}\r\n                                onClick={() => setIsUpdatePaymentMethodModalOpen(true)}\r\n                            />\r\n                        )}\r\n                        <DiscountButton\r\n                            discountTitle={discounts?.edges?.[0]?.node?.title}\r\n                            onClick={() => setIsDiscountModalOpen(true)}\r\n                        />\r\n                    </Box>\r\n                </Box>\r\n                <SubscriptionActions customer={customer} />\r\n                <UpdatePaymentMethodModal\r\n                    modalState={isUpdatePaymentMethodModalOpen}\r\n                    setModalState={setIsUpdatePaymentMethodModalOpen}\r\n                    customer={customer}\r\n                    activePaymentMethod={customerPaymentMethod}\r\n                />\r\n                <AddDiscountModal\r\n                    modalState={isAddDiscountModalOpen}\r\n                    setModalState={setIsDiscountModalOpen}\r\n                    discounts={discounts}\r\n                />\r\n\r\n            </Box>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default SubscriptionDetailsHeader;","\"use client\";\nimport { DragEndEvent, KeyboardSensor, MouseSensor, TouchSensor, UniqueIdentifier, useSensor, useSensors } from \"@dnd-kit/core\";\nimport { arraySwap } from \"@dnd-kit/sortable\";\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  ExpandedState,\n  RowPinningState,\n  SortingState,\n  TableOptions,\n  getCoreRowModel,\n  getExpandedRowModel,\n  getFacetedRowModel,\n  getFacetedUniqueValues,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport React from \"react\";\n\ninterface ExtendTableOptions<T extends Record<string, unknown>>\n  extends Omit<TableOptions<T>, \"data\" | \"columns\" | \"getCoreRowModel\" | \"state\"> {}\n\nexport function useTanStackTable<T extends Record<string, any>>({\n  options,\n  tableData,\n  columnConfig,\n}: {\n  tableData: any[];\n  options?: ExtendTableOptions<T>;\n  columnConfig: any[];\n}) {\n  const [data, setData] = React.useState<T[]>([...tableData]);\n  const [columns] = React.useState(() => [...columnConfig]);\n  const [globalFilter, setGlobalFilter] = React.useState(\"\");\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [expanded, setExpanded] = React.useState<ExpandedState>({});\n  const [columnOrder, setColumnOrder] = React.useState<string[]>(() => columns.map((c) => {return c.id!}));\n  const dataIds = React.useMemo<UniqueIdentifier[]>(() => data?.map(({ id }) => id), [data]);\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>([]);\n  const [rowPinning, setRowPinning] = React.useState<RowPinningState>({\n    top: [],\n    bottom: [],\n  });\n\n  // ===================================================================================================\n  // these are custom functions dependent on dnd kit and react-table to handle Drag and Drop events\n  const handleDragEndColumn = React.useCallback((event: DragEndEvent) => {\n    const { active, over } = event;\n    if (active && over && active.id !== over.id) {\n      setColumnOrder((columnOrder) => {\n        const oldIndex = columnOrder.indexOf(active.id as string);\n        const newIndex = columnOrder.indexOf(over.id as string);\n        return arraySwap(columnOrder, oldIndex, newIndex);\n      });\n    }\n  }, []);\n\n  const handleDragEndRow = React.useCallback((event: DragEndEvent) => {\n    const { active, over } = event;\n    if (active && over && active.id !== over.id) {\n      setData((prevData) => {\n        const oldIndex = prevData.findIndex((item) => item.id === active.id);\n        const newIndex = prevData.findIndex((item) => item.id === over.id);\n        return arraySwap(prevData, oldIndex, newIndex);\n      });\n    }\n  }, []);\n\n  const sensors = useSensors(\n    useSensor(MouseSensor, {}),\n    useSensor(TouchSensor, {}),\n    useSensor(KeyboardSensor, {})\n  );\n  // these are custom functions dependent on dnd kit and react-table to handle Drag and Drop events\n  // =================================================================================================\n\n  const table = useReactTable({\n    data,\n    columns,\n    state: {\n      sorting,\n      expanded,\n      rowPinning,\n      columnOrder,\n      globalFilter,\n      columnFilters,\n    },\n    ...options,\n    getRowCanExpand: () => true,\n    onSortingChange: setSorting,\n    onExpandedChange: setExpanded,\n    onRowPinningChange: setRowPinning,\n    onColumnOrderChange: setColumnOrder,\n    onGlobalFilterChange: setGlobalFilter,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFacetedRowModel: getFacetedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    getExpandedRowModel: getExpandedRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getFacetedUniqueValues: getFacetedUniqueValues(),\n  });\n\n  return {\n    table,\n    dataIds,\n    setData,\n    sensors,\n    tableData: data,\n    rowPinning,\n    columnOrder,\n    globalFilter,\n    setRowPinning,\n    setColumnOrder,\n    setGlobalFilter,\n    handleDragEndRow,\n    handleDragEndColumn,\n  };\n}\n","import { Dropdown, Button } from \"rizzui\";\r\nimport { BsChevronDown } from \"react-icons/bs\";\r\nimport { FaArrowsRotate, FaPencil, FaPowerOff, FaRegCalendar, FaRegTrashCan } from \"react-icons/fa6\";\r\nimport DropdownActionItem from \"./DropdownActionItem\";\r\nimport { FaRegWindowClose } from \"react-icons/fa\";\r\nimport { OtherAactions, SubscriptionContractSubscriptionStatus, SubscriptionLineItem } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { useAtom } from \"jotai\";\r\nimport { subscriptionContractAtom } from \"app/states/subscriptionContractAtom\";\r\nimport { set } from \"lodash\";\r\n\r\nexport type SubscriptionLineItemActionsProps = {\r\n    OtherAactions: OtherAactions,\r\n    node: SubscriptionLineItem\r\n};\r\n\r\nconst SubscriptionLineItemActions = (\r\n    { OtherAactions, node }: SubscriptionLineItemActionsProps) => {\r\n    const [subscriptionContract] = useAtom(subscriptionContractAtom);\r\n    if (!subscriptionContract) return null;\r\n    const { status } = subscriptionContract;\r\n\r\n    const ACTIVE_ACTIONS = [\r\n        {\r\n            icon: FaRegCalendar,\r\n            label: \"Reschedule next charge\",\r\n            setState: OtherAactions.setIsRescheduleModalOpen\r\n        },\r\n        {\r\n            icon: FaPencil,\r\n            label: \"Edit frequency\",\r\n            setState: OtherAactions.setIsEditOrderFrequencyModalOpen\r\n        },\r\n        {\r\n            icon: FaPencil,\r\n            label: \"Edit subscription product\", setState: (value: boolean) => {\r\n                OtherAactions.setIsEditSubscriptionProductModalOpen(value);\r\n                OtherAactions.setSubscriptionLine(node);\r\n            }\r\n        },\r\n        {\r\n            icon: FaArrowsRotate,\r\n            label: \"Swap Product\", setState: (value: boolean) => {\r\n                OtherAactions.setIsSwapProductModalOpen(value);\r\n                OtherAactions.setSubscriptionLine(node);\r\n            }\r\n        },\r\n        {\r\n            icon: FaRegWindowClose,\r\n            label: \"Cancel subscription\",\r\n            setState: OtherAactions.setIsCancelSubscriptionModalOpen\r\n        },\r\n        {\r\n            icon: FaRegTrashCan,\r\n            label: \"Delete\"\r\n        },\r\n        {\r\n            icon: FaPencil,\r\n            label: \"Edit line Item properties\",\r\n            setState: (value: boolean) => {\r\n                OtherAactions.setIsEditLineItemAttributesModalOpen(value);\r\n                OtherAactions.setSubscriptionLine(node);\r\n            }\r\n        },\r\n    ];\r\n\r\n    const CANCELLED_ACTIONS = [\r\n        {\r\n            icon: FaPowerOff,\r\n            label: \"Reactivate subscription\",\r\n            setState: OtherAactions.setIsReactiveSubscriptionModalOpen,\r\n        },\r\n        {\r\n            icon: FaRegTrashCan,\r\n            label: \"Delete\"\r\n        },\r\n        {\r\n            icon: FaPencil,\r\n            label: \"Edit line Item properties\",\r\n            setState: (value: boolean) => {\r\n                OtherAactions.setIsEditLineItemAttributesModalOpen(value);\r\n                OtherAactions.setSubscriptionLine(node);\r\n            }\r\n        },\r\n    ];\r\n\r\n    const ACTIONS =\r\n        status === SubscriptionContractSubscriptionStatus.CANCELLED\r\n            ? CANCELLED_ACTIONS\r\n            : ACTIVE_ACTIONS;\r\n\r\n    return (\r\n        <Dropdown>\r\n            <Dropdown.Trigger>\r\n                <Button as=\"span\" variant={\"text\" as any} color=\"primary\" className=\"text-primary font-bold\">\r\n                    Action <BsChevronDown className=\"ml-2 w-5\" />\r\n                </Button>\r\n            </Dropdown.Trigger>\r\n            <Dropdown.Menu className=\"min-w-[310px]\">\r\n                {ACTIONS.map((action, index) => (\r\n                    <DropdownActionItem\r\n                        key={index}\r\n                        icon={action.icon}\r\n                        label={action.label}\r\n                        onClick={() => action.setState && action.setState(true)}\r\n                    />\r\n                ))}\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default SubscriptionLineItemActions;\r\n","import { createColumnHelper } from \"@tanstack/react-table\";\r\nimport { formatPrice, getTruncatedText } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { SubscripiontLinesTablesData, SubscriptionContractSubscriptionStatus } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { Box, Checkbox, Flex, Text, Tooltip } from \"rizzui\";\r\nimport SubscriptionLineItemActions from \"./SubscriptionLineItemActions\";\r\nimport cn from \"app/packages/utils/class-names\";\r\nimport SubscriptionStatusBadge from \"../SubscriptionTopBlock/SubscriptionStatusBadge\";\r\nimport { FaCircleInfo } from \"react-icons/fa6\";\r\n\r\nconst columnHelper = createColumnHelper<SubscripiontLinesTablesData>();\r\nexport const lineColumns = [\r\n    columnHelper.display({\r\n        id: 'select',\r\n        size: 50,\r\n        header: ({ table }) => (\r\n            <Checkbox\r\n                className=\"ps-3.5\"\r\n                aria-label=\"Select all rows\"\r\n                checked={table.getIsAllPageRowsSelected()}\r\n                onChange={() => table.toggleAllPageRowsSelected()}\r\n            />\r\n        ),\r\n        cell: ({ row }) => (\r\n            <Checkbox\r\n                className=\"ps-3.5\"\r\n                aria-label=\"Select row\"\r\n                checked={row.getIsSelected()}\r\n                onChange={() => row.toggleSelected()}\r\n            />\r\n        ),\r\n    }),\r\n\r\n    columnHelper.display({\r\n        id: 'Product',\r\n        size: 300,\r\n        header: 'Product',\r\n        cell: ({ row }) => {\r\n            const { id, title, variantTitle, variantImage, status } = row.original\r\n            return (\r\n                <Flex align=\"center\">\r\n                    <Box>\r\n                        <img src={variantImage?.url || ''} alt={title} width={48} height={48} />\r\n                    </Box>\r\n                    <Box>\r\n                        <Text\r\n                            className={cn(\r\n                                status === SubscriptionContractSubscriptionStatus.CANCELLED && 'line-through'\r\n                            )}>{title}</Text>\r\n                        <Text\r\n                            className={cn(\r\n                                status === SubscriptionContractSubscriptionStatus.CANCELLED && 'line-through'\r\n                            )}\r\n                        >{variantTitle}</Text>\r\n                    </Box>\r\n                </Flex>\r\n            )\r\n        },\r\n    }),\r\n\r\n    columnHelper.display({\r\n        id: 'nextOrder',\r\n        size: 120,\r\n        header: 'Next Order',\r\n        cell: ({ row }) => {\r\n            const { nextBillingDate, status, note } = row.original\r\n            return (\r\n                <Box>\r\n                    <Text>{nextBillingDate}</Text>\r\n                    {status === SubscriptionContractSubscriptionStatus.CANCELLED && (\r\n                        <Box>\r\n                            <SubscriptionStatusBadge status={status} />\r\n                            <span>\r\n                                {note && (\r\n                                    <>\r\n                                        <Text className=\"text-xs\">{getTruncatedText(note, 4)}</Text>\r\n                                        <Tooltip content={note}>\r\n                                            <FaCircleInfo />\r\n                                        </Tooltip>\r\n                                    </>\r\n                                )}\r\n                            </span>\r\n                        </Box>\r\n                    )}\r\n                </Box>\r\n            )\r\n        },\r\n    }),\r\n\r\n    columnHelper.display({\r\n        id: 'frequency',\r\n        size: 180,\r\n        header: 'Frequency',\r\n        cell: ({ row }) => (\r\n            <Box>\r\n                <Text className=\"text-sm\">\r\n                    {`Ships every ${row.original.deliveryPolicyIntervalCount} ${row.original.deliveryPolicyInterval.toLowerCase()}`}\r\n                </Text>\r\n                <Text className=\"text-sm\">\r\n                    {`Charges ${row.original.billingPolicyIntervalCount} ${row.original.billingPolicyInterval.toLowerCase()}`}\r\n                </Text>\r\n            </Box>\r\n        ),\r\n    }),\r\n\r\n    columnHelper.display({\r\n        id: 'price',\r\n        size: 120,\r\n        header: 'Price',\r\n        cell: ({ row }) => {\r\n            const { lineDiscountedPrice: { amount, currencyCode }, quantity, shop: { currencyFormats: { moneyFormat } } } = row.original\r\n            const formatedPrice = formatPrice(amount, moneyFormat)\r\n            return (\r\n                <Box>\r\n                    <Text>\r\n                        {quantity} x {formatedPrice} {currencyCode}\r\n                    </Text>\r\n                </Box>\r\n            )\r\n        }\r\n    }),\r\n\r\n    columnHelper.display({\r\n        id: 'action',\r\n        size: 100,\r\n        header: 'Action',\r\n        cell: ({ row }) => {\r\n            return (\r\n                <SubscriptionLineItemActions\r\n                    OtherAactions={row.original.otherActions}\r\n                    node={row.original.node!}\r\n                />\r\n            )\r\n        }\r\n    }),\r\n\r\n];","\"use client\";\n\nimport { Column } from \"@tanstack/react-table\";\n\nexport function getColumnOptions<TData extends Record<string, any>>(column: Column<TData>) {\n  const isColumnDraggable = column.columnDef.meta?.isColumnDraggable ?? true;\n  const canResize = column.getCanResize();\n  const canPin = column.getCanPin();\n  const isPinned = column.getIsPinned();\n  const isLeftPinned = isPinned === \"left\" && column.getIsLastColumn(\"left\");\n  const isRightPinned = isPinned === \"right\" && column.getIsFirstColumn(\"right\");\n\n  return {\n    canPin,\n    isPinned,\n    canResize,\n    isLeftPinned,\n    isRightPinned,\n    isColumnDraggable,\n  };\n}\n","'use client';\n\nimport React from 'react';\nimport { useScroll, useSize } from 'ahooks';\n\nexport function getPercentage(partialValue?: number, totalValue?: number) {\n  if (partialValue && totalValue) return (100 * partialValue) / totalValue;\n  return;\n}\n\nexport function useScrollPosition() {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const [currentOffset, setCurrentOffset] = React.useState<number>();\n  const tableRef = React.useRef(null);\n  const scroll = useScroll(containerRef);\n  const tableSize = useSize(tableRef);\n  const containerSize = useSize(containerRef);\n\n  React.useEffect(() => {\n    if (containerRef.current && tableSize) {\n      setCurrentOffset(tableSize.width - containerRef.current.clientWidth);\n    }\n  }, [tableSize, containerRef]);\n\n  const scrollPercentage = getPercentage(scroll?.left, currentOffset) ?? 0;\n\n  const isLeftScrollable =\n    tableSize?.width !== containerSize?.width && scrollPercentage < 100;\n  const isRightScrollable =\n    tableSize?.width !== containerSize?.width && scrollPercentage > 0;\n\n  return {\n    containerRef,\n    scrollPercentage,\n    isLeftScrollable,\n    isRightScrollable,\n    tableRef,\n  };\n}\n","export const pinningStyles = {\n  baseStyle: `before:[&_.sticky-left]:pointer-events-none before:[&_.sticky-left]:absolute before:[&_.sticky-left]:bottom-0 before:[&_.sticky-left]:end-0 before:[&_.sticky-left]:top-0 before:[&_.sticky-left]:hidden before:[&_.sticky-left]:w-5 before:[&_.sticky-left]:shadow-[inset_10px_0_8px_-8px_rgba(0,0,0,0.2)] first:before:[&_.sticky-left]:block dark:before:[&_.sticky-left]:shadow-[inset_10px_0_8px_-8px_rgba(130,136,155,0.1)] before:[&_.sticky-left]:transition-shadow before:[&_.sticky-left]:duration-300 before:[&_.sticky-left]:translate-x-full after:[&_.sticky-right]:pointer-events-none after:[&_.sticky-right]:absolute after:[&_.sticky-right]:-bottom-[1px] after:[&_.sticky-right]:start-0 after:[&_.sticky-right]:top-0 after:[&_.sticky-right]:hidden after:[&_.sticky-right]:w-5 after:[&_.sticky-right]:shadow-[inset_-10px_0_8px_-8px_rgba(0,0,0,0.2)] last:after:[&_.sticky-right]:block dark:after:[&_.sticky-right]:shadow-[inset_-10px_0_8px_-8px_rgba(130,136,155,0.1)] after:[&_.sticky-right]:transition-shadow after:[&_.sticky-right]:duration-300 after:[&_.sticky-right]:-translate-x-full before:[&_.sticky-right]:content-[\"\"] after:[&_.sticky-right]:content-[\"\"]`,\n  variants: {\n    classic: `[&_th.sticky-left]:bg-gray-100 [&_td.sticky-left]:bg-white dark:[&_td.sticky-left]:bg-gray-50 [&_th.sticky-right]:bg-gray-100 [&_td.sticky-right]:bg-white dark:[&_td.sticky-right]:bg-gray-50`,\n    modern: `[&_th.sticky-left]:bg-gray-100 [&_td.sticky-left]:bg-white dark:[&_td.sticky-left]:bg-gray-50 [&_th.sticky-right]:bg-gray-100 [&_td.sticky-right]:bg-white dark:[&_td.sticky-right]:bg-gray-50`,\n    minimal: `[&_th.sticky-left]:bg-gray-100 [&_td.sticky-left]:bg-white dark:[&_td.sticky-left]:bg-gray-50 [&_th.sticky-right]:bg-gray-100 [&_td.sticky-right]:bg-white dark:[&_td.sticky-right]:bg-gray-50`,\n    elegant: `[&_th.sticky-left]:bg-white [&_td.sticky-left]:bg-white [&_th.sticky-right]:bg-white [&_td.sticky-right]:bg-white`,\n    retro: `[&_th.sticky-left]:bg-white [&_td.sticky-left]:bg-white [&_th.sticky-right]:bg-white [&_td.sticky-right]:bg-white`,\n  },\n};\n","\"use client\";\n\nimport { Fragment } from \"react\";\nimport pkg from 'lodash'\nimport { Box, Empty, Loader, Table, Text, Title } from \"rizzui\";\nimport { getColumnOptions } from \"./util\";\nimport { flexRender } from \"@tanstack/react-table\";\nimport { useScrollPosition } from \"app/packages/hooks/use-Scroll-position\";\nimport { PiCaretDownFill, PiCaretUpFill } from \"react-icons/pi\";\nimport {\n  CustomBodyCellProps,\n  CustomHeaderCellProps,\n  MainTableProps,\n  PinnedRowProps,\n} from \"./table-types\";\nimport { pinningStyles } from \"./table-pinning.style\";\nimport cn from \"app/packages/utils/class-names\";\n\nconst { isEmpty } = pkg\n\nexport default function MainTable<TData extends Record<string, any>>({\n  table,\n  dataIds,\n  variant = \"classic\",\n  classNames,\n  columnOrder,\n  isLoading = false,\n  showLoadingText = false,\n  components,\n  stickyHeader = false,\n  width = '',\n}: MainTableProps<TData>) {\n  const { containerRef, tableRef, isLeftScrollable, isRightScrollable } =\n    useScrollPosition();\n\n  if (!table) return null;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex h-full min-h-[128px] flex-col items-center justify-center\">\n        <Loader variant=\"spinner\" size=\"xl\" />\n        {showLoadingText ? (\n          <Title as=\"h6\" className=\"-me-2 mt-4 font-medium text-gray-500\">\n            Loading...\n          </Title>\n        ) : null}\n      </div>\n    );\n  }\n\n  const headerParam = {\n    table,\n    dataIds,\n    columnOrder,\n    isLeftScrollable,\n    isRightScrollable,\n  };\n\n  const rowParam = {\n    table,\n    dataIds,\n    columnOrder,\n    isLeftScrollable,\n    isRightScrollable,\n  };\n  const mainRows = table.getIsSomeRowsPinned()\n    ? table.getCenterRows()\n    : table.getRowModel().rows;\n  return (\n    <>\n      <Box\n        ref={containerRef}\n        className={cn(\n          \"custom-scrollbar w-full max-w-full overflow-x-auto scroll-smooth\",\n          stickyHeader && \"max-h-[600px] overflow-y-auto\",\n          classNames?.container\n        )}\n      >\n        <Table\n          ref={tableRef}\n          variant={variant}\n          style={{\n            width: width ? width : table.getTotalSize(),\n          }}\n          className={cn(\n            pinningStyles.baseStyle,\n            pinningStyles.variants[variant],\n            classNames?.tableClassName\n          )}\n        >\n          <Fragment>\n            {components?.header ? (\n              components.header(headerParam)\n            ) : (\n              <Table.Header\n                className={cn(\n                  stickyHeader && \"sticky top-0 z-10\",\n                  classNames?.headerClassName\n                )}\n              >\n                {table.getHeaderGroups().map((headerGroup) => {\n                  const headerCellParam = {\n                    columnOrder,\n                    headerGroup,\n                    isLeftScrollable,\n                    isRightScrollable,\n                  };\n                  return (\n                    <Table.Row\n                      key={headerGroup.id}\n                      className={classNames?.rowClassName}\n                    >\n                      {components?.headerCell ? (\n                        components.headerCell(headerCellParam)\n                      ) : (\n                        <TableHeadBasic\n                          headerGroup={headerGroup}\n                          isLeftScrollable={isLeftScrollable}\n                          isRightScrollable={isRightScrollable}\n                          className={classNames?.headerCellClassName}\n                        />\n                      )}\n                    </Table.Row>\n                  );\n                })}\n              </Table.Header>\n            )}\n          </Fragment>\n\n\n          <Table.Body className={classNames?.bodyClassName}>\n            {table.getTopRows().map((row) => (\n              <PinnedRow\n                key={row.id}\n                row={row}\n                table={table}\n                isLeftScrollable={isLeftScrollable}\n                isRightScrollable={isRightScrollable}\n                className={classNames?.rowClassName}\n                tableCellClassName={classNames?.cellClassName}\n              />\n            ))}\n\n            {components?.bodyRow ? (\n              components.bodyRow(rowParam)\n            ) : (\n              <>\n                {mainRows.map((row) => (\n                  <Fragment key={row.id}>\n                    <Table.Row className={classNames?.rowClassName} onClick={() => {\n                      if (typeof row.original.onRowClick === \"function\") {\n                        row.original.onRowClick();\n                      }\n                    }}>\n                      {row.getVisibleCells().map((cell) => {\n                        const bodyCellParam = {\n                          cell,\n                          columnOrder,\n                          isLeftScrollable,\n                          isRightScrollable,\n                        };\n                        return (\n                          <Fragment key={cell.id}>\n                            {components?.bodyCell ? (\n                              components.bodyCell(bodyCellParam)\n                            ) : (\n                              <TableCellBasic\n                                cell={cell}\n                                isLeftScrollable={isLeftScrollable}\n                                isRightScrollable={isRightScrollable}\n                                className={classNames?.cellClassName}\n                              />\n                            )}\n                          </Fragment>\n                        );\n                      })}\n                    </Table.Row>\n\n                    {/* custom-expanded-component start  */}\n                    {components?.expandedComponent && row.getIsExpanded() && (\n                      <Table.Row className={classNames?.expandedRowClassName}>\n                        <Table.Cell\n                          className={cn(\n                            \"!p-0\",\n                            classNames?.expandedCellClassName\n                          )}\n                          colSpan={row.getVisibleCells().length}\n                        >\n                          {components.expandedComponent(row)}\n                        </Table.Cell>\n                      </Table.Row>\n                    )}\n                    {/* customExpandedComponent end */}\n                  </Fragment>\n                ))}\n              </>\n            )}\n\n            {table.getBottomRows().map((row) => (\n              <PinnedRow\n                row={row}\n                key={row.id}\n                table={table}\n                isLeftScrollable={isLeftScrollable}\n                isRightScrollable={isRightScrollable}\n                className={classNames?.rowClassName}\n                tableCellClassName={classNames?.cellClassName}\n              />\n            ))}\n          </Table.Body>\n        </Table>\n      </Box>\n\n      {isEmpty(table.getRowModel().rows) && (\n        <Box className=\"py-5 text-center lg:py-8\">\n          <Empty /> <Text className=\"mt-3\">No Data</Text>\n        </Box>\n      )}\n    </>\n  );\n}\n\n// Basic Header component\nexport function TableHeadBasic<TData extends Record<string, any>>({\n  headerGroup,\n  isLeftScrollable,\n  isRightScrollable,\n  className,\n}: CustomHeaderCellProps<TData>) {\n  if (!headerGroup) return null;\n\n  return (\n    <>\n      {headerGroup.headers.map((header) => {\n        const { canResize, canPin, isPinned, isLeftPinned, isRightPinned } =\n          getColumnOptions(header.column);\n\n        return (\n          <Table.Head\n            key={header.id}\n            colSpan={header.colSpan}\n            style={{\n              left: isLeftPinned ? header.column.getStart(\"left\") : undefined,\n              right: isRightPinned\n                ? header.column.getAfter(\"right\")\n                : undefined,\n              width: header.getSize(),\n            }}\n            className={cn(\n              \"group\",\n              isPinned && canPin && \"sticky z-10\",\n              !isPinned && canResize && \"relative\",\n              isPinned && isLeftScrollable && \"sticky-right\",\n              isPinned && isRightScrollable && \"sticky-left\",\n              className\n            )}\n          >\n            <Box className=\"flex items-start\">\n              {header.isPlaceholder\n                ? null\n                : flexRender(\n                  header.column.columnDef.header,\n                  header.getContext()\n                )}\n\n              {header.column.getCanSort() ? (\n                <button\n                  type=\"button\"\n                  onClick={header.column.getToggleSortingHandler()}\n                  className=\"ms-1 inline-block\"\n                  aria-label=\"Sort by column\"\n                >\n                  {{\n                    asc: <PiCaretUpFill size={14} />,\n                    desc: <PiCaretDownFill size={14} />,\n                  }[header.column.getIsSorted() as string] ??\n                    (header.column.columnDef.header !== \"\" && (\n                      <PiCaretDownFill size={14} />\n                    ))}\n                </button>\n              ) : null}\n            </Box>\n\n            {header.column.getCanResize() && (\n              <div\n                {...{\n                  onDoubleClick: () => header.column.resetSize(),\n                  onMouseDown: header.getResizeHandler(),\n                  onTouchStart: header.getResizeHandler(),\n                }}\n                className=\"absolute end-0 top-0 hidden h-full w-0.5 cursor-w-resize bg-gray-400 group-hover:block\"\n              />\n            )}\n          </Table.Head>\n        );\n      })}\n    </>\n  );\n}\n\n// Basic Cell component\nexport function TableCellBasic<TData extends Record<string, any>>({\n  cell,\n  isLeftScrollable,\n  isRightScrollable,\n  className,\n}: CustomBodyCellProps<TData>) {\n  if (!cell) return null;\n\n  const { canResize, canPin, isPinned, isLeftPinned, isRightPinned } =\n    getColumnOptions(cell.column);\n\n  return (\n    <Table.Cell\n      style={{\n        left: isLeftPinned ? cell!.column.getStart(\"left\") : undefined,\n        right: isRightPinned ? cell.column.getAfter(\"right\") : undefined,\n        width: cell.column.getSize(),\n      }}\n      className={cn(\n        isPinned && canPin && \"sticky z-10\",\n        !isPinned && canResize && \"relative\",\n        isPinned && isLeftScrollable && \"sticky-right\",\n        isPinned && isRightScrollable && \"sticky-left\",\n        className\n      )}\n    >\n      {flexRender(cell.column.columnDef.cell, cell.getContext())}\n    </Table.Cell>\n  );\n}\n\n// Pinned Row Component\nexport function PinnedRow<TData extends Record<string, any>>({\n  row,\n  table,\n  isLeftScrollable,\n  isRightScrollable,\n  className,\n  tableCellClassName,\n}: PinnedRowProps<TData>) {\n  const isTopPinned = row.getIsPinned() === \"top\";\n  const isBottomPinned = row.getIsPinned() === \"bottom\";\n  return (\n    <Table.Row\n      className={cn(\n        \"sticky z-20 bg-white dark:bg-gray-50\",\n        isTopPinned && \"-top-px shadow-[0px_2px_2px_0px_#0000000D]\",\n        isBottomPinned && \"-bottom-0.5 shadow-[rgba(0,0,0,0.24)_0px_3px_8px]\",\n        className\n      )}\n    >\n      {row.getVisibleCells().map((cell) => {\n        return (\n          <TableCellBasic\n            key={cell.id}\n            cell={cell}\n            isLeftScrollable={isLeftScrollable}\n            isRightScrollable={isRightScrollable}\n            className={tableCellClassName}\n          />\n        );\n      })}\n    </Table.Row>\n  );\n}\n","import { useEffect, useState } from \"react\";\r\nimport { FaCalendar, FaXmark } from \"react-icons/fa6\";\r\nimport {\r\n    Modal,\r\n    Title,\r\n    ActionIcon,\r\n    Button,\r\n    Flex,\r\n    Loader,\r\n    Input,\r\n} from \"rizzui\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\n\r\nconst RescheduleBillingModal = ({\r\n    modalState,\r\n    setModalState,\r\n    nextBillingDate,\r\n}: {\r\n    modalState: boolean;\r\n    setModalState: (state: boolean) => void;\r\n    nextBillingDate?: string;\r\n}) => {\r\n    const fetcher = useFetcher<any>();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [selectedDate, setSelectedDate] = useState<Date | null>(\r\n        nextBillingDate ? new Date(nextBillingDate) : null\r\n    );\r\n\r\n    const canSave = selectedDate && selectedDate.toISOString() !== nextBillingDate;\r\n\r\n    const handleSubmit = () => {\r\n        if (!selectedDate) return;\r\n        setIsLoading(true);\r\n        const formData = new FormData();\r\n        formData.append(\"action\", \"rescheduleBillingDate\");\r\n        formData.append(\"nextBillingDate\", selectedDate.toISOString());\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Billing date updated!\");\r\n                setModalState(false);\r\n            } else {\r\n                toast.error(fetcher?.data?.error || \"Something went wrong\");\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalState}\r\n            onClose={() => setModalState(false)}\r\n            containerClassName=\"min-w-[500px] overflow-visible z-[999] relative\"\r\n        >\r\n            <div className=\"m-auto p-3\">\r\n                {/* Header */}\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Reschedule Next Billing</Title>\r\n                    <ActionIcon size=\"sm\" variant={\"text\" as any} onClick={() => setModalState(false)}>\r\n                        <FaXmark className=\"h-auto w-6\" strokeWidth={1.8} />\r\n                    </ActionIcon>\r\n                </div>\r\n\r\n                {/* Input Field with Calendar Icon */}\r\n                <Flex className=\"relative w-full\">\r\n                    <FaCalendar className=\"absolute left-3 top-[37px] text-muted w-4 h-4\" />\r\n                    <Input\r\n                        label=\"Select Date & Time\"\r\n                        type=\"date\"\r\n                        value={selectedDate ? selectedDate.toISOString().split('T')[0] : ''}\r\n                        onChange={(e) => setSelectedDate(new Date(e.target.value))}\r\n                        className=\"pl-10 w-full\"\r\n                    />\r\n                </Flex>\r\n\r\n                {/* Action Buttons */}\r\n                <Flex justify=\"end\" gap=\"1\" className=\"mt-8 space-x-1\">\r\n                    <Button variant={\"outline\" as any} onClick={() => setModalState(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={handleSubmit}\r\n                        isLoading={isLoading}\r\n                        loader={<Loader variant=\"spinner\" />}\r\n                        disabled={!canSave || isLoading}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </Flex>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default RescheduleBillingModal;\r\n","import { useEffect, useState } from \"react\";\r\nimport { FaXmark } from \"react-icons/fa6\";\r\nimport {\r\n    Modal,\r\n    Title,\r\n    ActionIcon,\r\n    Button,\r\n    Flex,\r\n    Loader,\r\n    Select,\r\n} from \"rizzui\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { BillingPolicy } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { NumberInput } from \"app/shared/products/selling-plan-groups/components/NumberInput\";\r\nimport { unitOptions } from \"app/shared/products/selling-plan-groups/components/SellingPlanFormUtils\";\r\n\r\ntype EditOrderFrequencyModalProps = {\r\n    modalState: boolean;\r\n    setModalState: (state: boolean) => void;\r\n    billingPolicy: BillingPolicy;\r\n};\r\n\r\nconst EditOrderFrequencyModal = ({\r\n    modalState,\r\n    setModalState,\r\n    billingPolicy,\r\n}: EditOrderFrequencyModalProps) => {\r\n    const fetcher = useFetcher<any>();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [intervalCount, setIntervalCount] = useState(billingPolicy.intervalCount);\r\n    const [interval, setInterval] = useState<BillingPolicy['interval']>(billingPolicy.interval);\r\n\r\n    const canSave =\r\n        intervalCount !== billingPolicy.intervalCount ||\r\n        interval !== billingPolicy.interval;\r\n\r\n    const handleSubmit = () => {\r\n        setIsLoading(true);\r\n        const formData = new FormData();\r\n        formData.append(\"action\", \"updateOrderFrequency\");\r\n        formData.append(\"intervalCount\", intervalCount.toString());\r\n        formData.append(\"interval\", interval);\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Order frequency updated!\");\r\n                setModalState(false);\r\n            } else {\r\n                toast.error(fetcher?.data?.error || \"Something went wrong\");\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal isOpen={modalState} onClose={() => setModalState(false)} containerClassName=\"min-w-[500px]\">\r\n            <div className=\"m-auto p-3\">\r\n                {/* Header */}\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Edit Order Frequency</Title>\r\n                    <ActionIcon size=\"sm\" variant={\"text\" as any} onClick={() => setModalState(false)}>\r\n                        <FaXmark className=\"h-auto w-6\" strokeWidth={1.8} />\r\n                    </ActionIcon>\r\n                </div>\r\n\r\n                <div className=\"space-y-5\">\r\n                    <NumberInput\r\n                        label=\"Billing Frequency\"\r\n                        value={intervalCount}\r\n                        onChange={(val) => setIntervalCount(Number(val))}\r\n                        min={1}\r\n                    />\r\n\r\n                    <Select\r\n                        label=\"Billing Interval\"\r\n                        options={unitOptions}\r\n                        value={unitOptions.find((o) => o.value === interval)}\r\n                        onChange={(opt: any) => setInterval(opt.value)}\r\n                    />\r\n                </div>\r\n\r\n                {/* Action Buttons */}\r\n                <Flex justify=\"end\" gap=\"1\" className=\"mt-8 space-x-1\">\r\n                    <Button variant={\"outline\" as any} onClick={() => setModalState(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={handleSubmit}\r\n                        isLoading={isLoading}\r\n                        loader={<Loader variant=\"spinner\" />}\r\n                        disabled={!canSave || isLoading}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </Flex>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default EditOrderFrequencyModal;\r\n","import { useEffect, useState } from \"react\";\r\nimport { FaXmark } from \"react-icons/fa6\";\r\nimport {\r\n    Modal,\r\n    Title,\r\n    ActionIcon,\r\n    Button,\r\n    Flex,\r\n    Loader,\r\n    RadioGroup,\r\n    Textarea,\r\n    Checkbox,\r\n    Text,\r\n    Radio,\r\n} from \"rizzui\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\nimport { SubscriptionContractSubscriptionStatus } from \"app/types/subscription/subscriptionQueryTypes\";\r\n\r\nconst cancellationReasons = [\r\n    \"This is too expensive\",\r\n    \"This was created by accident\",\r\n    \"I already have more than I need\",\r\n    \"I need it sooner\",\r\n    \"I no longer use this product\",\r\n    \"I want a different product or variety\",\r\n    \"Other reason\",\r\n];\r\n\r\nconst CancelSubscriptionModal = ({\r\n    modalState,\r\n    setModalState,\r\n}: {\r\n    modalState: boolean;\r\n    setModalState: (state: boolean) => void;\r\n\r\n}) => {\r\n    const fetcher = useFetcher<any>();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [selectedReason, setSelectedReason] = useState<string>(\"\");\r\n    const [customReason, setCustomReason] = useState<string>(\"\");\r\n    const [sendEmail, setSendEmail] = useState<boolean>(false);\r\n\r\n    const canSubmit = selectedReason && (selectedReason !== \"Other reason\" || customReason.trim() !== \"\");\r\n\r\n    const handleSubmit = () => {\r\n        setIsLoading(true);\r\n        const formData = new FormData();\r\n        formData.append(\"action\", \"updateStatus\");\r\n        formData.append(\"reason\", selectedReason === \"Other reason\" ? customReason : selectedReason);\r\n        formData.append(\"sendCancellationEmail\", sendEmail.toString());\r\n        formData.append(\"status\", SubscriptionContractSubscriptionStatus.CANCELLED);\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher.data.success) {\r\n                toast.success(\"Subscription cancelled successfully.\");\r\n                setModalState(false);\r\n            } else {\r\n                toast.error(fetcher?.data?.error || \"Something went wrong.\");\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal isOpen={modalState} onClose={() => setModalState(false)} containerClassName=\"min-w-[525px]\">\r\n            <div className=\"m-auto p-3\">\r\n                {/* Header */}\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Cancel Subscription</Title>\r\n                    <ActionIcon size=\"sm\" variant={\"text\" as any} onClick={() => setModalState(false)}>\r\n                        <FaXmark className=\"h-auto w-6\" strokeWidth={1.8} />\r\n                    </ActionIcon>\r\n                </div>\r\n\r\n                {/* Reason radios */}\r\n                <Text className=\"mb-2\">Please select a reason for cancelling this subscription.</Text>\r\n                <RadioGroup value={selectedReason} setValue={setSelectedReason} className=\"space-y-2\">\r\n                    {cancellationReasons.map((reason) => (\r\n                        <Radio key={reason} name=\"cancelReason\" value={reason} label={reason} />\r\n                    ))}\r\n                </RadioGroup>\r\n\r\n                {/* Custom reason input */}\r\n                {selectedReason === \"Other reason\" && (\r\n                    <div className=\"mt-4\">\r\n                        <Textarea\r\n                            placeholder=\"Please provide your reason...\"\r\n                            value={customReason}\r\n                            onChange={(e) => setCustomReason(e.target.value)}\r\n                            className=\"w-full\"\r\n                            rows={4}\r\n                        />\r\n                    </div>\r\n                )}\r\n\r\n                {/* Send email checkbox */}\r\n                <div className=\"mt-6\">\r\n                    <Checkbox\r\n                        label=\"Send a cancellation email\"\r\n                        checked={sendEmail}\r\n                        onChange={(e) => setSendEmail(e.target.checked)}\r\n                    />\r\n                    <Text className=\"text-xs text-gray-500 mt-1\">\r\n                        An email will only be sent if the customer has no remaining active subscriptions. You can manage this email in your notifications.\r\n                    </Text>\r\n                </div>\r\n\r\n                {/* Action Buttons */}\r\n                <Flex justify=\"end\" gap=\"1\" className=\"mt-8 space-x-1\">\r\n                    <Button variant={\"outline\" as any} onClick={() => setModalState(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"danger\"\r\n                        onClick={handleSubmit}\r\n                        isLoading={isLoading}\r\n                        loader={<Loader variant=\"spinner\" />}\r\n                        disabled={!canSubmit || isLoading}\r\n                    >\r\n                        Cancel Subscription\r\n                    </Button>\r\n                </Flex>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default CancelSubscriptionModal;\r\n","import { useEffect, useState } from \"react\";\r\nimport { FaXmark } from \"react-icons/fa6\";\r\nimport {\r\n    Modal,\r\n    Title,\r\n    ActionIcon,\r\n    Button,\r\n    Flex,\r\n    Loader,\r\n    Checkbox,\r\n    Text,\r\n} from \"rizzui\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\nimport { SubscriptionContractSubscriptionStatus } from \"app/types/subscription/subscriptionQueryTypes\";\r\n\r\n\r\nconst ReactiveSubscriptionModal = ({\r\n    modalState,\r\n    setModalState,\r\n}: {\r\n    modalState: boolean;\r\n    setModalState: (state: boolean) => void;\r\n\r\n}) => {\r\n    const fetcher = useFetcher<any>();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [sendEmail, setSendEmail] = useState<boolean>(false);\r\n    const handleSubmit = () => {\r\n        setIsLoading(true);\r\n        const formData = new FormData();\r\n        formData.append(\"action\", \"updateStatus\");\r\n        formData.append(\"reason\", '');\r\n        formData.append(\"status\", SubscriptionContractSubscriptionStatus.ACTIVE);\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher.data.success) {\r\n                toast.success(\"Subscription cancelled successfully.\");\r\n                setModalState(false);\r\n            } else {\r\n                toast.error(fetcher?.data?.error || \"Something went wrong.\");\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal isOpen={modalState} onClose={() => setModalState(false)} containerClassName=\"min-w-[525px]\">\r\n            <div className=\"m-auto p-3\">\r\n                {/* Header */}\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Reactivate subscription</Title>\r\n                    <ActionIcon size=\"sm\" variant={\"text\" as any} onClick={() => setModalState(false)}>\r\n                        <FaXmark className=\"h-auto w-6\" strokeWidth={1.8} />\r\n                    </ActionIcon>\r\n                </div>\r\n\r\n                {/* Reason radios */}\r\n                <Text className=\"mb-2\">Are you sure you want to reactivate this subscription?</Text>\r\n\r\n                {/* Action Buttons */}\r\n                <Flex justify=\"end\" gap=\"1\" className=\"mt-8 space-x-1\">\r\n                    <Button variant={\"outline\" as any} onClick={() => setModalState(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={handleSubmit}\r\n                        isLoading={isLoading}\r\n                        loader={<Loader variant=\"spinner\" />}\r\n                    >\r\n                        Reactive\r\n                    </Button>\r\n                </Flex>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default ReactiveSubscriptionModal;\r\n","import { useEffect, useState } from \"react\";\r\nimport { Link, useFetcher } from \"@remix-run/react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { FaXmark, FaTrash } from \"react-icons/fa6\";\r\nimport {\r\n    Modal,\r\n    Title,\r\n    ActionIcon,\r\n    Button,\r\n    Input,\r\n    Box,\r\n    Flex,\r\n    Loader,\r\n    Text,\r\n} from \"rizzui\";\r\nimport { CustomAttribute, CustomAttributes, SubscriptionLineItem } from \"app/types/subscription/subscriptionQueryTypes\";\r\n\r\nconst EditLineItemAttributeModal = ({\r\n    modalState,\r\n    setModalState,\r\n    subscriptionLine,\r\n}: {\r\n    modalState: boolean;\r\n    setModalState: (val: boolean) => void;\r\n    subscriptionLine?: SubscriptionLineItem;\r\n}) => {\r\n    const lineItemAttributes = subscriptionLine?.customAttributes;\r\n    const [attributes, setAttributes] = useState<CustomAttributes>(lineItemAttributes || []);\r\n    const [errors, setErrors] = useState<{ key?: string; value?: string }[]>([]);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const fetcher = useFetcher<any>();\r\n\r\n    const handleAddAttribute = () => {\r\n        setAttributes((prev) => [...prev, { key: \"\", value: \"\" }]);\r\n        setErrors((prev) => [...prev, {}]);\r\n    };\r\n\r\n    const handleRemove = (index: number) => {\r\n        setAttributes((prev) => prev.filter((_, i) => i !== index));\r\n        setErrors((prev) => prev.filter((_, i) => i !== index));\r\n    };\r\n\r\n    const handleChange = (index: number, field: keyof CustomAttribute, value: string) => {\r\n        setAttributes((prev) =>\r\n            prev.map((item, i) => (i === index ? { ...item, [field]: value } : item))\r\n        );\r\n        setErrors((prev) =>\r\n            prev.map((err, i) => (i === index ? { ...err, [field]: undefined } : err))\r\n        );\r\n    };\r\n\r\n    const areAttributesEqual = (a: CustomAttributes, b: CustomAttributes) => {\r\n        if (a.length !== b.length) return false;\r\n        return a.every((attr, i) => attr.key === b[i].key && attr.value === b[i].value);\r\n    };\r\n\r\n    const handleUpdate = () => {\r\n        const newErrors = attributes.map(attr => ({\r\n            key: !attr.key.trim() ? \"Name is required\" : undefined,\r\n            value: !attr.value.trim() ? \"Value is required\" : undefined,\r\n        }));\r\n\r\n        if (newErrors.some(err => err.key || err.value)) {\r\n            setErrors(newErrors);\r\n            return;\r\n        }\r\n\r\n        if(!subscriptionLine?.id) {\r\n            toast.error(\"Line item not found, please refresh the page and try again.\");\r\n            return;\r\n        };\r\n\r\n        setIsLoading(true);\r\n        const formData = new FormData();\r\n        \r\n        formData.append(\"action\", \"updateLineItemAttribute\");\r\n        formData.append(\"lineId\", subscriptionLine?.id);\r\n        formData.append(\"attributes\", JSON.stringify(attributes));\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        setAttributes(lineItemAttributes || []);\r\n        setErrors((lineItemAttributes || []).map(() => ({})));\r\n    }, [lineItemAttributes]);\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Line item attributes updated!\");\r\n                setIsLoading(false);\r\n                setModalState(false);\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalState}\r\n            onClose={() => setModalState(false)}\r\n            containerClassName=\"min-w-[500px]\"\r\n        >\r\n            <div className=\"m-auto p-3\">\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Edit Line Item Attributes</Title>\r\n                    <ActionIcon\r\n                        size=\"sm\"\r\n                        variant={\"text\" as any}\r\n                        onClick={() => setModalState(false)}\r\n                    >\r\n                        <FaXmark className=\"h-auto w-6\" strokeWidth={1.8} />\r\n                    </ActionIcon>\r\n                </div>\r\n\r\n                <Box className=\"mb-3\"> \r\n                    <Text>\r\n                    Line item properties are used to record customized information about specific items within an order. Line item properties entered here will be included on orders generated from this subscription.\r\n                    <Link to={'/'} className=\"text-primary font-bold\">Learn more</Link>\r\n                    </Text>\r\n                </Box>\r\n\r\n                <div className=\"space-y-3\">\r\n                    {attributes.map((attr, index) => (\r\n                        <Box key={index} className=\"flex gap-2 items-start\">\r\n                            <Input\r\n                                placeholder=\"Name\"\r\n                                className=\"w-[45%]\"\r\n                                value={attr.key}\r\n                                onChange={(e) => handleChange(index, \"key\", e.target.value)}\r\n                                error={errors[index]?.key}\r\n                            />\r\n                            <Input\r\n                                placeholder=\"Value\"\r\n                                className=\"w-[45%]\"\r\n                                value={attr.value}\r\n                                onChange={(e) => handleChange(index, \"value\", e.target.value)}\r\n                                error={errors[index]?.value}\r\n                            />\r\n                            <Button\r\n                                variant={\"text\" as any}\r\n                                color=\"danger\"\r\n                                className=\"w-[10%]\"\r\n                                onClick={() => handleRemove(index)}\r\n                            >\r\n                                <FaTrash />\r\n                            </Button>\r\n                        </Box>\r\n                    ))}\r\n\r\n                    <Button\r\n                        variant={\"text\" as any}\r\n                        className=\"font-bold text-primary\"\r\n                        onClick={handleAddAttribute}>\r\n                        + Add Line Item Attribute\r\n                    </Button>\r\n                </div>\r\n\r\n                <Flex justify=\"end\" gap=\"1\" className=\"mt-8 space-x-1\">\r\n                    <Button\r\n                        variant={\"outline\" as any}\r\n                        onClick={() => setModalState(false)}\r\n                    >\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={handleUpdate}\r\n                        isLoading={isLoading}\r\n                        loader={<Loader variant=\"spinner\" />}\r\n                        disabled={isLoading || areAttributesEqual(attributes, lineItemAttributes || [])}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </Flex>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default EditLineItemAttributeModal;\r\n","\r\nconst SubscriptionProductFormSkeleton = () => {\r\n  return (\r\n    <div className=\"space-y-5 animate-pulse p-4 w-full\">\r\n      {/* Title */}\r\n      <div className=\"h-5 w-1/3 bg-gray-200 rounded-md\" />\r\n\r\n      {/* Product Name */}\r\n      <div className=\"space-y-1\">\r\n        <div className=\"h-4 w-1/4 bg-gray-300 rounded-md\" />\r\n        <div className=\"h-10 w-full bg-gray-100 rounded-md\" />\r\n      </div>\r\n\r\n      {/* Variant Select */}\r\n      <div className=\"space-y-1\">\r\n        <div className=\"h-4 w-1/4 bg-gray-300 rounded-md\" />\r\n        <div className=\"h-10 w-full bg-gray-100 rounded-md\" />\r\n      </div>\r\n\r\n      {/* Variant Name */}\r\n      <div className=\"space-y-1\">\r\n        <div className=\"h-4 w-1/4 bg-gray-300 rounded-md\" />\r\n        <div className=\"h-10 w-full bg-gray-100 rounded-md\" />\r\n      </div>\r\n\r\n      {/* Quantity */}\r\n      <div className=\"space-y-1\">\r\n        <div className=\"h-4 w-1/4 bg-gray-300 rounded-md\" />\r\n        <div className=\"h-10 w-full bg-gray-100 rounded-md\" />\r\n      </div>\r\n\r\n      {/* Recurring Price */}\r\n      <div className=\"space-y-1\">\r\n        <div className=\"h-4 w-1/4 bg-gray-300 rounded-md\" />\r\n        <div className=\"h-10 w-full bg-gray-100 rounded-md\" />\r\n      </div>\r\n\r\n      {/* Buttons */}\r\n      <div className=\"flex justify-end gap-2 mt-6\">\r\n        <div className=\"h-10 w-24 bg-gray-200 rounded-md\" />\r\n        <div className=\"h-10 w-24 bg-gray-300 rounded-md\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SubscriptionProductFormSkeleton;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\nimport toast from \"react-hot-toast\";\r\nimport { FaXmark } from \"react-icons/fa6\";\r\nimport {\r\n  Modal,\r\n  Title,\r\n  ActionIcon,\r\n  Button,\r\n  Flex,\r\n  Loader,\r\n  Input,\r\n  Select,\r\n} from \"rizzui\";\r\nimport type { ButtonProps } from 'rizzui'\r\nimport { SubscriptionLineItem } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport { NumberInput } from \"app/shared/products/selling-plan-groups/components/NumberInput\";\r\nimport SubscriptionProductFormSkeleton from \"app/shared/skeletons/SubscriptionProductFormSkeleton\";\r\n\r\nconst EditSubscriptionProductModal = ({\r\n  modalState,\r\n  setModalState,\r\n  subscriptionLine,\r\n}: {\r\n  modalState: boolean;\r\n  setModalState: (val: boolean) => void;\r\n  subscriptionLine?: SubscriptionLineItem;\r\n}) => {\r\n  const getFetcher = useFetcher<any>(); // For getProductData\r\n  const updateFetcher = useFetcher<any>(); // For subscriptionLineUpdate\r\n\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [isSubmitLoading, setIsSubmitLoading] = useState(false);\r\n  const [formState, setFormState] = useState<SubscriptionLineItem | null>(null);\r\n  const [initialState, setInitialState] = useState<SubscriptionLineItem | null>(null);\r\n  const [variantOptions, setVariantOptions] = useState<{ label: string; value: string }[]>([]);\r\n\r\n  const handleChange = (field: keyof SubscriptionLineItem, value: any) => {\r\n    setFormState((prev) => (prev ? { ...prev, [field]: value } : prev));\r\n  };\r\n\r\n  const handleUpdate = () => {\r\n    if (!formState?.id) return;\r\n    setIsSubmitLoading(true);\r\n    const formData = new FormData();\r\n    formData.append(\"action\", \"subscriptionLineUpdate\");\r\n    formData.append(\"updatedLine\", JSON.stringify(formState));\r\n\r\n    updateFetcher.submit(formData, {\r\n      method: \"POST\",\r\n      action: `.`,\r\n      encType: \"multipart/form-data\",\r\n    });\r\n  };\r\n\r\n  // Initial fetch on open\r\n  useEffect(() => {\r\n    if (modalState && subscriptionLine?.productId) {\r\n      const formData = new FormData();\r\n      formData.append(\"action\", \"getProductData\");\r\n      formData.append(\"productId\", subscriptionLine.productId);\r\n      getFetcher.submit(formData, {\r\n        method: \"POST\",\r\n        action: `.`,\r\n        encType: \"multipart/form-data\",\r\n      });\r\n    }\r\n  }, [modalState]);\r\n\r\n  // Handle response for product data\r\n  useEffect(() => {\r\n    if (getFetcher.state === \"idle\" && getFetcher.data) {\r\n      if (getFetcher.data.success && getFetcher.data.product) {\r\n        const product = getFetcher.data.product as ProductSingleNode;\r\n        const variants = product.variants.nodes || [];\r\n\r\n        setVariantOptions(\r\n          variants.map((v: any) => ({ label: v.title, value: v.id }))\r\n        );\r\n\r\n        if (!subscriptionLine) return;\r\n\r\n        const updatedLine = {\r\n          ...subscriptionLine,\r\n          variantId: variants[0]?.id,\r\n          variantTitle: variants[0]?.title,\r\n          quantity: subscriptionLine.quantity ?? 1,\r\n          lineDiscountedPrice: {\r\n            amount: variants[0]?.price || \"0\",\r\n            currencyCode: subscriptionLine.lineDiscountedPrice.currencyCode,\r\n          },\r\n        };\r\n\r\n        setFormState(updatedLine);\r\n        setInitialState(updatedLine);\r\n      } else {\r\n        toast.error(getFetcher.data.error || \"Failed to fetch product info\");\r\n      }\r\n\r\n      setIsLoading(false);\r\n    }\r\n  }, [getFetcher.state, getFetcher.data]);\r\n\r\n  // Handle response for update\r\n  useEffect(() => {\r\n    if (updateFetcher.state === \"idle\" && updateFetcher.data) {\r\n      if (updateFetcher.data.success) {\r\n        toast.success(\"Subscription product updated!\");\r\n        setModalState(false);\r\n      } else {\r\n        toast.error(updateFetcher.data.error || \"Something went wrong\");\r\n      }\r\n      setIsSubmitLoading(false);\r\n    }\r\n  }, [updateFetcher.state, updateFetcher.data]);\r\n\r\n  const hasChanged =\r\n    JSON.stringify(formState) !== JSON.stringify(initialState);\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={modalState}\r\n      onClose={() => setFormState(null)}\r\n      containerClassName=\"min-w-[500px]\"\r\n    >\r\n      <div className=\"m-auto p-3 relative min-h-[200px]\">\r\n        <div className=\"mb-7 flex items-center justify-between\">\r\n          <Title as=\"h3\">Edit Subscription Product</Title>\r\n          <ActionIcon\r\n            size=\"sm\"\r\n            variant={\"text\" as any}\r\n            onClick={() => setModalState(false)}\r\n          >\r\n            <FaXmark className=\"h-auto w-6\" strokeWidth={1.8} />\r\n          </ActionIcon>\r\n        </div>\r\n\r\n        {isLoading || !formState ? (\r\n          <div className=\"w-full flex justify-center items-center min-h-[200px]\">\r\n            <SubscriptionProductFormSkeleton />\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <div className=\"space-y-4\">\r\n              <Input label=\"Product Name\" value={subscriptionLine?.title || \"\"} disabled />\r\n\r\n              <Select\r\n                label=\"Variant\"\r\n                options={variantOptions}\r\n                value={variantOptions.find((opt: any) => opt.value === formState.variantId)}\r\n                onChange={(opt: any) => {\r\n                  handleChange(\"variantId\", opt.value);\r\n                  const selected = variantOptions.find(v => v.value === opt.value);\r\n                  handleChange(\"variantTitle\", selected?.label || \"\");\r\n                }}\r\n              />\r\n\r\n              <Input label=\"Variant Name\" value={formState.variantTitle || \"\"} disabled />\r\n\r\n              <NumberInput\r\n                label=\"Quantity\"\r\n                value={formState.quantity}\r\n                onChange={(value: number) => handleChange(\"quantity\", value)}\r\n              />\r\n\r\n              <NumberInput\r\n                label=\"Recurring Price\"\r\n                value={parseFloat(formState.lineDiscountedPrice.amount)}\r\n                onChange={(value: number) =>\r\n                  setFormState((prev: any) =>\r\n                    prev\r\n                      ? {\r\n                          ...prev,\r\n                          lineDiscountedPrice: {\r\n                            ...prev.lineDiscountedPrice,\r\n                            amount: value,\r\n                          },\r\n                        }\r\n                      : prev\r\n                  )\r\n                }\r\n              />\r\n            </div>\r\n\r\n            <Flex justify=\"end\" gap=\"1\" className=\"mt-8 space-x-1\">\r\n              <Button variant={\"text\" as any} onClick={() => setModalState(false)}>\r\n                Cancel\r\n              </Button>\r\n              <Button\r\n                color=\"primary\"\r\n                onClick={handleUpdate}\r\n                isLoading={isSubmitLoading}\r\n                loader={<Loader variant=\"spinner\" />}\r\n                disabled={!hasChanged || isLoading}\r\n              >\r\n                Save\r\n              </Button>\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </div>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default EditSubscriptionProductModal;\r\n","const ProductItemSkeleton = () => {\r\n    return (\r\n      <div\r\n        role=\"status\"\r\n        className=\"flex justify-between items-center border p-3 rounded-md animate-pulse space-x-4 w-full\"\r\n      >\r\n        {/* Left: Image */}\r\n        <div className=\"w-12 h-12 bg-gray-300 dark:bg-gray-700 rounded-sm\" />\r\n  \r\n        {/* Middle: Title + Info */}\r\n        <div className=\"flex-1 space-y-2\">\r\n          <div className=\"h-3 bg-gray-200 rounded-full dark:bg-gray-700 w-32\" />\r\n          <div className=\"h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-24\" />\r\n          <div className=\"h-2 bg-gray-200 rounded-full dark:bg-gray-700 w-40\" />\r\n        </div>\r\n  \r\n        {/* Right: Button */}\r\n        <div className=\"w-20 h-8 bg-gray-200 dark:bg-gray-700 rounded-sm\" />\r\n  \r\n        <span className=\"sr-only\">Loading...</span>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default ProductItemSkeleton;\r\n  ","import { formatPrice } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { shopObject } from \"app/states/shopAtom\";\r\nimport { PriceRangeV2 } from \"app/types/product/ProductNode\";\r\nimport { useAtom } from \"jotai\";\r\nimport React from \"react\";\r\n\r\ninterface PriceRangeProps extends React.HTMLAttributes<HTMLSpanElement> {\r\n    priceRangeV2: PriceRangeV2;\r\n}\r\n\r\nconst PriceRange: React.FC<PriceRangeProps> = ({ priceRangeV2, ...props }) => {\r\n    const [shop] = useAtom(shopObject);\r\n    const { currencyFormats: { moneyWithCurrencyFormat } } = shop;\r\n\r\n    const { minVariantPrice, maxVariantPrice } = priceRangeV2;\r\n\r\n    const isSamePrice = maxVariantPrice.amount === minVariantPrice.amount;\r\n    const minPrice = formatPrice(minVariantPrice.amount, moneyWithCurrencyFormat);\r\n    const maxPrice = formatPrice(maxVariantPrice.amount, moneyWithCurrencyFormat);\r\n\r\n    return (\r\n        <span  {...props}>\r\n            Price: {isSamePrice ? minPrice : `${minPrice} - ${maxPrice}`}\r\n        </span>\r\n    );\r\n};\r\n\r\nexport default PriceRange;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport { Modal, Title, Button, Select, Flex, Loader, Box, Text } from \"rizzui\";\r\nimport { FaXmark, FaCheck } from \"react-icons/fa6\";\r\nimport { NumberInput } from \"app/shared/products/selling-plan-groups/components/NumberInput\";\r\nimport { DatePicker } from \"app/packages/ui/datepicker\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\nimport ProductItemSkeleton from \"app/shared/skeletons/ProductItemSkeleton\";\r\nimport type { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport PriceRange from \"../components/PriceRange\";\r\nimport { extractNumericId, formatDate, formatPrice } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { useAtom } from \"jotai\";\r\nimport { shopObject } from \"app/states/shopAtom\";\r\nimport { subscriptionContractAtom } from \"app/states/subscriptionContractAtom\";\r\nimport { SubscriptionLineItem } from \"app/types/subscription/subscriptionQueryTypes\";\r\n\r\nconst SwapProductModal = ({\r\n    modalState,\r\n    setModalState,\r\n    subscriptionLine\r\n}: {\r\n    modalState: boolean;\r\n    setModalState: (val: boolean) => void;\r\n    subscriptionLine?: SubscriptionLineItem;\r\n}) => {\r\n    const getFetcher = useFetcher<any>();\r\n    const submitFetcher = useFetcher<any>();\r\n    const [subscriptionContract] = useAtom(subscriptionContractAtom);\r\n    const [step, setStep] = useState<1 | 2>(1);\r\n    const [products, setProducts] = useState<any[]>([]);\r\n    const [cursor, setCursor] = useState<string | null>(null);\r\n    const [hasNextPage, setHasNextPage] = useState(true);\r\n    const [loadingProducts, setLoadingProducts] = useState(false);\r\n    const [selectedProduct, setSelectedProduct] = useState<ProductSingleNode | null>(null);\r\n    const [variantOptions, setVariantOptions] = useState<{ label: string; value: string }[]>([]);\r\n    const [selectedVariant, setSelectedVariant] = useState<string | null>(null);\r\n    const [quantity, setQuantity] = useState<number>(1);\r\n    const [price, setPrice] = useState<number>(0);\r\n    const [sku, setSku] = useState<string>('');\r\n    const [shop] = useAtom(shopObject);\r\n    const { currencyFormats: { moneyWithCurrencyFormat } } = shop;\r\n    if (!subscriptionContract) return null\r\n    const { nextBillingDate } = subscriptionContract\r\n\r\n    const containerRef = useRef<HTMLDivElement>(null);\r\n\r\n    useEffect(() => {\r\n        if (modalState) {\r\n            setStep(1);\r\n            setProducts([]);\r\n            setCursor(null);\r\n            fetchProducts(null);\r\n        }\r\n    }, [modalState]);\r\n\r\n    const fetchProducts = (cursorParam: string | null) => {\r\n        setLoadingProducts(true);\r\n        const formData = new FormData();\r\n        formData.append(\"action\", \"getProducts\");\r\n        if (cursorParam) formData.append(\"cursor\", cursorParam);\r\n        getFetcher.submit(formData, { method: \"POST\", action: \".\", encType: \"multipart/form-data\" });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (getFetcher.state === \"idle\" && getFetcher.data?.success && getFetcher.data?.products) {\r\n            const newProducts = getFetcher.data.products.edges.map((edge: any) => edge.node);\r\n            setProducts((prev) => [...prev, ...newProducts]);\r\n            setCursor(getFetcher.data.products.pageInfo.endCursor || null);\r\n            setHasNextPage(getFetcher.data.products.pageInfo.hasNextPage);\r\n            setLoadingProducts(false);\r\n        } else if (getFetcher.state === \"idle\" && getFetcher.data && !getFetcher.data.success) {\r\n            toast.error(getFetcher.data.error || \"Failed to fetch product info\");\r\n        }\r\n    }, [getFetcher.state, getFetcher.data]);\r\n\r\n    useEffect(() => {\r\n        const observer = new IntersectionObserver(([entry]) => {\r\n            if (entry.isIntersecting && hasNextPage && !loadingProducts) {\r\n                fetchProducts(cursor);\r\n            }\r\n        }, { threshold: 1 });\r\n\r\n        const current = containerRef.current;\r\n        if (current) observer.observe(current);\r\n        return () => current && observer.unobserve(current);\r\n    }, [hasNextPage, loadingProducts, cursor]);\r\n\r\n    const handleNext = () => {\r\n        if (!selectedProduct) return toast.error(\"Please select a product\");\r\n        const firstVariant = selectedProduct.variants?.nodes?.[0];\r\n        const options = selectedProduct.variants.nodes\r\n            .filter((v: any) => v && v.title && v.id)\r\n            .map((v: any) => ({ label: v.title, value: v.id }));\r\n\r\n        setVariantOptions(options);\r\n        setSelectedVariant(firstVariant?.id || null);\r\n        setPrice(parseFloat(firstVariant?.price || \"0\"));\r\n        setSku(firstVariant?.sku || \"\");\r\n        setStep(2);\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        if (!selectedProduct || !selectedVariant) return toast.error(\"Missing data\");\r\n        const formData = new FormData();\r\n        formData.append(\"action\", \"subscriptionLineProductUpdate\");\r\n        const formState: Partial<SubscriptionLineItem> = {\r\n            id: subscriptionLine?.id,\r\n            productId: selectedProduct?.id,\r\n            variantId: selectedVariant,\r\n            quantity,\r\n        };\r\n        formData.append(\"updatedLine\", JSON.stringify(formState));\r\n\r\n        submitFetcher.submit(formData, { method: \"POST\", action: \".\", encType: \"multipart/form-data\" });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (submitFetcher.state === \"idle\" && submitFetcher.data) {\r\n            if (submitFetcher.data.success) {\r\n                toast.success(\"Product swapped successfully!\");\r\n                resetModal();\r\n            } else {\r\n                toast.error(submitFetcher.data.error || \"Something went wrong\");\r\n            }\r\n        }\r\n    }, [submitFetcher.state, submitFetcher.data]);\r\n\r\n    const resetModal = () => {\r\n        setModalState(false);\r\n        setStep(1);\r\n        setProducts([]);\r\n        setCursor(null);\r\n        setSelectedProduct(null);\r\n        setSelectedVariant(null);\r\n        setVariantOptions([]);\r\n    };\r\n\r\n    const currentVariant = selectedProduct?.variants.nodes.find(\r\n        (v: any) => v.id === selectedVariant\r\n    );\r\n    console.log('selectedProduct', selectedProduct);\r\n    console.log('currentVariant', currentVariant);\r\n    return (\r\n        <Modal isOpen={modalState} onClose={resetModal} containerClassName=\"min-w-[600px] max-h-[90vh] overflow-y-auto\">\r\n            <div className=\"p-4\">\r\n                <div className=\"flex justify-between mb-6\">\r\n                    <Title as=\"h3\">{step === 1 ? \"Swap Product\" : \"Edit Variant\"}</Title>\r\n                    <Button variant={\"text\" as any} onClick={resetModal}><FaXmark /></Button>\r\n                </div>\r\n\r\n                {step === 1 ? (\r\n                    <div className=\"space-y-4\">\r\n                        {products.map((product: ProductSingleNode, index) => {\r\n                            console.log('productssss', product)\r\n                            return (\r\n                                <div key={product.id + index} className=\"flex items-center justify-between border p-3 rounded-md\">\r\n                                    <div className=\"flex items-center gap-3\">\r\n                                        <img\r\n                                            src={product.featuredMedia?.preview?.image?.url || \"/placeholder.png\"}\r\n                                            alt={product.featuredMedia?.preview?.image?.altText || product.title}\r\n                                            className=\"w-12 h-12 object-cover rounded\"\r\n                                        />\r\n                                        <div>\r\n                                            <div className=\"font-bold\">{product.title}</div>\r\n                                            <div className=\"text-sm text-[#606270] font-bold\">\r\n                                                {product.priceRangeV2 && (\r\n                                                    <PriceRange\r\n                                                        priceRangeV2={product.priceRangeV2}\r\n                                                        className=\"text-sm font-bold\"\r\n                                                    />\r\n                                                )}\r\n                                            </div>\r\n                                            <div className=\"text-xs font-bold text-[#606270]\">\r\n                                                Product ID: {extractNumericId(product.id)}\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div>\r\n                                        {selectedProduct?.id === product.id ? (\r\n                                            <span className=\"flex items-center gap-2 text-green-600 font-semibold\">\r\n                                                <FaCheck /> Selected\r\n                                            </span>\r\n                                        ) : (\r\n                                            <Button\r\n                                                size=\"md\"\r\n                                                onClick={() => setSelectedProduct(product)}\r\n                                                variant={\"outline\" as any}\r\n                                            >\r\n                                                Select\r\n                                            </Button>\r\n                                        )}\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })}\r\n\r\n                        <div ref={containerRef} className=\"w-full py-4 text-center\">\r\n                            {loadingProducts && (\r\n                                <Flex gap=\"2\" direction=\"col\" className=\"w-full\">\r\n                                    {[...Array(3)].map((_, index) => (\r\n                                        <ProductItemSkeleton key={index} />\r\n                                    ))}\r\n                                </Flex>\r\n                            )}\r\n                        </div>\r\n\r\n                        <Flex justify=\"end\" className=\"sticky bottom-0 bg-white p-4\">\r\n                            <Button\r\n                                variant={\"outline\" as any}\r\n                                onClick={resetModal}\r\n                            >Cancel</Button>\r\n                            <Button onClick={handleNext} className=\"ml-2\">Next</Button>\r\n                        </Flex>\r\n                    </div>\r\n                ) : (\r\n                    selectedProduct && (\r\n                        <div className=\"space-y-5\">\r\n                            <div className=\"flex items-center gap-4 border p-3 rounded-md\">\r\n                                <img\r\n                                    src={selectedProduct.featuredMedia?.preview?.image?.url || \"/placeholder.png\"}\r\n                                    className=\"w-14 h-14 rounded\"\r\n                                />\r\n                                <div>\r\n                                    <div className=\"font-semibold text-[#2E3685]\">{selectedProduct.title}</div>\r\n                                    <div className=\"text-sm text-[#606270]\">SKU: {sku || \"N/A\"}</div>\r\n                                    <div className=\"text-xs text-[#606270]\">Product ID: {extractNumericId(selectedProduct.id)}</div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <Select\r\n                                label=\"Variant\"\r\n                                options={variantOptions}\r\n                                value={variantOptions.find((opt) => opt.value === selectedVariant)}\r\n                                onChange={(opt: any) => {\r\n                                    setSelectedVariant(opt?.value);\r\n                                    const variant = selectedProduct.variants.nodes.find(v => v.id === opt?.value);\r\n                                    if (variant?.price) {\r\n                                        setPrice(parseFloat(variant.price))\r\n                                        setSku(variant.sku)\r\n                                    };\r\n                                }}\r\n                            />\r\n\r\n                            <NumberInput label=\"Quantity\" value={quantity} onChange={setQuantity} />\r\n                            {/* <NumberInput label=\"Price\" value={price} onChange={setPrice}  /> */}\r\n                            <Flex direction=\"col\">\r\n                                <Box>\r\n                                    <Text className=\"font-semibold\">Price</Text>\r\n                                    <Text>{formatPrice(price, moneyWithCurrencyFormat)}</Text>\r\n                                </Box>\r\n                                <Box>\r\n                                    <Text className=\"font-semibold\">Next Billing Date</Text>\r\n                                    <Text>{formatDate(nextBillingDate, false)}</Text>\r\n                                </Box>\r\n                            </Flex>\r\n\r\n                            <Flex justify=\"end\" className=\"pt-4\">\r\n                                <Button variant={\"outline\" as any} onClick={() => setStep(1)}>Back</Button>\r\n                                <Button\r\n                                    className=\"ml-2\"\r\n                                    onClick={handleSubmit}\r\n                                    isLoading={submitFetcher.state !== \"idle\"}\r\n                                    loader={<Loader variant=\"spinner\" />}\r\n                                >\r\n                                    Save\r\n                                </Button>\r\n                            </Flex>\r\n                        </div>\r\n                    )\r\n                )}\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default SwapProductModal;\r\n","import { useTanStackTable } from \"app/packages/components/table/custom/use-TanStack-Table\";\r\nimport { formatDate } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { OtherAactions, SubscripiontLinesTablesData, SubscriptionContractSingleNode, SubscriptionLineEdge, SubscriptionLineItem } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport { Flex } from \"rizzui\";\r\nimport { lineColumns } from \"./column\";\r\nimport MainTable from \"app/packages/components/table\";\r\nimport { useAtom } from \"jotai\";\r\nimport { subscriptionContractAtom } from \"app/states/subscriptionContractAtom\";\r\nimport RescheduleBillingModal from \"./Modals/RescheduleNextBillingDate\";\r\nimport EditOrderFrequencyModal from \"./Modals/EditOrderFrequencyModal\";\r\nimport CancelSubscriptionModal from \"./Modals/CancelSubscriptionModal\";\r\nimport ReactiveSubscriptionModal from \"./Modals/ReactiveSubscriptionModal\";\r\nimport EditLineItemAttributeModal from \"./Modals/EditLineItemAttributeModal\";\r\nimport EditSubscriptionProductModal from \"./Modals/EditSubscriptionProductModal\";\r\nimport SwapProductModal from \"./Modals/SwapProductModal\";\r\n\r\n\r\nconst SubscriptionLineItems = () => {\r\n    const [subscriptionContract] = useAtom(subscriptionContractAtom);\r\n    const [isRescheduleModalOpen, setIsRescheduleModalOpen] = useState(false);\r\n    const [isEditOrderFrequencyModalOpen, setIsEditOrderFrequencyModalOpen] = useState(false);\r\n    const [isCancelSubscriptionModalOpen, setIsCancelSubscriptionModalOpen] = useState(false);\r\n    const [isReactiveSubscriptionModalOpen, setIsReactiveSubscriptionModalOpen] = useState(false);\r\n    const [isEditLineItemAttributesModalOpen, setIsEditLineItemAttributesModalOpen] = useState(false);\r\n    const [isEditSubscriptionProductModalOpen, setIsEditSubscriptionProductModalOpen] = useState(false);\r\n    const [isSwapProductModalOpen, setIsSwapProductModalOpen] = useState(false);\r\n    const [subscriptionLine, setSubscriptionLine] = useState<SubscriptionLineItem | undefined>(undefined);\r\n    if (!subscriptionContract) return null;\r\n    const { nextBillingDate } = subscriptionContract\r\n\r\n    const otherActions: OtherAactions = {\r\n        setIsRescheduleModalOpen,\r\n        setIsEditOrderFrequencyModalOpen,\r\n        setIsCancelSubscriptionModalOpen,\r\n        setIsReactiveSubscriptionModalOpen,\r\n        setIsEditLineItemAttributesModalOpen,\r\n        setSubscriptionLine,\r\n        setIsEditSubscriptionProductModalOpen,\r\n        setIsSwapProductModalOpen\r\n    }\r\n    const tableData = useMemo(\r\n        () => transformShopifyContractLines(\r\n            subscriptionContract?.lines?.edges || [],\r\n            subscriptionContract,\r\n            otherActions\r\n        ),\r\n        [subscriptionContract?.lines]\r\n    );\r\n\r\n    const { table, setData } = useTanStackTable<SubscripiontLinesTablesData>({\r\n        tableData,\r\n        columnConfig: lineColumns,\r\n        options: {\r\n            initialState: { pagination: { pageIndex: 0, pageSize: 20 } },\r\n            enableColumnResizing: false,\r\n        },\r\n    });\r\n\r\n    useEffect(() => {\r\n        setData(tableData)\r\n    }, [tableData, setData]);\r\n\r\n\r\n    return (\r\n        <Flex className=\"w-full\">\r\n            <MainTable table={table} variant=\"classic\" />\r\n            <RescheduleBillingModal\r\n                modalState={isRescheduleModalOpen}\r\n                setModalState={setIsRescheduleModalOpen}\r\n                nextBillingDate={nextBillingDate}\r\n            />\r\n            <EditOrderFrequencyModal\r\n                modalState={isEditOrderFrequencyModalOpen}\r\n                setModalState={setIsEditOrderFrequencyModalOpen}\r\n                billingPolicy={subscriptionContract.billingPolicy}\r\n            />\r\n            <CancelSubscriptionModal\r\n                modalState={isCancelSubscriptionModalOpen}\r\n                setModalState={setIsCancelSubscriptionModalOpen}\r\n            />\r\n            <ReactiveSubscriptionModal\r\n                modalState={isReactiveSubscriptionModalOpen}\r\n                setModalState={setIsReactiveSubscriptionModalOpen}\r\n            />\r\n            <EditLineItemAttributeModal\r\n                modalState={isEditLineItemAttributesModalOpen}\r\n                setModalState={setIsEditLineItemAttributesModalOpen}\r\n                subscriptionLine={subscriptionLine}\r\n            />\r\n            <EditSubscriptionProductModal \r\n                modalState={isEditSubscriptionProductModalOpen}\r\n                setModalState={setIsEditSubscriptionProductModalOpen}\r\n                subscriptionLine={subscriptionLine}\r\n            />\r\n\r\n            <SwapProductModal\r\n                modalState={isSwapProductModalOpen}\r\n                setModalState={setIsSwapProductModalOpen}\r\n                subscriptionLine={subscriptionLine}\r\n            />\r\n\r\n        </Flex>\r\n    );\r\n};\r\n\r\nconst transformShopifyContractLines = (\r\n    lines: SubscriptionLineEdge[],\r\n    subscriptionContract: SubscriptionContractSingleNode,\r\n    otherActions: OtherAactions\r\n) => {\r\n    const { nextBillingDate, deliveryPolicy, billingPolicy, shop, status, note } = subscriptionContract\r\n    return lines.map(({ node }: { node: SubscriptionLineItem }) => ({\r\n        id: node.id ?? null,\r\n        title: node.title ?? \"Untitled\",\r\n        variantTitle: node.variantTitle,\r\n        quantity: node.quantity,\r\n        lineDiscountedPrice: {\r\n            amount: node.lineDiscountedPrice.amount,\r\n            currencyCode: node.lineDiscountedPrice.currencyCode\r\n        },\r\n        variantImage: node.variantImage ? { url: node.variantImage.url } : undefined,\r\n        nextBillingDate: formatDate(nextBillingDate, false),\r\n        deliveryPolicyInterval: deliveryPolicy?.interval || \"N/A\",\r\n        deliveryPolicyIntervalCount: deliveryPolicy?.intervalCount || 0,\r\n        billingPolicyInterval: billingPolicy?.interval || \"N/A\",\r\n        billingPolicyIntervalCount: billingPolicy?.intervalCount || 0,\r\n        shop: shop,\r\n        status: status,\r\n        otherActions: otherActions,\r\n        note: note,\r\n        node: node\r\n    }));\r\n};\r\n\r\nexport default SubscriptionLineItems","import SubscriptionDetailsHeader from \"./SubscriptionDetailsHeader\"\r\nimport { Box } from \"rizzui\";\r\nimport { useAtom } from \"jotai\";\r\nimport { subscriptionContractAtom } from \"app/states/subscriptionContractAtom\";\r\nimport SubscriptionLineItems from \"./SubscripitionLineItems\";\r\n\r\nconst SubscriptionDetails = () => {\r\n    const [subscriptionContract] = useAtom(subscriptionContractAtom);\r\n\r\n    if (!subscriptionContract) {\r\n        return null; // Handle the case where subscriptionContract is undefined\r\n    }\r\n\r\n    return (\r\n        <div className=\"my-6 flex w-full cursor-pointer flex-col gap-y-4 rounded-[10px] border border-muted lg:gap-y-6\">\r\n            <SubscriptionDetailsHeader />\r\n            <Box className=\"text-sm text-gray-600 w-full\">\r\n                <SubscriptionLineItems />\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubscriptionDetails","import { Dropdown, Button } from \"rizzui\";\r\nimport { BsChevronDown } from \"react-icons/bs\";\r\nimport { PiPencil } from \"react-icons/pi\";\r\nimport { FaBars } from \"react-icons/fa6\";\r\nimport DropdownActionItem from \"../SubscriptionDetails/DropdownActionItem\";\r\nimport { BillingCycleNode, OtherAactionsUpCommingOrders } from \"app/types/subscription/subscriptionQueryTypes\";\r\n\r\n\r\ninterface OrdersActionsProps {\r\n    OtherAactions: OtherAactionsUpCommingOrders\r\n    billingCycle: BillingCycleNode\r\n}\r\n\r\nconst OrdersActions: React.FC<OrdersActionsProps> = ({ OtherAactions, billingCycle }) => {\r\n    const ACTIONS = [\r\n        {\r\n            icon: PiPencil,\r\n            label: \"Reschedule\",\r\n            setState: (value: boolean) => {\r\n                OtherAactions.setIsRescheduleModalOpen(value)\r\n                OtherAactions.setSelectedUpcommingOrders(billingCycle)\r\n            }\r\n        },\r\n        {\r\n            icon: FaBars,\r\n            label: \"Process now\"\r\n        },\r\n    ];\r\n    return (\r\n        <Dropdown>\r\n            <Dropdown.Trigger onClick={(e) => e.stopPropagation()}>\r\n                <Button as=\"span\" variant={\"text\" as any} color=\"primary\" className=\"text-primary font-bold text-sm\">\r\n                    Actions <BsChevronDown className=\"ml-2 w-5\" />\r\n                </Button>\r\n            </Dropdown.Trigger>\r\n            <Dropdown.Menu className=\"min-w-[280px]\" onClick={(e) => e.stopPropagation()}>\r\n                {ACTIONS.map((action, index) => (\r\n                    <DropdownActionItem\r\n                        key={index}\r\n                        icon={action.icon}\r\n                        label={action.label}\r\n                        onClick={() => action.setState && action.setState(true)}\r\n                    />\r\n                ))}\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default OrdersActions;\r\n","import { Box, Text } from \"rizzui\";\r\nimport { formatPrice } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { SubscriptionLineItem } from \"app/types/subscription/subscriptionQueryTypes\";\r\n\r\nconst OrderItem = ({ node, moneyWithCurrencyFormat }: { node: SubscriptionLineItem, moneyWithCurrencyFormat: string }) => {\r\n    const formattedPrice = formatPrice(node.lineDiscountedPrice.amount, moneyWithCurrencyFormat);\r\n\r\n    return (\r\n        <Box className=\"w-full flex gap-4\">\r\n            <img src={node.variantImage?.url || \"\"} alt={node.title} className=\"w-12 h-12 object-cover rounded-md\" />\r\n            <div className=\"flex-1\">\r\n                <Text className=\"text-sm font-semibold\">{node.title}</Text>\r\n                <Text className=\"text-sm text-gray-400\">{node.variantTitle}</Text>\r\n                <Text className=\"text-sm text-gray-400\">SKU: {node.sku}</Text>\r\n            </div>\r\n            <div className=\"text-right\">\r\n                <Text>{node.quantity} x {formattedPrice}</Text>\r\n            </div>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default OrderItem;\r\n","import { Box, Text, Title } from \"rizzui\";\r\n\r\ninterface ShippingDetailsProps {\r\n    address: any;\r\n    displayName: string;\r\n    addressId: number | null;\r\n}\r\n\r\nconst ShippingDetails: React.FC<ShippingDetailsProps> = ({ address, displayName, addressId }) => {\r\n    if (!address) return null;\r\n\r\n    return (\r\n        <Box className=\"rounded-[10px] border border-muted w-full p-3\">\r\n            <Title as=\"h6\" className=\"text-md font-semibold mb-3\">\r\n                Shipping Address (ID #{addressId})\r\n            </Title>\r\n            <Box>\r\n                <Text className=\"text-sm\">{displayName}</Text>\r\n                <Text className=\"text-sm\">{address.address1}</Text>\r\n                {address.address2 && <Text className=\"text-sm\">{address.address2}</Text>}\r\n                <Text className=\"text-sm\">\r\n                    {address.city}, {address.province}, {address.country} - {address.zip}\r\n                </Text>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ShippingDetails;\r\n","import { Box, Flex, Text, Title } from \"rizzui\";\r\nimport { BillingCycleNode } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { useAtom } from \"jotai\";\r\nimport { shopObject } from \"app/states/shopAtom\";\r\nimport { calculateTotalDiscountedPrice, extractNumericId, formatPrice } from \"app/packages/utils/shopifyIdUtils\";\r\nimport OrderItem from \"./OrderItem\";\r\nimport ShippingDetails from \"./ShippingDetails\";\r\n\r\nconst UpcommingOrderDetails = ({ details }: { details: BillingCycleNode }) => {\r\n    const [shop] = useAtom(shopObject);\r\n    const { currencyFormats: { moneyWithCurrencyFormat } } = shop;\r\n    \r\n    const { sourceContract: { lines: { edges }, deliveryMethod, deliveryPrice, customer } } = details;\r\n    \r\n    const formatedDeliveryPrice = formatPrice(deliveryPrice?.amount || 0, moneyWithCurrencyFormat);\r\n    const totalPrice = calculateTotalDiscountedPrice(details.sourceContract.lines);\r\n    const formatedTotalPrice = formatPrice(totalPrice, moneyWithCurrencyFormat);\r\n    \r\n    const { displayName, addressesV2 } = customer;\r\n    const address = addressesV2?.edges?.[0]?.node;\r\n    const addressId = extractNumericId(address?.id || \"\");\r\n\r\n    return (\r\n        <Flex className=\"w-full\">\r\n            {/* Order Summary Section */}\r\n            <Flex className=\"w-[70%]\" direction=\"col\">\r\n                <Box className=\"rounded-[10px] border border-muted w-full p-3 mb-2\">\r\n                    <Title as=\"h6\" className=\"text-md font-semibold mb-3\">Summary</Title>\r\n                    <Flex direction=\"col\">\r\n                        {edges.map((edge, index) => (\r\n                            <OrderItem key={index} node={edge.node} moneyWithCurrencyFormat={moneyWithCurrencyFormat} />\r\n                        ))}\r\n                        <hr className=\"my-2 text-gray-800 w-full\" />\r\n                        <Box className=\"flex justify-between w-full\">\r\n                            <Text className=\"text-sm\">Shipping</Text>\r\n                            <Text className=\"text-sm\">{deliveryMethod?.shippingOption?.title}</Text>\r\n                            <Text className=\"text-sm\">{formatedDeliveryPrice}</Text>\r\n                        </Box>\r\n                        <hr className=\"my-2 text-gray-800 w-full\" />\r\n                        <Box className=\"flex justify-between w-full\">\r\n                            <Text className=\"text-sm font-bold\">Total</Text>\r\n                            <Text className=\"text-sm font-bold\">{formatedTotalPrice}</Text>\r\n                        </Box>\r\n                    </Flex>\r\n                </Box>\r\n            </Flex>\r\n\r\n            {/* Shipping Address Section */}\r\n            <Flex className=\"w-[30%]\">\r\n                <ShippingDetails address={address} displayName={displayName} addressId={addressId} />\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default UpcommingOrderDetails;\r\n","import { Accordion, Badge, Box, Flex, Text } from \"rizzui\";\r\nimport { FaChevronDown } from \"react-icons/fa6\";\r\nimport { formatDate } from \"app/packages/utils/shopifyIdUtils\";\r\nimport OrdersActions from \"./OrdersActions\";\r\nimport UpcommingOrderDetails from \"./UpcommingOrderDetails\";\r\nimport { OtherAactionsUpCommingOrders } from \"app/types/subscription/subscriptionQueryTypes\";\r\n\r\ninterface UpCommingOrderItemProps {\r\n    billingCycle: any;\r\n    OtherAactions: OtherAactionsUpCommingOrders\r\n}\r\n\r\nconst UpCommingOrderItem: React.FC<UpCommingOrderItemProps> = ({ billingCycle, OtherAactions }) => {\r\n    const billingAttemptExpectedDateFormatted = formatDate(billingCycle.billingAttemptExpectedDate, false);\r\n\r\n    return (\r\n        <Accordion className=\"border-b last-of-type:border-b-0\">\r\n            <Accordion.Header>\r\n                {({ open }) => (\r\n                    <div className=\"flex gap-3 w-full cursor-pointer items-center justify-between py-2 text-xl font-semibold\">\r\n                        <FaChevronDown\r\n                            className={`h-3 w-3 transform transition-transform duration-300 ${open ? \"rotate-0\" : \"-rotate-90\"}`}\r\n                        />\r\n                        <Flex justify=\"between\" align=\"center\">\r\n                            <Box>\r\n                                <Text className=\"text-sm\">{billingAttemptExpectedDateFormatted}</Text>\r\n                            </Box>\r\n                            <Box className=\"flex items-center gap-2\">\r\n                                <Badge renderAsDot color=\"info\" />\r\n                                <Text className=\"text-sm\">Queued</Text>\r\n                            </Box>\r\n                            <OrdersActions\r\n                                OtherAactions={OtherAactions}\r\n                                billingCycle={billingCycle}\r\n                            />\r\n                        </Flex>\r\n                    </div>\r\n                )}\r\n            </Accordion.Header>\r\n            <Accordion.Body>\r\n                <UpcommingOrderDetails details={billingCycle} />\r\n            </Accordion.Body>\r\n        </Accordion>\r\n    );\r\n};\r\n\r\nexport default UpCommingOrderItem;\r\n","import { useAtom } from \"jotai\";\r\nimport { subscriptionContractAtom } from \"app/states/subscriptionContractAtom\";\r\nimport UpCommingOrderItem from \"./UpCommingOrderItem\";\r\nimport { OtherAactionsUpCommingOrders } from \"app/types/subscription/subscriptionQueryTypes\";\r\ninterface UpCommingOrdersListDataProps {\r\n    OtherAactions: OtherAactionsUpCommingOrders\r\n}\r\nconst UpCommingOrdersListData: React.FC<UpCommingOrdersListDataProps> = ({ OtherAactions }) => {\r\n    const [subscriptionContract] = useAtom(subscriptionContractAtom);\r\n    if (!subscriptionContract) return null;\r\n    const { edges } = subscriptionContract.subscriptionBillingCycles;\r\n    const unbilledCycles = edges.filter(edge => edge.node.status === 'UNBILLED');\r\n    return (\r\n        <div className=\"space-y-4\">\r\n            {unbilledCycles.map((edge, index) => (\r\n                <UpCommingOrderItem\r\n                    key={index}\r\n                    billingCycle={edge.node}\r\n                    OtherAactions={OtherAactions}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpCommingOrdersListData;\r\n","import { FaChevronDown } from \"react-icons/fa6\";\r\n\r\ninterface AccordionHeaderProps {\r\n    open: boolean;\r\n    title: string;\r\n}\r\n\r\nconst AccordionHeader: React.FC<AccordionHeaderProps> = ({ open, title }) => {\r\n    return (\r\n        <div className=\"flex gap-2 w-full cursor-pointer items-center py-2 text-xl font-semibold\">\r\n            <FaChevronDown\r\n                className={`h-5 w-5 transform transition-transform duration-300 ${open ? \"rotate-0\" : \"-rotate-90\"}`}\r\n            />\r\n            {title}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AccordionHeader;\r\n","import { useEffect, useState } from \"react\";\r\nimport { FaCalendar, FaXmark } from \"react-icons/fa6\";\r\nimport {\r\n    Modal,\r\n    Title,\r\n    ActionIcon,\r\n    Button,\r\n    Flex,\r\n    Loader,\r\n    Input,\r\n} from \"rizzui\";\r\nimport toast from \"react-hot-toast\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\nimport { BillingCycleNode } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { formatToUtcHour } from \"app/packages/utils/shopifyIdUtils\";\r\n\r\nconst RescheduleNextOrder = ({\r\n    modalState,\r\n    setModalState,\r\n    selectedUpcommingOrder\r\n}: {\r\n    modalState: boolean;\r\n    setModalState: (state: boolean) => void;\r\n    selectedUpcommingOrder: BillingCycleNode | null\r\n}) => {\r\n    console.log('selectedUpcommingOrder', selectedUpcommingOrder);\r\n    const fetcher = useFetcher<any>();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [selectedDate, setSelectedDate] = useState<Date | null>(\r\n        selectedUpcommingOrder?.billingAttemptExpectedDate ? new Date(selectedUpcommingOrder?.billingAttemptExpectedDate) : null\r\n    );\r\n\r\n    const canSave = selectedDate && selectedDate.toISOString() !== selectedUpcommingOrder?.billingAttemptExpectedDate;\r\n\r\n    useEffect(() => {\r\n        if (selectedUpcommingOrder?.billingAttemptExpectedDate) {\r\n            setSelectedDate(new Date(selectedUpcommingOrder.billingAttemptExpectedDate));\r\n        }\r\n    }, [selectedUpcommingOrder]);\r\n    const handleSubmit = () => {\r\n        if (!selectedDate) return;\r\n        setIsLoading(true);\r\n        const formData = new FormData();\r\n        formData.append(\"action\", \"rescheduleBillingCycleDate\");\r\n        formData.append(\"date\", formatToUtcHour(selectedDate.toISOString()))\r\n        if (selectedUpcommingOrder) {\r\n            formData.append(\"oldDate\", String(selectedUpcommingOrder.billingAttemptExpectedDate));\r\n            formData.append(\"index\", String(selectedUpcommingOrder.cycleIndex));\r\n        }\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Billing date updated!\");\r\n                setModalState(false);\r\n            } else {\r\n                toast.error(fetcher?.data?.error || \"Something went wrong\");\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalState}\r\n            onClose={() => setModalState(false)}\r\n            containerClassName=\"min-w-[500px] overflow-visible z-[999] relative\"\r\n        >\r\n            <div className=\"m-auto p-3\">\r\n                {/* Header */}\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Reschedule Next Billing</Title>\r\n                    <ActionIcon size=\"sm\" variant={\"text\" as any} onClick={() => setModalState(false)}>\r\n                        <FaXmark className=\"h-auto w-6\" strokeWidth={1.8} />\r\n                    </ActionIcon>\r\n                </div>\r\n\r\n                {/* Input Field with Calendar Icon */}\r\n                <Flex className=\"relative w-full\">\r\n                    <FaCalendar className=\"absolute left-3 top-[37px] text-muted w-4 h-4\" />\r\n                    <Input\r\n                        label=\"Select Date & Time\"\r\n                        type=\"datetime-local\"\r\n                        value={\r\n                            selectedDate\r\n                                ? new Date(selectedDate.getTime() - selectedDate.getTimezoneOffset() * 60000)\r\n                                    .toISOString()\r\n                                    .slice(0, 16)\r\n                                : ''\r\n                        }\r\n                        onChange={(e) => setSelectedDate(new Date(e.target.value))}\r\n                        className=\"pl-10 w-full\"\r\n                    />\r\n                </Flex>\r\n\r\n                {/* Action Buttons */}\r\n                <Flex justify=\"end\" gap=\"1\" className=\"mt-8 space-x-1\">\r\n                    <Button variant={\"outline\" as any} onClick={() => setModalState(false)}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        onClick={handleSubmit}\r\n                        isLoading={isLoading}\r\n                        loader={<Loader variant=\"spinner\" />}\r\n                        disabled={!canSave || isLoading}\r\n                    >\r\n                        Save\r\n                    </Button>\r\n                </Flex>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default RescheduleNextOrder;\r\n","import { Accordion } from \"rizzui\";\r\nimport { useAtom } from \"jotai\";\r\nimport { subscriptionContractAtom } from \"app/states/subscriptionContractAtom\";\r\nimport UpCommingOrdersListData from \"./UpCommingOrdersListData\";\r\nimport AccordionHeader from \"./AccordionHeader\";\r\nimport { useState } from \"react\";\r\nimport { BillingCycleNode, OtherAactionsUpCommingOrders } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport RescheduleNextOrder from \"./Modals/RescheduleNextOrder\";\r\n\r\nconst UpCommingOrdersList = () => {\r\n    const [isRescheduleModalOpen, setIsRescheduleModalOpen] = useState(false);\r\n    const [selectedUpcommingOrder, setSelectedUpcommingOrders] = useState<BillingCycleNode | null>(null);\r\n    const OtherAactions: OtherAactionsUpCommingOrders = {\r\n        setIsRescheduleModalOpen,\r\n        setSelectedUpcommingOrders\r\n    }\r\n    return (\r\n        <div className=\"my-6 flex w-full cursor-pointer flex-col gap-y-4 rounded-[10px] border border-muted lg:gap-y-6 p-3\">\r\n            <Accordion className=\"border-b last-of-type:border-b-0\" defaultOpen>\r\n                <Accordion.Header>\r\n                    {({ open }) => <AccordionHeader\r\n                        open={open}\r\n                        title=\"Upcoming Orders\"\r\n                    />}\r\n                </Accordion.Header>\r\n                <Accordion.Body>\r\n                    <UpCommingOrdersListData\r\n                        OtherAactions={OtherAactions}\r\n                    />\r\n                </Accordion.Body>\r\n            </Accordion>\r\n            <RescheduleNextOrder\r\n                modalState={isRescheduleModalOpen}\r\n                setModalState={setIsRescheduleModalOpen}\r\n                selectedUpcommingOrder={selectedUpcommingOrder}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default UpCommingOrdersList;\r\n","import { Box, Text } from \"rizzui\";\r\nimport { formatPrice } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { LineItemNode } from \"app/types/subscription/subscriptionQueryTypes\";\r\n\r\nconst OrderItem = ({ node, moneyWithCurrencyFormat }: { node: LineItemNode, moneyWithCurrencyFormat: string }) => {\r\n    const formattedPrice = formatPrice(node.originalTotalSet.presentmentMoney.amount, moneyWithCurrencyFormat);\r\n\r\n    return (\r\n        <Box className=\"w-full flex gap-4\">\r\n            <img\r\n                src={node.variant?.image?.url || node?.product?.featuredMedia?.preview?.image?.url || \"\"}\r\n                alt={node.title}\r\n                className=\"w-12 h-12 object-cover rounded-md\"\r\n            />\r\n            <div className=\"flex-1\">\r\n                <Text className=\"text-sm font-semibold\">{node.title}</Text>\r\n                <Text className=\"text-sm text-gray-400\">{node.variantTitle}</Text>\r\n                <Text className=\"text-sm text-gray-400\">SKU: {node.sku}</Text>\r\n            </div>\r\n            <div className=\"text-right\">\r\n                <Text>{node.quantity} x {formattedPrice}</Text>\r\n            </div>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default OrderItem;\r\n","import { Box, Text, Title } from \"rizzui\";\r\n\r\ninterface ShippingDetailsProps {\r\n    address: any;\r\n    displayName: string;\r\n    addressId: number | null;\r\n    className: string\r\n}\r\n\r\nconst ShippingDetails: React.FC<ShippingDetailsProps> = ({ address, displayName, addressId, className = \"rounded-[10px] border border-muted w-full p-3\" }) => {\r\n    if (!address) return null;\r\n\r\n    return (\r\n        <Box className={className}>\r\n            <Title as=\"h6\" className=\"text-md font-semibold mb-3\">\r\n                Shipping Address (ID #{addressId})\r\n            </Title>\r\n            <Box>\r\n                <Text className=\"text-sm\">{displayName}</Text>\r\n                <Text className=\"text-sm\">{address.address1}</Text>\r\n                {address.address2 && <Text className=\"text-sm\">{address.address2}</Text>}\r\n                <Text className=\"text-sm\">\r\n                    {address.city}, {address.province}, {address.country} - {address.zip}\r\n                </Text>\r\n            </Box>\r\n        </Box>\r\n    );\r\n};\r\n\r\nexport default ShippingDetails;\r\n","import { Box, Flex, Text, Title } from \"rizzui\";\r\nimport { OrderNode } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { useAtom } from \"jotai\";\r\nimport { shopObject } from \"app/states/shopAtom\";\r\nimport { extractNumericId, formatPrice } from \"app/packages/utils/shopifyIdUtils\";\r\nimport OrderItem from \"./OrderItem\";\r\nimport ShippingDetails from \"./ShippingDetails\";\r\n\r\nconst RecentOrderDetails = ({ details }: { details: OrderNode }) => {\r\n    const [shop] = useAtom(shopObject);\r\n    const { currencyFormats: { moneyWithCurrencyFormat } } = shop;\r\n\r\n    const {\r\n        lineItems: { edges },\r\n        currentShippingPriceSet,\r\n        currentSubtotalPriceSet,\r\n        currentTotalPriceSet,\r\n        currentTotalTaxSet,\r\n        shippingLine,\r\n        customer,\r\n    } = details;\r\n\r\n    const formattedDeliveryPrice = formatPrice(currentShippingPriceSet.presentmentMoney.amount, moneyWithCurrencyFormat);\r\n    const formattedTotalPrice = formatPrice(currentTotalPriceSet.presentmentMoney.amount, moneyWithCurrencyFormat);\r\n    const formattedSubtotalPrice = formatPrice(currentSubtotalPriceSet.presentmentMoney.amount, moneyWithCurrencyFormat);\r\n    const formattedTotalTaxPrice = formatPrice(currentTotalTaxSet.presentmentMoney.amount, moneyWithCurrencyFormat);\r\n\r\n    const { displayName, addressesV2 } = customer;\r\n    const address = addressesV2?.edges?.[0]?.node;\r\n    const addressId = extractNumericId(address?.id || \"\");\r\n\r\n    return (\r\n        <Flex className=\"w-full\">\r\n            {/* Order Summary Section */}\r\n            <Flex className=\"w-[70%]\" direction=\"col\">\r\n                <Box className=\"rounded-[10px] border border-muted w-full p-3 mb-2\">\r\n                    <Title as=\"h6\" className=\"text-md font-semibold mb-3\">Summary</Title>\r\n                    <Flex direction=\"col\">\r\n                        {edges.map((edge, index) => (\r\n                            <OrderItem key={index} node={edge.node} moneyWithCurrencyFormat={moneyWithCurrencyFormat} />\r\n                        ))}\r\n\r\n                        <hr className=\"my-2 text-gray-800 w-full\" />\r\n\r\n                        <Box className=\"flex justify-between w-full\">\r\n                            <Text className=\"text-sm\">SubTotal</Text>\r\n                            <Text className=\"text-sm\">{edges.length} items</Text>\r\n                            <Text className=\"text-sm\">{formattedSubtotalPrice}</Text>\r\n                        </Box>\r\n                        <Box className=\"flex justify-between w-full\">\r\n                            <Text className=\"text-sm\">Taxes</Text>\r\n                            <Text className=\"text-sm\">{formattedTotalTaxPrice}</Text>\r\n                        </Box>\r\n                        <Box className=\"flex justify-between w-full\">\r\n                            <Text className=\"text-sm\">Shipping</Text>\r\n                            <Text className=\"text-sm\">{shippingLine?.title}</Text>\r\n                            <Text className=\"text-sm\">{formattedDeliveryPrice}</Text>\r\n                        </Box>\r\n\r\n                        <hr className=\"my-2 text-gray-800 w-full\" />\r\n\r\n                        <Box className=\"flex justify-between w-full\">\r\n                            <Text className=\"text-sm font-bold\">Total</Text>\r\n                            <Text className=\"text-sm font-bold\">{formattedTotalPrice}</Text>\r\n                        </Box>\r\n                    </Flex>\r\n                </Box>\r\n            </Flex>\r\n\r\n            {/* Shipping Address Section */}\r\n            <Flex className=\"w-[30%]\">\r\n                <ShippingDetails address={address} displayName={displayName} addressId={addressId} />\r\n            </Flex>\r\n        </Flex>\r\n    );\r\n};\r\n\r\nexport default RecentOrderDetails;\r\n","import { Accordion, Badge, Box, Flex, Text } from \"rizzui\";\r\nimport { FaChevronDown, FaShopify } from \"react-icons/fa6\";\r\nimport { formatDate, formatPrice } from \"app/packages/utils/shopifyIdUtils\";\r\nimport RecentOrderDetails from \"./RecentOrderDetails\";\r\nimport { BillingAttempt } from \"app/types/subscription/subscriptionQueryTypes\";\r\n\r\ninterface RecentOrderItemProps {\r\n    billingAttempt: BillingAttempt;\r\n    moneyWithCurrencyFormat: string;\r\n}\r\n\r\nconst RecentOrderItem: React.FC<RecentOrderItemProps> = ({ billingAttempt, moneyWithCurrencyFormat }) => {\r\n    const formattedDate = formatDate(billingAttempt.createdAt, false);\r\n    const formattedTotalPrice = formatPrice(billingAttempt.order.currentTotalPriceSet.presentmentMoney.amount, moneyWithCurrencyFormat);\r\n    const { order, errorCode, errorMessage } = billingAttempt;\r\n    return (\r\n        <Accordion className=\"border-b last-of-type:border-b-0\">\r\n            <Accordion.Header>\r\n                {({ open }) => (\r\n                    <div className=\"flex gap-3 w-full cursor-pointer items-center justify-between py-2 text-xl font-semibold\">\r\n                        <FaChevronDown className={`h-3 w-3 transform transition-transform duration-300 ${open ? \"rotate-0\" : \"-rotate-90\"}`} />\r\n                        <Flex justify=\"between\" align=\"center\">\r\n                            <Box>\r\n                                <Text className=\"text-sm\">{formattedDate}</Text>\r\n                            </Box>\r\n                            <Box className=\"flex items-center gap-2\">\r\n                                <FaShopify className=\"text-primary\" />\r\n                                <Text className=\"text-sm text-primary\">{order.name}</Text>\r\n                            </Box>\r\n                            <Box>\r\n                                <Text className=\"text-sm\">{formattedTotalPrice}</Text>\r\n                            </Box>\r\n                            {\r\n                                errorCode == null ? (\r\n                                    <Box className=\"flex items-center gap-2\">\r\n                                        <Badge renderAsDot color=\"success\" />\r\n                                        <Text className=\"text-sm\">Success</Text>\r\n                                    </Box>\r\n                                ) : (\r\n                                    <Box className=\"flex items-center gap-2\">\r\n                                        <Badge renderAsDot color=\"danger\" />\r\n                                        <Text className=\"text-sm\">{errorMessage}</Text>\r\n                                    </Box>\r\n                                )\r\n                            }\r\n                        </Flex>\r\n                    </div>\r\n                )}\r\n            </Accordion.Header>\r\n            <Accordion.Body className=\"mt-3\">\r\n                <RecentOrderDetails details={order} />\r\n            </Accordion.Body>\r\n        </Accordion>\r\n    );\r\n};\r\n\r\nexport default RecentOrderItem;\r\n","import { useAtom } from \"jotai\";\r\nimport { shopObject } from \"app/states/shopAtom\";\r\nimport { BillingAttempts } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport RecentOrderItem from \"./RecentOrderItem\";\r\n\r\nconst RecentOrdersListData = ({ billingAttempts }: { billingAttempts: BillingAttempts }) => {\r\n    const { edges } = billingAttempts;\r\n    const [shop] = useAtom(shopObject);\r\n    const { currencyFormats: { moneyWithCurrencyFormat } } = shop;\r\n\r\n    return (\r\n        <div className=\"space-y-4\">\r\n            {edges.map((edge, index) => (\r\n                <RecentOrderItem key={index} billingAttempt={edge.node} moneyWithCurrencyFormat={moneyWithCurrencyFormat} />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecentOrdersListData;\r\n","import { Accordion } from \"rizzui\";\r\nimport { useAtom } from \"jotai\";\r\nimport { subscriptionContractAtom } from \"app/states/subscriptionContractAtom\";\r\nimport RecentOrdersListData from \"./RecentOrdersListData\";\r\nimport AccordionHeader from \"../UpCommingOrdersList/AccordionHeader\";\r\n\r\nconst RecentOrdersList = () => {\r\n    const [subscriptionContract] = useAtom(subscriptionContractAtom);\r\n    const { orders, billingAttempts } = subscriptionContract || {};\r\n\r\n    return (\r\n        <div className=\"my-6 flex w-full cursor-pointer flex-col gap-y-4 rounded-[10px] border border-muted lg:gap-y-6 p-3\">\r\n            <Accordion className=\"border-b last-of-type:border-b-0\" defaultOpen>\r\n                <Accordion.Header>\r\n                    {({ open }) => <AccordionHeader open={open} title=\"Billing Attempts\" />}\r\n                </Accordion.Header>\r\n                <Accordion.Body>{billingAttempts && <RecentOrdersListData billingAttempts={billingAttempts} />}</Accordion.Body>\r\n            </Accordion>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default RecentOrdersList;\r\n","import { useAtom } from \"jotai\";\r\nimport { subscriptionContractAtom } from \"app/states/subscriptionContractAtom\";\r\nimport { Box, Button, Flex, Text, Title } from \"rizzui\";\r\nimport type { Customer, PaymentMethod } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { FaCheck, FaRegCopy } from \"react-icons/fa6\";\r\nimport { useState } from \"react\";\r\nimport CopyToClipboard from \"app/shared/CopyToClipboard\";\r\nimport { Link } from \"@remix-run/react\";\r\nimport { extractNumericId, formatDate } from \"app/packages/utils/shopifyIdUtils\";\r\nimport ShippingDetails from \"../RecentOrdersList/ShippingDetails\";\r\n\r\nconst AdditionalDetails = () => {\r\n    const [subscriptionContract] = useAtom(subscriptionContractAtom);\r\n\r\n    console.log('subscriptionContract', subscriptionContract)\r\n\r\n    if (!subscriptionContract) return null;\r\n\r\n    const { displayName, addressesV2 } = subscriptionContract.customer;\r\n    const address = addressesV2?.edges?.[0]?.node;\r\n    const addressId = extractNumericId(address?.id || \"\");\r\n    const shippingAddress = subscriptionContract.deliveryMethod.address\r\n    return (\r\n        <Flex direction=\"col\">\r\n            <Flex gap=\"0\" className=\"flex w-full cursor-pointer flex-col rounded-[10px] border border-muted\">\r\n                <div className=\"px-4 mt-4\">\r\n                    <CustomerDetails customer={subscriptionContract.customer} />\r\n                </div>\r\n                <hr className=\"w-full\" />\r\n                <div className=\"px-4 mt-4\">\r\n                    <ShippingDetails address={shippingAddress} displayName={shippingAddress.name || ''} addressId={addressId} className=\"\" />\r\n                    <Button\r\n                        as=\"span\"\r\n                        className=\"text-[#2e3685] p-0 font-bold\"\r\n                        variant={\"text\" as any}\r\n                    >Edit Address</Button>\r\n                </div>\r\n                <hr className=\"w-full\" />\r\n                <div className=\"px-4 w-full mt-4\">\r\n                    <PaymentMethod customerPaymentMethod={subscriptionContract.customerPaymentMethod} />\r\n                </div>\r\n            </Flex>\r\n            <OtherDetails />\r\n        </Flex>\r\n\r\n    );\r\n};\r\n\r\n\r\nconst OtherDetails = () => {\r\n    const [subscriptionContract] = useAtom(subscriptionContractAtom);\r\n    if (!subscriptionContract) return null;\r\n    const { id, customer, lines, createdAt } = subscriptionContract;\r\n    const { productId, variantId } = lines.edges[0]?.node;\r\n    const subscriptionId = extractNumericId(id);\r\n    const customerId = extractNumericId(customer?.id || '')\r\n    const productIdNumeric = extractNumericId(productId || '');\r\n    const variantIdNumeric = extractNumericId(variantId || '');\r\n    const formatedDate = formatDate(createdAt || '', false);\r\n    return (\r\n        <Flex gap=\"3\" className=\"flex w-full cursor-pointer flex-col rounded-[10px] border border-muted p-4\">\r\n            <Box>\r\n                <Title as=\"h6\" className=\"text-md font-semibold uppercase text-[#848BD4]\">Subscription ID</Title>\r\n                <Text className=\"flex items-center gap-2 text-sm\">#{subscriptionId} <CopyToClipboard text={subscriptionId} className=\"\" /></Text>\r\n            </Box>\r\n            <Box>\r\n                <Title as=\"h6\" className=\"text-md font-semibold uppercase text-[#848BD4]\">Customer ID</Title>\r\n                <Text className=\"flex items-center gap-2 text-sm\">#{customerId} <CopyToClipboard text={customerId} className=\"\" /></Text>\r\n            </Box>\r\n            <Box>\r\n                <Title as=\"h6\" className=\"text-md font-semibold uppercase text-[#848BD4]\">Product ID</Title>\r\n                <Text className=\"flex items-center gap-2 text-sm\">#{productIdNumeric} <CopyToClipboard text={productIdNumeric} className=\"\" /></Text>\r\n            </Box>\r\n            <Box>\r\n                <Title as=\"h6\" className=\"text-md font-semibold uppercase text-[#848BD4]\">Variant ID</Title>\r\n                <Text className=\"flex items-center gap-2 text-sm\">#{variantIdNumeric} <CopyToClipboard text={variantIdNumeric} className=\"\" /></Text>\r\n            </Box>\r\n\r\n            <Box>\r\n                <Title as=\"h6\" className=\"text-md font-semibold uppercase text-[#848BD4]\">Created Date</Title>\r\n                <Text className=\"flex items-center text-sm\">{formatedDate}</Text>\r\n            </Box>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nconst PaymentMethod = ({\r\n    customerPaymentMethod\r\n}: {\r\n    customerPaymentMethod: PaymentMethod\r\n}) => {\r\n    const { instrument: { brand, lastDigits, expiryMonth, expiryYear } } = customerPaymentMethod\r\n    return (\r\n        <Flex gap=\"1\" align=\"start\" direction=\"col\">\r\n            <Title as=\"h6\" className=\"text-md font-semibold uppercase\">Payment Method</Title>\r\n            <div className=\"flex\">\r\n                <Text className=\"capitalize\">{brand}</Text>\r\n                <Text>••••{lastDigits}</Text>\r\n            </div>\r\n            <Text className=\"text-sm\">Expires {expiryMonth}/{expiryYear}</Text>\r\n            <Button\r\n                as=\"span\"\r\n                className=\"text-[#2e3685] p-0 font-bold\"\r\n                variant={\"text\" as any}\r\n            >Update Payment Method</Button>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nconst CustomerDetails = ({\r\n    customer\r\n}: {\r\n    customer: Customer\r\n}) => {\r\n    const { displayName, email } = customer\r\n    const [copied, setCopied] = useState(false);\r\n\r\n    const handleCopy = () => {\r\n        navigator.clipboard.writeText(email);\r\n        setCopied(true);\r\n        setTimeout(() => setCopied(false), 2000); // Reset after 2 seconds\r\n    };\r\n    return (\r\n        <Flex direction=\"col\" gap=\"1\">\r\n            <Title as=\"h6\" className=\"text-md font-semibold uppercase\">Customer</Title>\r\n            <Text className=\"text-primary\">{displayName}</Text>\r\n            <Text className=\"text-black\">\r\n                {email}\r\n                <CopyToClipboard text={email} className=\"mt-3\" />\r\n            </Text>\r\n            <Link to={'/'} target=\"_blank\" className=\"my-3\">View in Shopify</Link>\r\n        </Flex>\r\n    )\r\n}\r\n\r\nexport default AdditionalDetails;\r\n","\"use client\";\r\nimport { Link } from \"@remix-run/react\";\r\nimport { routes } from \"app/config/routes\";\r\nimport PageHeader from \"app/shared/page-header\";\r\nimport { SubscriptionContractSingleNode } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport SubscriptionTopBlock from \"./SubscriptionTopBlock\";\r\nimport SubscriptionDetails from \"./SubscriptionDetails\";\r\nimport UpCommingOrdersList from \"./UpCommingOrdersList\";\r\nimport RecentOrdersList from \"./RecentOrdersList\";\r\nimport AdditionalDetails from \"./AdditionalDetails\";\r\n\r\nconst pageHeader = {\r\n    breadcrumb: [\r\n        {\r\n            href: routes.subscriptions.dashboard,\r\n            name: 'Subscriptions',\r\n        },\r\n        {\r\n            name: 'Edit',\r\n        },\r\n    ],\r\n};\r\n\r\nexport default function SubscriptionEditMain() {\r\n    return (\r\n        <>\r\n            <PageHeader title={'Subscription'} breadcrumb={pageHeader.breadcrumb}>\r\n                <div className=\"mt-4 flex items-center gap-3 lg:mt-0\">\r\n                    <Link\r\n                        to={routes.products.products}\r\n                        className=\"w-full lg:w-auto\"\r\n                    >\r\n                    </Link>\r\n                </div>\r\n            </PageHeader>\r\n            <div className=\"container mx-auto\">\r\n                <div className=\"grid grid-cols-12 gap-x-6\">\r\n                    <div className=\"col-span-12 lg:col-span-8 xl:col-span-9\">\r\n                        <SubscriptionTopBlock />\r\n                        <SubscriptionDetails />\r\n                        <UpCommingOrdersList />\r\n                        <RecentOrdersList />\r\n                    </div>\r\n                    <div className=\"col-span-12 lg:col-span-4 xl:col-span-3 hidden lg:block\">\r\n                        <AdditionalDetails />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","export const CUSTOMER_PAYMENT_METHOD_SEND_UPDATE_EMAIL = `#graphql \r\nmutation sendCustomerPaymentUpdateEmail($customerPaymentMethodId: ID!) {\r\n  customerPaymentMethodSendUpdateEmail(customerPaymentMethodId: $customerPaymentMethodId) {\r\n    customer {\r\n      id\r\n    }\r\n    userErrors {\r\n      field\r\n      message\r\n    }\r\n  }\r\n}\r\n\r\n`","export const SUBSCRIPTION_BILLING_CYCLE_SCHEDULE_EDIT = `#graphql \r\nmutation subscriptionBillingCycleScheduleEdit(\r\n    $billingCycleInput: SubscriptionBillingCycleInput!, \r\n    $input: SubscriptionBillingCycleScheduleEditInput!, \r\n) {\r\n  subscriptionBillingCycleScheduleEdit(\r\n    billingCycleInput: $billingCycleInput, \r\n    input: $input\r\n) {\r\n    billingCycle {\r\n      cycleIndex\r\n      billingAttemptExpectedDate\r\n    }\r\n    userErrors {\r\n      field\r\n      message\r\n    }\r\n  }\r\n}\r\n\r\n`","export const UPDATE_SUBSCRIPTION_CONTRACT = `#graphql \r\nmutation subscriptionContractUpdate($contractId: ID!) {\r\n  subscriptionContractUpdate(contractId: $contractId) {\r\n    draft {\r\n        id\r\n    }\r\n    userErrors {\r\n      field\r\n      message\r\n    }\r\n  }\r\n}\r\n\r\n`","export const SUBSCRIPTION_DRAFT_COMMIT = `#graphql \r\nmutation subscriptionDraftCommit($draftId: ID!) {\r\n  subscriptionDraftCommit(draftId: $draftId) {\r\n    contract {\r\n      id\r\n    }\r\n    userErrors {\r\n      field\r\n      message\r\n    }\r\n  }\r\n}\r\n`","export const SUBSCRIPTION_DRAFT_DISCOUNT_CODE_APPLY = `#graphql \r\nmutation subscriptionDraftDiscountCodeApply($draftId: ID!, $discountCode: String!) {\r\n  subscriptionDraftDiscountCodeApply(draftId: $draftId, redeemCode: $discountCode) {\r\n    appliedDiscount {\r\n        id\r\n        rejectionReason\r\n    }\r\n    draft {\r\n     id\r\n    }\r\n    userErrors {\r\n      field\r\n      message\r\n    }\r\n  }\r\n}\r\n`","export const SUBSCRIPTION_DRAFT_DISCOUNT_CODE_REMOVE = `#graphql \r\nmutation subscriptionDraftDiscountRemove($discountId: ID!, $draftId: ID!) {\r\n  subscriptionDraftDiscountRemove(discountId: $discountId, draftId: $draftId) {\r\n    discountRemoved {\r\n        ... on SubscriptionManualDiscount {\r\n            id\r\n        }\r\n        ... on SubscriptionAppliedCodeDiscount {\r\n            id\r\n        }\r\n    }\r\n    draft {\r\n      id\r\n    }\r\n    userErrors {\r\n      field\r\n      message\r\n    }\r\n  }\r\n}\r\n`","export const SUBSCRIPTION_DRAFT_LINE_UPDATE = `#graphql \r\nmutation subscriptionDraftLineUpdate($draftId: ID!, $input: SubscriptionLineUpdateInput!, $lineId: ID!) {\r\n  subscriptionDraftLineUpdate(draftId: $draftId, input: $input, lineId: $lineId) {\r\n    draft {\r\n      id\r\n    }\r\n    lineUpdated {\r\n        id\r\n    }\r\n    userErrors {\r\n      field\r\n      message\r\n    }\r\n  }\r\n}\r\n`","export const SUBSCRIPTION_DRAFT_UPDATE = `#graphql \r\nmutation subscriptionDraftUpdate($draftId: ID!, $input: SubscriptionDraftInput!) {\r\n  subscriptionDraftUpdate(draftId: $draftId, input: $input) {\r\n    draft {\r\n      id\r\n    }\r\n    userErrors {\r\n      field\r\n      message\r\n    }\r\n  }\r\n}\r\n\r\n`","export const FEATURED_MEDIA_FRAGMENT = `#graphql\r\n  fragment featuredMedia on Media {\r\n    alt\r\n    id\r\n    preview{\r\n        image{\r\n            altText\r\n            url(transform: {maxHeight: 100, maxWidth: 100})\r\n        }\r\n    }\r\n  }\r\n`;\r\n","\r\nexport const SELLING_PLANS_FRAGMENT = `#graphql\r\n  fragment SellingPlans on SellingPlan {\r\n    description\r\n    id\r\n    name\r\n    options\r\n    position\r\n    category\r\n    createdAt\r\n    metafields(namespace: \"billion-grid-app\", first: 10) \r\n    {\r\n      nodes{\r\n        value\r\n        key\r\n      }\r\n    }                    \r\n    inventoryPolicy {\r\n      reserve\r\n    }\r\n    pricingPolicies {\r\n      ... on SellingPlanFixedPricingPolicy {\r\n        __typename\r\n        adjustmentType\r\n        adjustmentValue {\r\n          ... on MoneyV2 {\r\n            __typename\r\n            amount\r\n            currencyCode\r\n          }\r\n          ... on SellingPlanPricingPolicyPercentageValue {\r\n            __typename\r\n            percentage\r\n          }\r\n        }\r\n      }\r\n    }\r\n    billingPolicy {\r\n      ... on SellingPlanFixedBillingPolicy {\r\n        remainingBalanceChargeExactTime\r\n        remainingBalanceChargeTimeAfterCheckout\r\n        checkoutCharge {\r\n          type\r\n          value {\r\n            ... on MoneyV2 {\r\n              __typename\r\n              amount\r\n              currencyCode\r\n            }\r\n            ... on SellingPlanCheckoutChargePercentageValue {\r\n              __typename\r\n              percentage\r\n            }\r\n          }\r\n        }\r\n        remainingBalanceChargeTrigger\r\n      }\r\n      ... on SellingPlanRecurringBillingPolicy {\r\n        maxCycles\r\n        minCycles\r\n        anchors {\r\n          cutoffDay\r\n          day\r\n          month\r\n          type\r\n        }\r\n        createdAt\r\n        interval\r\n        intervalCount\r\n      }\r\n    }\r\n    deliveryPolicy {\r\n      ... on SellingPlanFixedDeliveryPolicy {\r\n        cutoff\r\n        fulfillmentExactTime\r\n        anchors {\r\n          cutoffDay\r\n          day\r\n          month\r\n          type\r\n        }\r\n        fulfillmentTrigger\r\n        intent\r\n        preAnchorBehavior\r\n      }\r\n      ... on SellingPlanRecurringDeliveryPolicy {\r\n        cutoff\r\n        intent\r\n        createdAt\r\n        anchors {\r\n          cutoffDay\r\n          month\r\n          day\r\n          type\r\n        }\r\n        interval\r\n        intervalCount\r\n        preAnchorBehavior\r\n      }\r\n    }\r\n  }\r\n`;","import { SELLING_PLANS_FRAGMENT } from \"./sellingPlans\";\r\n\r\nexport const SELLING_PLAN_GROUP_FRAGMENT = `#graphql\r\n  ${SELLING_PLANS_FRAGMENT}\r\n  fragment sellingPlanGroup on SellingPlanGroup {\r\n    appId\r\n    createdAt\r\n    id\r\n    merchantCode\r\n    name\r\n    options\r\n    position\r\n    sellingPlans(first: 10) {\r\n      edges{\r\n          cursor\r\n          node{\r\n              ...SellingPlans\r\n          }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export const SEELING_PLAN_GROUPS_COUNT = `#graphql\r\n  fragment sellingPlanGroupsCount on Count {\r\n    count\r\n    precision\r\n  }\r\n`;\r\n","import { FEATURED_MEDIA_FRAGMENT } from \"../featuredmedia\";\r\nimport { SELLING_PLAN_GROUP_FRAGMENT } from \"./sellingPlanGroup\";\r\nimport { SEELING_PLAN_GROUPS_COUNT } from \"./sellingPlanGroupsCount\";\r\n\r\nexport const PRODUCT_LISTING_SINGLE_NODE_FRAGMENT = `#graphql\r\n  ${SEELING_PLAN_GROUPS_COUNT}\r\n  ${FEATURED_MEDIA_FRAGMENT}\r\n  ${SELLING_PLAN_GROUP_FRAGMENT}\r\n  fragment ProductNode on Product {\r\n    id\r\n    title\r\n    descriptionHtml\r\n    createdAt\r\n    handle\r\n    requiresSellingPlan\r\n    status\r\n    priceRangeV2{\r\n      maxVariantPrice{\r\n        amount\r\n        currencyCode\r\n      }\r\n      minVariantPrice{\r\n        amount\r\n        currencyCode\r\n      }\r\n    }\r\n    sellingPlanGroupsCount {\r\n        ...sellingPlanGroupsCount\r\n    }\r\n    sellingPlanGroups(first: 3) {\r\n      edges {\r\n            cursor\r\n            node {\r\n              ...sellingPlanGroup\r\n            }\r\n      }\r\n    }\r\n    featuredMedia{\r\n      ...featuredMedia\r\n    }\r\n    variantsCount{\r\n      count\r\n      precision\r\n    }\r\n    onlineStorePreviewUrl\r\n    variants(first: 10){\r\n      nodes{\r\n       id\r\n       sku\r\n       title\r\n       price\r\n      }\r\n    }\r\n  }\r\n`;\r\n","export const PAGE_INFO_FRAGMENT = `#graphql\r\n  fragment PageInfo on PageInfo {\r\n    hasPreviousPage\r\n    hasNextPage\r\n    endCursor\r\n    startCursor\r\n  }\r\n`;\r\n","import { PRODUCT_LISTING_SINGLE_NODE_FRAGMENT } from \"app/graphql/fragments/product/productSingleListingNode\";\r\nimport { PAGE_INFO_FRAGMENT } from \"../../fragments/pageInfo\";\r\n\r\nexport const PRODUCTS_QUERY = `#graphql\r\n ${PAGE_INFO_FRAGMENT}\r\n ${PRODUCT_LISTING_SINGLE_NODE_FRAGMENT}\r\nquery products(\r\n    $first: Int\r\n    $after: String\r\n    $before: String\r\n    $last: Int\r\n    $query: String\r\n    $reverse: Boolean\r\n    $savedSearchId: ID\r\n    $sortKey: ProductSortKeys\r\n) {\r\n    products(\r\n        first: $first\r\n        after: $after\r\n        before: $before\r\n        last: $last\r\n        query: $query\r\n        reverse: $reverse\r\n        savedSearchId: $savedSearchId\r\n        sortKey: $sortKey\r\n    ) {\r\n        edges {\r\n            cursor\r\n            node {\r\n               ...ProductNode\r\n            }\r\n        }\r\n        pageInfo {\r\n          ...PageInfo\r\n        }\r\n    }\r\n}`;\r\n","export const PRODUCT_VARIANTNODE_FRAGMENT = `#graphql\r\n    fragment ProductVariantNode on ProductVariant {\r\n        id\r\n        title\r\n        createdAt\r\n        availableForSale\r\n        sku\r\n        price\r\n        sellingPlanGroupsCount{\r\n            count\r\n            precision\r\n        }\r\n        image{\r\n            id\r\n            url(transform: {maxHeight: 100, maxWidth: 100})\r\n        }\r\n        sellingPlanGroups(first: 3) {\r\n            edges{\r\n                cursor\r\n                node{\r\n                    appId\r\n                    id\r\n                    name\r\n                    options\r\n                    position\r\n                    sellingPlans(first: 20){\r\n                        edges{\r\n                            cursor\r\n                            node{\r\n                                id\r\n                                name\r\n                                options\r\n                                position\r\n                                metafields(first: 2, namespace: \"billion-grid-app\"){\r\n                                    nodes{\r\n                                        value\r\n                                        key\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;","import { FEATURED_MEDIA_FRAGMENT } from \"../featuredmedia\";\r\nimport { PRODUCT_VARIANTNODE_FRAGMENT } from \"./variantNode\";\r\nimport { SELLING_PLAN_GROUP_FRAGMENT } from \"./sellingPlanGroup\";\r\nimport { SEELING_PLAN_GROUPS_COUNT } from \"./sellingPlanGroupsCount\";\r\n\r\nexport const PRODUCT_SINGLE_NODE_FRAGMENT = `#graphql\r\n  ${SEELING_PLAN_GROUPS_COUNT}\r\n  ${FEATURED_MEDIA_FRAGMENT}\r\n  ${SELLING_PLAN_GROUP_FRAGMENT}\r\n  ${PRODUCT_VARIANTNODE_FRAGMENT}\r\n  fragment ProductNode on Product {\r\n    id\r\n    title\r\n    descriptionHtml\r\n    createdAt\r\n    updatedAt\r\n    handle\r\n    requiresSellingPlan\r\n    status\r\n    sellingPlanGroupsCount {\r\n        ...sellingPlanGroupsCount\r\n    }\r\n    sellingPlanGroups(first: 20) {\r\n      edges {\r\n            cursor\r\n            node {\r\n              ...sellingPlanGroup\r\n            }\r\n      }\r\n    }\r\n    featuredMedia{\r\n      ...featuredMedia\r\n    }\r\n    variantsCount{\r\n      count\r\n      precision\r\n    }\r\n    onlineStorePreviewUrl\r\n    variants(first: 100){\r\n      nodes{\r\n        ...ProductVariantNode\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import { PRODUCT_SINGLE_NODE_FRAGMENT } from \"../../fragments/product/productSingleNode\";\r\n\r\nexport const PRODUCT_SINGLE_QUERY = `#graphql\r\n ${PRODUCT_SINGLE_NODE_FRAGMENT}\r\nquery product(\r\n    $id: ID!\r\n) {\r\n    product(\r\n        id: $id\r\n    ) {\r\n        ...ProductNode\r\n    }\r\n}`;\r\n","import { ActionFunctionArgs, json } from \"@remix-run/node\";\r\nimport { CUSTOMER_PAYMENT_METHOD_SEND_UPDATE_EMAIL } from \"app/graphql/mutations/subscriptionContracts/customerPaymentMethodSendUpdateEmail\";\r\nimport { SUBSCRIPTION_BILLING_CYCLE_SCHEDULE_EDIT } from \"app/graphql/mutations/subscriptionContracts/subscriptionBillingCycleScheduleEdit\";\r\nimport { UPDATE_SUBSCRIPTION_CONTRACT } from \"app/graphql/mutations/subscriptionContracts/subscriptionContractUpdate\";\r\nimport { SUBSCRIPTION_DRAFT_COMMIT } from \"app/graphql/mutations/subscriptionContracts/subscriptionDraftCommit\";\r\nimport { SUBSCRIPTION_DRAFT_DISCOUNT_CODE_APPLY } from \"app/graphql/mutations/subscriptionContracts/subscriptionDraftDiscountCodeApply\";\r\nimport { SUBSCRIPTION_DRAFT_DISCOUNT_CODE_REMOVE } from \"app/graphql/mutations/subscriptionContracts/subscriptionDraftDiscountRemove\";\r\nimport { SUBSCRIPTION_DRAFT_LINE_UPDATE } from \"app/graphql/mutations/subscriptionContracts/subscriptionDraftLineUpdate\";\r\nimport { SUBSCRIPTION_DRAFT_UPDATE } from \"app/graphql/mutations/subscriptionContracts/subscriptionDraftUpdate\";\r\nimport { PRODUCTS_QUERY } from \"app/graphql/queries/products/queryProducts\";\r\nimport { PRODUCT_SINGLE_QUERY } from \"app/graphql/queries/products/querySingleProduct\";\r\nimport { generateGraphQLId, ShopifyObjectType } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { ERROR_MESSAGES } from \"app/routes/merchant.products_.$productId_.plans\";\r\nimport createPlanAPIUtils from \"app/shared/products/create-plans/createPlanAPIUtils\";\r\nimport { BillingPolicy } from \"app/types/product/ProductNode\";\r\nimport { Address, CustomAttributes, SubscriptionBillingCycleScheduleEditInputScheduleEditReason, SubscriptionLineItem } from \"app/types/subscription/subscriptionQueryTypes\";\r\nimport { AdminApiContextWithoutRest } from \"node_modules/@shopify/shopify-app-remix/dist/ts/server/clients\";\r\n\r\nconst handleUpdateAddress = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const subscriptionId = params.subscriptionId;\r\n    if (!subscriptionId) {\r\n        return json({ success: false, error: 'Subscription ID missing' });\r\n    }\r\n\r\n    const addressString = formData.get('address');\r\n    if (!addressString) {\r\n        return json({ success: false, error: 'Address data missing' });\r\n    }\r\n\r\n    const address: Address = JSON.parse(addressString as string);\r\n\r\n    const result = await performSubscriptionDraftUpdate(subscriptionId, admin, async (subscriptionDraftId) => {\r\n        await executeMutationWithErrors(\r\n            SUBSCRIPTION_DRAFT_UPDATE,\r\n            admin,\r\n            generateUpdateAddressVariables(subscriptionDraftId, address),\r\n            'subscriptionDraftUpdate'\r\n        );\r\n    });\r\n\r\n    return json(result);\r\n};\r\n\r\nasync function performSubscriptionDraftUpdate(\r\n    subscriptionId: string,\r\n    admin: AdminApiContextWithoutRest,\r\n    updateCallback: (subscriptionDraftId: string) => Promise<void>\r\n) {\r\n    try {\r\n        // Step 1: Get GraphQL ID\r\n        const contractGraphqlId = generateGraphQLId(\r\n            parseInt(subscriptionId),\r\n            ShopifyObjectType.SubscriptionContract\r\n        );\r\n\r\n        // Step 2: Create Draft\r\n        const draftResult = await executeMutationWithErrors(\r\n            UPDATE_SUBSCRIPTION_CONTRACT,\r\n            admin,\r\n            generateUpdateContractVarible(contractGraphqlId),\r\n            'subscriptionContractUpdate'\r\n        );\r\n\r\n        const subscriptionDraftId = draftResult.draft.id;\r\n\r\n        // Step 3: Custom update (e.g., address, attribute, etc.)\r\n        await updateCallback(subscriptionDraftId);\r\n\r\n        // Step 4: Commit Draft\r\n        await executeMutationWithErrors(\r\n            SUBSCRIPTION_DRAFT_COMMIT,\r\n            admin,\r\n            generateSubscriptionDraftCommitVariables(subscriptionDraftId),\r\n            'subscriptionDraftCommit'\r\n        );\r\n\r\n        return { success: true };\r\n    } catch (error: any) {\r\n        console.error('performSubscriptionDraftUpdate error:', error);\r\n        return { success: false, error: error.message || ERROR_MESSAGES.INTERNAL_SERVER_ERROR };\r\n    }\r\n}\r\n\r\nfunction serverError(message: string) {\r\n    return json({ success: false, error: message || ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 200 });\r\n}\r\n\r\n\r\nasync function executeMutationWithErrors(\r\n    mutation: any,\r\n    admin: AdminApiContextWithoutRest,\r\n    variables: any,\r\n    dataKey: string,\r\n    returnData: boolean = false\r\n): Promise<any> {\r\n    const result = await createPlanAPIUtils.executeShopifyMutation(mutation, admin, variables);\r\n    // console.log(`${dataKey} result:`, JSON.stringify(result.data));\r\n    const userErrors = result?.data?.[dataKey]?.userErrors || [];\r\n    if (userErrors.length > 0) {\r\n        const errorMessage = userErrors\r\n            .map((err: any) => {\r\n                if (err.field?.length) {\r\n                    return `${err.message}`;\r\n                }\r\n                return err.message;\r\n            })\r\n            .join('\\n');\r\n\r\n        throw new Error(`Failed: ${errorMessage}`);\r\n    }\r\n\r\n    if (returnData) {\r\n        return result.data\r\n    } else return result.data?.[dataKey];\r\n\r\n}\r\n\r\n\r\n\r\nconst generateSubscriptionDraftCommitVariables = (draftId: string) => {\r\n    return {\r\n        variables: {\r\n            draftId\r\n        }\r\n    }\r\n}\r\n\r\nconst generateUpdateAddressVariables = (draftId: string, address: Address) => {\r\n    const { id, name, ...rest } = address;\r\n    return {\r\n        variables: {\r\n            draftId,\r\n            input: {\r\n                deliveryMethod: {\r\n                    shipping: {\r\n                        address: {\r\n                            ...rest,\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// const handle Generate Subscription contract update\r\nconst generateUpdateContractVarible = (contractId: string) => {\r\n    return {\r\n        variables: {\r\n            contractId\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst handleUpdateAttributes = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const subscriptionId = params.subscriptionId;\r\n    if (!subscriptionId) {\r\n        return json({ success: false, error: 'Subscription ID missing' });\r\n    }\r\n\r\n    const attributesString = formData.get('attributes');\r\n    if (!attributesString) {\r\n        return json({ success: false, error: 'Attributes data missing' });\r\n    }\r\n\r\n    const customAttributes = JSON.parse(attributesString as string);\r\n\r\n    const result = await performSubscriptionDraftUpdate(subscriptionId, admin, async (subscriptionDraftId) => {\r\n        await executeMutationWithErrors(\r\n            SUBSCRIPTION_DRAFT_UPDATE,\r\n            admin,\r\n            generateUpdateAttributesVariables(subscriptionDraftId, customAttributes),\r\n            'subscriptionDraftUpdate'\r\n        );\r\n    });\r\n\r\n    return json(result);\r\n};\r\n\r\nconst handleUpdateOrderNote = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const subscriptionId = params.subscriptionId;\r\n    if (!subscriptionId) {\r\n        return json({ success: false, error: 'Subscription ID missing' });\r\n    }\r\n\r\n    const note = formData.get('orderNote');\r\n    if (!note) {\r\n        return json({ success: false, error: 'note data missing' });\r\n    }\r\n    const result = await performSubscriptionDraftUpdate(subscriptionId, admin, async (subscriptionDraftId) => {\r\n        await executeMutationWithErrors(\r\n            SUBSCRIPTION_DRAFT_UPDATE,\r\n            admin,\r\n            generateUpdateOrderNoteVariables(subscriptionDraftId, note as string),\r\n            'subscriptionDraftUpdate'\r\n        );\r\n    });\r\n\r\n    return json(result);\r\n};\r\n\r\nconst handleUpdateDiscount = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const subscriptionId = params.subscriptionId;\r\n    if (!subscriptionId) {\r\n        return json({ success: false, error: 'Subscription ID missing' });\r\n    }\r\n\r\n    const discountCode = formData.get('discountCode');\r\n    if (!discountCode) {\r\n        return json({ success: false, error: 'Discount code data missing' });\r\n    }\r\n    const result = await performSubscriptionDraftUpdate(subscriptionId, admin, async (subscriptionDraftId) => {\r\n        await executeMutationWithErrors(\r\n            SUBSCRIPTION_DRAFT_DISCOUNT_CODE_APPLY,\r\n            admin,\r\n            generateUpdateDiscountVariables(subscriptionDraftId, discountCode as string),\r\n            'subscriptionDraftUpdate'\r\n        );\r\n    });\r\n\r\n    console.log(result);\r\n\r\n    return json(result);\r\n};\r\n\r\nconst handleRemoveDiscount = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const subscriptionId = params.subscriptionId;\r\n    if (!subscriptionId) {\r\n        return json({ success: false, error: 'Subscription ID missing' });\r\n    }\r\n\r\n    const discountId = formData.get('discountId');\r\n    if (!discountId) {\r\n        return json({ success: false, error: 'Discount Id data missing' });\r\n    }\r\n    const result = await performSubscriptionDraftUpdate(subscriptionId, admin, async (subscriptionDraftId) => {\r\n        await executeMutationWithErrors(\r\n            SUBSCRIPTION_DRAFT_DISCOUNT_CODE_REMOVE,\r\n            admin,\r\n            generateRemoveDiscountVariables(subscriptionDraftId, discountId as string),\r\n            'subscriptionDraftUpdate'\r\n        );\r\n    });\r\n\r\n    console.log(result);\r\n\r\n    return json(result);\r\n};\r\n\r\nconst generateRemoveDiscountVariables = (draftId: string, discountId: string) => {\r\n    const variables = {\r\n        variables: {\r\n            discountId,\r\n            draftId\r\n        }\r\n    }\r\n\r\n    console.log('variables', variables);\r\n    return variables\r\n}\r\n\r\nconst generateUpdateDiscountVariables = (draftId: string, discountCode: string) => {\r\n    return {\r\n        variables: {\r\n            draftId,\r\n            discountCode\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\nconst handleUpdatePaymentMethod = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const subscriptionId = params.subscriptionId;\r\n    if (!subscriptionId) {\r\n        return json({ success: false, error: 'Subscription ID missing' });\r\n    }\r\n\r\n    const paymentMethodId = formData.get('paymentMethodId');\r\n    if (!paymentMethodId) {\r\n        return json({ success: false, error: 'note data missing' });\r\n    }\r\n    const result = await performSubscriptionDraftUpdate(subscriptionId, admin, async (subscriptionDraftId) => {\r\n        await executeMutationWithErrors(\r\n            SUBSCRIPTION_DRAFT_UPDATE,\r\n            admin,\r\n            generateUpdatePaymentMethodVariables(subscriptionDraftId, paymentMethodId as string),\r\n            'subscriptionDraftUpdate'\r\n        );\r\n    });\r\n\r\n    return json(result);\r\n};\r\n\r\nconst generateUpdatePaymentMethodVariables = (draftId: string, paymentMethodId: string) => {\r\n    return {\r\n        variables: {\r\n            draftId,\r\n            input: {\r\n                paymentMethodId\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst generateUpdateOrderNoteVariables = (draftId: string, note: string) => {\r\n    return {\r\n        variables: {\r\n            draftId,\r\n            input: {\r\n                note\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nconst generateUpdateAttributesVariables = (draftId: string, customAttributes: CustomAttributes) => {\r\n    return {\r\n        variables: {\r\n            draftId,\r\n            input: {\r\n                customAttributes\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst handleRescheduleNextOrderDate = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const subscriptionId = params.subscriptionId;\r\n    if (!subscriptionId) {\r\n        return json({ success: false, error: 'Subscription ID missing' });\r\n    }\r\n\r\n    const nextBillingDate = formData.get('nextBillingDate');\r\n    if (!nextBillingDate) {\r\n        return json({ success: false, error: 'nextBillingDate data missing' });\r\n    }\r\n    const result = await performSubscriptionDraftUpdate(subscriptionId, admin, async (subscriptionDraftId) => {\r\n        await executeMutationWithErrors(\r\n            SUBSCRIPTION_DRAFT_UPDATE,\r\n            admin,\r\n            generateUpdateNextBillingDateVariables(subscriptionDraftId, nextBillingDate as string),\r\n            'subscriptionDraftUpdate'\r\n        );\r\n    });\r\n\r\n    return json(result);\r\n};\r\n\r\n\r\nconst handleUpdateOrderFrequency = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const subscriptionId = params.subscriptionId;\r\n    if (!subscriptionId) {\r\n        return json({ success: false, error: 'Subscription ID missing' });\r\n    }\r\n\r\n    const intervalCount = formData.get('intervalCount');\r\n    const interval = formData.get('interval');\r\n    if (!intervalCount || !interval) {\r\n        return json({ success: false, error: 'Some data missing' });\r\n    }\r\n\r\n    const billingPolicy: BillingPolicy = {\r\n        intervalCount: Number(intervalCount),\r\n        interval: interval as BillingPolicy['interval']\r\n    };\r\n    const result = await performSubscriptionDraftUpdate(subscriptionId, admin, async (subscriptionDraftId) => {\r\n        await executeMutationWithErrors(\r\n            SUBSCRIPTION_DRAFT_UPDATE,\r\n            admin,\r\n            generateUpdateNextOrderFrequencyVariables(subscriptionDraftId, billingPolicy),\r\n            'subscriptionDraftUpdate'\r\n        );\r\n    });\r\n\r\n    return json(result);\r\n};\r\n\r\nconst handleUpdateStatus = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const subscriptionId = params.subscriptionId;\r\n    if (!subscriptionId) {\r\n        return json({ success: false, error: 'Subscription ID missing' });\r\n    }\r\n\r\n    const status = formData.get('status');\r\n    const note = formData.get('reason');\r\n    if (!status && !note) {\r\n        return json({ success: false, error: 'Status data missing' });\r\n    }\r\n\r\n    const result = await performSubscriptionDraftUpdate(subscriptionId, admin, async (subscriptionDraftId) => {\r\n        await executeMutationWithErrors(\r\n            SUBSCRIPTION_DRAFT_UPDATE,\r\n            admin,\r\n            generateUpdateStatusVariables(subscriptionDraftId, status as string, note as string),\r\n            'subscriptionDraftUpdate'\r\n        );\r\n    });\r\n\r\n    return json(result);\r\n};\r\n\r\nconst handleUpdateItemAttribute = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const subscriptionId = params.subscriptionId;\r\n    if (!subscriptionId) {\r\n        return json({ success: false, error: 'Subscription ID missing' });\r\n    }\r\n\r\n    const lineId = formData.get('lineId');\r\n    const attributesString = formData.get('attributes');\r\n    if (!lineId && !attributesString) {\r\n        return json({ success: false, error: 'Line Id or Attributes data missing' });\r\n    }\r\n    const customAttributes = JSON.parse(attributesString as string);\r\n    const result = await performSubscriptionDraftUpdate(subscriptionId, admin, async (subscriptionDraftId) => {\r\n        await executeMutationWithErrors(\r\n            SUBSCRIPTION_DRAFT_LINE_UPDATE,\r\n            admin,\r\n            generateUpdateItemAttributeVariables(subscriptionDraftId, lineId as string, customAttributes),\r\n            'subscriptionDraftUpdate'\r\n        );\r\n    });\r\n\r\n    return json(result);\r\n};\r\n\r\n\r\nconst generateUpdateItemAttributeVariables = (\r\n    draftId: string,\r\n    lineId: string,\r\n    customAttributes: CustomAttributes\r\n) => {\r\n    const variables = {\r\n        variables: {\r\n            draftId,\r\n            lineId,\r\n            input: {\r\n                customAttributes\r\n            }\r\n        }\r\n    }\r\n    console.log('generateUpdateItemAttributeVariables', JSON.stringify(variables));\r\n    return variables\r\n}\r\n\r\nconst generateUpdateStatusVariables = (draftId: string, status: string, note: string) => {\r\n    return {\r\n        variables: {\r\n            draftId,\r\n            input: {\r\n                status,\r\n                note\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst generateUpdateNextOrderFrequencyVariables = (draftId: string, billingPolicy: BillingPolicy) => {\r\n    const deliveryPolicy = billingPolicy\r\n    const variables = {\r\n        variables: {\r\n            draftId,\r\n            input: {\r\n                billingPolicy,\r\n                deliveryPolicy\r\n            }\r\n        }\r\n    }\r\n    console.log('variables', JSON.stringify(variables));\r\n    return variables\r\n}\r\n\r\nconst generateUpdateNextBillingDateVariables = (draftId: string, nextBillingDate: string) => {\r\n    return {\r\n        variables: {\r\n            draftId,\r\n            input: {\r\n                nextBillingDate\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst handleUpdatePaymentMethodEmailSend = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n) => {\r\n    const customerPaymentMethodId = formData.get('paymentMethodId');\r\n\r\n    if (!customerPaymentMethodId) {\r\n        return json({ success: false, error: 'Payment method ID missing' });\r\n    }\r\n\r\n    const sendEmailMutation = CUSTOMER_PAYMENT_METHOD_SEND_UPDATE_EMAIL;\r\n    const variables = generateUpdatePaymentMethodEmailSendVariables(customerPaymentMethodId as string);\r\n\r\n    const result = await executeMutationWithErrors(sendEmailMutation, admin, variables, '');\r\n\r\n    if (result?.data?.customerPaymentMethodSendUpdateEmail?.userErrors?.length > 0) {\r\n        return json({ success: false, error: 'Failed to update payment method' });\r\n    }\r\n\r\n    return json({ success: true });\r\n\r\n}\r\n\r\nconst generateUpdatePaymentMethodEmailSendVariables = (customerPaymentMethodId: string) => {\r\n    return {\r\n        variables: {\r\n            customerPaymentMethodId\r\n        }\r\n    }\r\n}\r\n\r\nconst handleGetProductData = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n) => {\r\n    const productId = formData.get('productId');\r\n    if (!productId) {\r\n        return json({ success: false, error: 'Product ID missing' });\r\n    }\r\n    const gerProductQuery = PRODUCT_SINGLE_QUERY;\r\n    const variables = generateGetProductVariables(productId as string);\r\n    const result = await executeMutationWithErrors(gerProductQuery, admin, variables, 'product', true);\r\n    console.log('result here', result);\r\n    return json({ success: true, product: result?.product });\r\n}\r\n\r\nconst generateGetProductVariables = (id: string) => {\r\n    return {\r\n        variables: {\r\n            id\r\n        }\r\n    }\r\n}\r\n\r\nconst handleSubscriptionLineUpdate = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const subscriptionId = params.subscriptionId;\r\n    if (!subscriptionId) {\r\n        return json({ success: false, error: 'Subscription ID missing' });\r\n    }\r\n\r\n    const updatedLineString = formData.get('updatedLine');\r\n    if (!updatedLineString) {\r\n        return json({ success: false, error: 'Line Id or Attributes data missing' });\r\n    }\r\n    const updatedLine = JSON.parse(updatedLineString as string);\r\n    const result = await performSubscriptionDraftUpdate(subscriptionId, admin, async (subscriptionDraftId) => {\r\n        await executeMutationWithErrors(\r\n            SUBSCRIPTION_DRAFT_LINE_UPDATE,\r\n            admin,\r\n            generateUpdateSubscritptionLine(subscriptionDraftId, updatedLine),\r\n            'subscriptionDraftUpdate'\r\n        );\r\n    });\r\n    return json(result);\r\n}\r\n\r\nconst handleSubscriptionLineProductUpdate = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const subscriptionId = params.subscriptionId;\r\n    if (!subscriptionId) {\r\n        return json({ success: false, error: 'Subscription ID missing' });\r\n    }\r\n\r\n    const updatedLineString = formData.get('updatedLine');\r\n    if (!updatedLineString) {\r\n        return json({ success: false, error: 'Line Id or Attributes data missing' });\r\n    }\r\n    const updatedLine = JSON.parse(updatedLineString as string);\r\n    const result = await performSubscriptionDraftUpdate(subscriptionId, admin, async (subscriptionDraftId) => {\r\n        await executeMutationWithErrors(\r\n            SUBSCRIPTION_DRAFT_LINE_UPDATE,\r\n            admin,\r\n            generateUpdateSubscritptionLineProuct(subscriptionDraftId, updatedLine),\r\n            'subscriptionDraftUpdate'\r\n        );\r\n    });\r\n    return json(result);\r\n}\r\n\r\nconst generateUpdateSubscritptionLineProuct = (\r\n    draftId: string,\r\n    updatedLine: SubscriptionLineItem\r\n) => {\r\n    const { id, quantity, variantId } = updatedLine\r\n    const variables = {\r\n        variables: {\r\n            draftId,\r\n            lineId: id,\r\n            input: {\r\n                quantity: quantity,\r\n                productVariantId: variantId,\r\n            }\r\n        }\r\n    }\r\n\r\n    return variables\r\n}\r\n\r\nconst generateUpdateSubscritptionLine = (\r\n    draftId: string,\r\n    updatedLine: SubscriptionLineItem\r\n) => {\r\n    const { id, quantity, variantId, lineDiscountedPrice: { amount } } = updatedLine\r\n    const variables = {\r\n        variables: {\r\n            draftId,\r\n            lineId: id,\r\n            input: {\r\n                currentPrice: amount,\r\n                quantity: quantity,\r\n                productVariantId: variantId,\r\n            }\r\n        }\r\n    }\r\n\r\n    return variables\r\n}\r\n\r\nconst handleGetProducts = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const cursor = formData.get(\"cursor\")?.toString() || \"\";\r\n    const query = formData.get(\"query\")?.toString() || null;\r\n\r\n    const gerProductQuery = PRODUCTS_QUERY;\r\n    const variables = generateFetchProductVariables(query, cursor);\r\n\r\n    const result = await executeMutationWithErrors(gerProductQuery, admin, variables, 'product', true);\r\n\r\n    return json({ success: true, products: result?.products });\r\n};\r\n\r\nconst generateFetchProductVariables = (query: string | null = 'status:ACTIVE', cursor = '') => {\r\n    const variables = {\r\n        first: 10,\r\n        ...(typeof query === 'string' && { query }),\r\n        ...(cursor && { after: cursor }),\r\n    };\r\n\r\n    return { variables };\r\n};\r\n\r\n\r\nconst handleRescheduleBillingCycleDate = async (\r\n    admin: AdminApiContextWithoutRest,\r\n    formData: FormData,\r\n    params: ActionFunctionArgs['params']\r\n) => {\r\n    const subscriptionId = params.subscriptionId;\r\n    if (!subscriptionId) {\r\n        return json({ success: false, error: 'Subscription ID missing' });\r\n    }\r\n\r\n    const index = formData.get('index');\r\n    const date = formData.get('date');\r\n    if (!date || !index) {\r\n        return json({ success: false, error: 'Date or Index missing' });\r\n    }\r\n    const variables = generateBillingCycleEditVariables(\r\n        subscriptionId,\r\n        index as string,\r\n        date as string\r\n    );\r\n    const result = await executeMutationWithErrors(SUBSCRIPTION_BILLING_CYCLE_SCHEDULE_EDIT, admin, variables, 'product', true);\r\n    console.log(\"result handleRescheduleBillingCycleDate1\", JSON.stringify(result));\r\n    if (result?.subscriptionBillingCycleScheduleEdit?.userErrors?.length > 0) {\r\n        const errorMessages = result.subscriptionBillingCycleScheduleEdit.userErrors\r\n            .map((err: any) => err.message)\r\n            .join(' | ');\r\n\r\n        return json({ success: false, error: errorMessages });\r\n    }\r\n    return json({ success: true });\r\n};\r\n\r\nconst generateBillingCycleEditVariables = (\r\n    contractId: string,\r\n    index: string,\r\n    date: string,\r\n    reason: SubscriptionBillingCycleScheduleEditInputScheduleEditReason\r\n        = SubscriptionBillingCycleScheduleEditInputScheduleEditReason.MERCHANT_INITIATED,\r\n) => {\r\n    const contractGraphqlId = generateGraphQLId(\r\n        parseInt(contractId),\r\n        ShopifyObjectType.SubscriptionContract\r\n    );\r\n    const variables = {\r\n        variables: {\r\n            billingCycleInput: {\r\n                contractId: contractGraphqlId,\r\n                selector: {\r\n                    index: parseInt(index)\r\n                }\r\n            },\r\n            input: {\r\n                billingDate: \"2025-04-15T00:00:00Z\",\r\n                reason,\r\n                skip:false\r\n            }\r\n        }\r\n    }\r\n    console.log('generateBillingCycleEditVariables', JSON.stringify(variables));\r\n    return variables\r\n}\r\n\r\n\r\n\r\nconst updateSubscriptionUtils = {\r\n    handleUpdateAddress,\r\n    handleUpdateAttributes,\r\n    handleUpdateOrderNote,\r\n    handleUpdatePaymentMethodEmailSend,\r\n    handleUpdatePaymentMethod,\r\n    handleUpdateDiscount,\r\n    handleRemoveDiscount,\r\n    handleRescheduleNextOrderDate,\r\n    handleUpdateOrderFrequency,\r\n    handleUpdateStatus,\r\n    handleUpdateItemAttribute,\r\n    handleGetProductData,\r\n    handleSubscriptionLineUpdate,\r\n    handleGetProducts,\r\n    handleSubscriptionLineProductUpdate,\r\n    handleRescheduleBillingCycleDate\r\n};\r\n\r\nexport default updateSubscriptionUtils;","import { ActionFunctionArgs, json, LoaderFunctionArgs, redirect } from '@remix-run/node';\r\nimport { useLoaderData } from '@remix-run/react';\r\nimport { CURRENT_APP_INSTALLATION } from 'app/graphql/queries/queryCurrentAppInstallation';\r\nimport { CURRENT_SHOP } from 'app/graphql/queries/queryShop';\r\nimport { SUBSCRIPTION_BILLING_CYCLES_QUERY } from 'app/graphql/queries/subscriptions/subscriptionBillingCycles';\r\nimport { SUBSCRIPTION_CONTRACT_QUERY } from 'app/graphql/queries/subscriptions/subscriptionContract';\r\nimport { useIsMounted } from 'app/packages/hooks/use-is-mounted';\r\nimport { getAuthCookie, mergeQueryParams } from 'app/packages/utils/cookieAuth';\r\nimport { generateGraphQLId, ShopifyObjectType } from 'app/packages/utils/shopifyIdUtils';\r\nimport SubscriptionEditMain from 'app/shared/subscriptions/subscription-edit';\r\nimport { authenticate } from 'app/shopify.server';\r\nimport { shopObject } from 'app/states/shopAtom';\r\nimport { subscriptionContractAtom } from 'app/states/subscriptionContractAtom';\r\nimport { SubscriptionContractSingleNode } from 'app/types/subscription/subscriptionQueryTypes';\r\nimport { useAtom } from 'jotai';\r\nimport { AdminApiContextWithoutRest } from 'node_modules/@shopify/shopify-app-remix/dist/ts/server/clients';\r\nimport { useEffect } from 'react';\r\nimport { ERROR_MESSAGES } from './merchant.products_.$productId_.plans';\r\nimport createPlanAPIUtils from 'app/shared/products/create-plans/createPlanAPIUtils';\r\nimport updateSubscriptionUtils from 'app/shared/subscriptions/subscription-edit/SubscriptionEditUtils';\r\n\r\nexport const loader = async ({\r\n  request,\r\n  params\r\n}: LoaderFunctionArgs) => {\r\n  const cookieHeader = request.headers.get(\"Cookie\");\r\n  const authData = await getAuthCookie(cookieHeader);\r\n  if (!authData) {\r\n    throw redirect(\"/auth/login\");\r\n  }\r\n  const updatedRequest = mergeQueryParams(request, authData.query);\r\n  await authenticate.admin(updatedRequest);\r\n  const response = await authenticate.admin(updatedRequest);\r\n  const { subscriptionId } = params;\r\n  if (!response || !response.admin || !subscriptionId) {\r\n    throw new Error(\"Authentication failed: Admin data missing\");\r\n  }\r\n  const { admin } = response;\r\n  const criticalData = await loadCriticalData(admin, parseInt(subscriptionId));\r\n\r\n  return {\r\n    apiKey: process.env.SHOPIFY_API_KEY || \"\",\r\n    subscriptionContract: criticalData.subscriptionContract as SubscriptionContractSingleNode,\r\n  };\r\n\r\n};\r\n\r\n/**\r\n * Load data necessary for rendering content above the fold. This is the critical data\r\n * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.\r\n * @param {AdminInstance}\r\n */\r\nconst loadCriticalData = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  subscriptionContractId: number\r\n) => {\r\n  try {\r\n    const variables = generateVariables(subscriptionContractId);\r\n\r\n    const billingCycleVariables = generateBillingCycleVariables(subscriptionContractId);\r\n    // Run both GraphQL queries in parallel\r\n    const [\r\n      subscriptionContractResponse,\r\n      appResponse,\r\n      shopResponse,\r\n      subscriptionBillingCyclesResponse\r\n    ] = await Promise.all([\r\n      admin.graphql(SUBSCRIPTION_CONTRACT_QUERY, variables),\r\n      admin.graphql(CURRENT_APP_INSTALLATION),\r\n      admin.graphql(CURRENT_SHOP),\r\n      admin.graphql(SUBSCRIPTION_BILLING_CYCLES_QUERY, billingCycleVariables)\r\n    ]);\r\n    const [\r\n      { data: { subscriptionContract } },\r\n      { data: { currentAppInstallation } },\r\n      { data: { shop } },\r\n      { data: { subscriptionBillingCycles } }\r\n    ] = await Promise.all([\r\n      subscriptionContractResponse.json(),\r\n      appResponse.json(),\r\n      shopResponse.json(),\r\n      subscriptionBillingCyclesResponse.json(),\r\n    ]);\r\n\r\n    // Attach `currentAppInstallation` to the product\r\n    return { subscriptionContract: { ...subscriptionContract, currentAppInstallation, shop, subscriptionBillingCycles } };\r\n\r\n  } catch (error) {\r\n    console.error(\"Error loading critical data:\", error);\r\n    throw new Error(\"Failed to load critical subscriptionContractId data\");\r\n  }\r\n};\r\n\r\nconst generateBillingCycleVariables = (subscriptionContractId: number) => {\r\n  const graphqlProductId = generateGraphQLId(\r\n    subscriptionContractId,\r\n    ShopifyObjectType.SubscriptionContract\r\n  );\r\n  const currentIsoDate = new Date().toISOString();\r\n  const oneMonthLater = new Date(new Date().setMonth(new Date().getMonth() + 1)).toISOString();\r\n  return {\r\n    variables: {\r\n      subscriptionContractId: graphqlProductId,\r\n      billingCyclesDateRangeSelector: {\r\n        startDate: currentIsoDate,\r\n        endDate: oneMonthLater\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst generateVariables = (subscriptionContractId: number) => {\r\n  const graphqlProductId = generateGraphQLId(\r\n    subscriptionContractId,\r\n    ShopifyObjectType.SubscriptionContract\r\n  );\r\n  return {\r\n    variables: {\r\n      subscriptionContractId: graphqlProductId\r\n    }\r\n  }\r\n}\r\n\r\nexport async function action({\r\n  request,\r\n  params\r\n}: ActionFunctionArgs) {\r\n  if (request.method !== \"POST\") {\r\n    return json({ error: ERROR_MESSAGES.METHOD_NOT_ALLOWED }, { status: 405 });\r\n  }\r\n  try {\r\n    const admin = await createPlanAPIUtils.authenticateRequest(request);\r\n    if (!admin) return json({ error: ERROR_MESSAGES.UNAUTHORIZED }, { status: 401 });\r\n    const formData = await request.formData();\r\n    const action = formData.get(\"action\")?.toString();\r\n    if (!action) return json({ error: ERROR_MESSAGES.REQUIRED_PARAMS_MISSING }, { status: 400 });\r\n    let response;\r\n    switch (action) {\r\n      case 'updateAddress':\r\n        response = await updateSubscriptionUtils.handleUpdateAddress(admin, formData, params);\r\n        break;\r\n      case 'updateAttribute':\r\n        response = await updateSubscriptionUtils.handleUpdateAttributes(admin, formData, params);\r\n        break;\r\n      case 'updateOrderNote':\r\n        response = await updateSubscriptionUtils.handleUpdateOrderNote(admin, formData, params);\r\n        break;\r\n      case 'sendUpdatePaymentMethodEmail':\r\n        response = await updateSubscriptionUtils.handleUpdatePaymentMethodEmailSend(admin, formData);\r\n        break;\r\n      case 'updatePaymentMethod':\r\n        response = await updateSubscriptionUtils.handleUpdatePaymentMethod(admin, formData, params);\r\n        break;\r\n      case 'updateDiscount':\r\n        response = await updateSubscriptionUtils.handleUpdateDiscount(admin, formData, params);\r\n        break;\r\n      case 'removeDiscount':\r\n        response = await updateSubscriptionUtils.handleRemoveDiscount(admin, formData, params);\r\n        break;\r\n      case 'rescheduleBillingDate':\r\n        response = await updateSubscriptionUtils.handleRescheduleNextOrderDate(admin, formData, params);\r\n        break;\r\n      case 'updateOrderFrequency':\r\n        response = await updateSubscriptionUtils.handleUpdateOrderFrequency(admin, formData, params);\r\n        break;\r\n      case 'updateStatus':\r\n        response = await updateSubscriptionUtils.handleUpdateStatus(admin, formData, params);\r\n        break;\r\n      case 'updateLineItemAttribute':\r\n        response = await updateSubscriptionUtils.handleUpdateItemAttribute(admin, formData, params);\r\n        break;\r\n      case 'getProductData':\r\n        response = await updateSubscriptionUtils.handleGetProductData(admin, formData);\r\n        break;\r\n      case 'subscriptionLineUpdate':\r\n        response = await updateSubscriptionUtils.handleSubscriptionLineUpdate(admin, formData, params);\r\n        break;\r\n      case 'subscriptionLineProductUpdate':\r\n        response = await updateSubscriptionUtils.handleSubscriptionLineProductUpdate(admin, formData, params);\r\n        break;\r\n      case 'getProducts':\r\n        response = await updateSubscriptionUtils.handleGetProducts(admin, formData, params);\r\n        break;\r\n      case 'rescheduleBillingCycleDate':\r\n        response = await updateSubscriptionUtils.handleRescheduleBillingCycleDate(admin, formData, params);\r\n        break;\r\n      default:\r\n        response = json({ error: ERROR_MESSAGES.ACTION_NOT_FOUND }, { status: 500 });\r\n        break;\r\n    }\r\n    console.log('response>>>>action', response);\r\n    return response\r\n  } catch (error) {\r\n    console.error(\"Unexpected error:\", error);\r\n    return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n  }\r\n}\r\n\r\n\r\n\r\nconst SubscriptionSingle = () => {\r\n  const { apiKey, subscriptionContract } = useLoaderData<typeof loader>();\r\n  const [, setShopObject] = useAtom(shopObject);\r\n  const [, setSubscriptionContract] = useAtom(subscriptionContractAtom);\r\n\r\n\r\n  useEffect(() => {\r\n    if (subscriptionContract) {\r\n      setShopObject(subscriptionContract.shop);\r\n      setSubscriptionContract(subscriptionContract as unknown as SubscriptionContractSingleNode);\r\n    }\r\n  }, [subscriptionContract]);\r\n\r\n  const isMounted = useIsMounted();\r\n  if (!isMounted) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <SubscriptionEditMain />\r\n  )\r\n}\r\n\r\nexport default SubscriptionSingle","\"use client\";\r\n\r\nimport { Dropdown, Button } from \"rizzui\";\r\n// import { FaChevronDown } from \"react-icons/fa6\";\r\nimport { IoChevronDownSharp } from \"react-icons/io5\";\r\n\r\ninterface DropdownOption<T> {\r\n  value: T;\r\n  label: string;\r\n}\r\n\r\ninterface CustomDropdownProps<T> {\r\n  label: string;\r\n  options: DropdownOption<T>[]; // Generic list of dropdown options\r\n  onSelect: (value: T) => void;\r\n  renderOption?: (value: T) => React.ReactNode; // Custom render function\r\n  variant?: \"outline\" | \"solid\" | \"ghost\" | \"text\";\r\n  menuClassName?: string\r\n}\r\n\r\nexport default function CustomDropdown<T>({\r\n  label,\r\n  options,\r\n  onSelect,\r\n  renderOption,\r\n  variant = \"outline\",\r\n  menuClassName\r\n}: CustomDropdownProps<T>) {\r\n  return (\r\n    <Dropdown>\r\n      <Dropdown.Trigger>\r\n        <Button as=\"span\" variant={variant as any}>\r\n          {label} \r\n          {/* <IoChevronDownSharp className=\"ml-2 w-5\" /> */}\r\n        </Button>\r\n      </Dropdown.Trigger>\r\n      <Dropdown.Menu className={menuClassName}>\r\n        {options.map((option) => (\r\n          <Dropdown.Item key={String(option.value)} onClick={() => onSelect(option.value)}>\r\n            {renderOption ? renderOption(option.value) : option.label}\r\n          </Dropdown.Item>\r\n        ))}\r\n      </Dropdown.Menu>\r\n    </Dropdown>\r\n  );\r\n}\r\n","import { Link } from \"@remix-run/react\";\r\nimport { messages } from \"app/config/messages\";\r\nimport CustomDropdown from \"app/packages/components/dropdown\";\r\nimport cn from \"app/packages/utils/class-names\";\r\nimport { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport { PiArchiveThin, PiGear, PiPencil } from \"react-icons/pi\";\r\nimport { Accordion, Box, Flex, Title } from \"rizzui\";\r\nimport VariantDetailColumns from \"../edit-variant-plans/components/VariantPlanListTable/VariantDetailColumns\";\r\nimport { BsChevronDown } from \"react-icons/bs\";\r\n// import { IoChevronDownSharp } from \"react-icons/io5\"\r\n\r\nenum ConfigureSettings {\r\n    MANAGE_PLANS = \"manage_plans\",\r\n    MANAGE_VARIANTS_PLANS = \"manage_variants_plans\",\r\n}\r\nconst ConfigureSettingsLabels: Record<ConfigureSettings, string> = {\r\n    [ConfigureSettings.MANAGE_PLANS]: \"Manage Plans\",\r\n    [ConfigureSettings.MANAGE_VARIANTS_PLANS]: \"Manage Variants Plans\",\r\n};\r\nconst ConfigureSettingsOptions = Object.values(ConfigureSettings).map((status) => ({\r\n    value: status,\r\n    label: ConfigureSettingsLabels[status], // Use readable labels\r\n}));\r\n\r\nexport default function ProductDetails(\r\n    { productResponse }: {\r\n        productResponse: ProductSingleNode\r\n    }\r\n) {\r\n    return (\r\n        <div className=\"mb-6 flex w-full cursor-pointer flex-col gap-y-4 rounded-[10px] border border-muted p-4 lg:gap-y-6 sm:p-[30px]\">\r\n            <ProductDetailsHeader productResponse={productResponse} />\r\n            <hr />\r\n            <ProductInformation productResponse={productResponse} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ProductInformation = ({ productResponse }: { productResponse: ProductSingleNode }) => {\r\n    const { title, descriptionHtml, variants: { nodes } } = productResponse\r\n    return (\r\n        <Flex direction=\"col\">\r\n            <Box className=\"flex gap-4\">\r\n                <img src={productResponse.featuredMedia?.preview?.image?.url || ''} alt={title} />\r\n                <Box>\r\n                    <Link to={`/merchant/products/${productResponse.id}`}>\r\n                        <Title as=\"h3\" className=\"text-base font-medium xl:text-lg\">\r\n                            {title}\r\n                        </Title>\r\n                        {/* How price here */}\r\n                        <div className=\"text-sm\" dangerouslySetInnerHTML={{ __html: descriptionHtml }} />\r\n                    </Link>\r\n                </Box>\r\n            </Box>\r\n            {\r\n                nodes.length && (\r\n                    <ProductVariantBlock productResponse={productResponse} />\r\n                )\r\n            }\r\n        </Flex>\r\n    )\r\n}\r\n\r\nconst ProductDetailsHeader = ({ productResponse }: {\r\n    productResponse: ProductSingleNode\r\n}) => {\r\n    const {\r\n        variants: { nodes }\r\n    } = productResponse\r\n    return <Flex justify=\"between\" align=\"center\" direction=\"col\">\r\n        <div className=\"w-full flex\">\r\n            <Flex align=\"center\">\r\n                <span\r\n                    className={cn(\r\n                        'me-2 inline-flex size-5 items-center justify-center rounded-md [&>svg]:size-5',\r\n                        'text-gray-800 dark:text-gray-500 dark:group-hover:text-gray-700'\r\n                    )}\r\n                >\r\n                    <PiArchiveThin />\r\n                </span>\r\n                <Title as=\"h3\" className=\"text-base font-medium xl:text-lg\">\r\n                    {messages.products.productDetails.title}\r\n                </Title>\r\n            </Flex>\r\n            <CustomDropdown\r\n                label=\"Configure\"\r\n                options={ConfigureSettingsOptions}\r\n                onSelect={handleSelect}\r\n                renderOption={renderConfigureOption}\r\n                variant=\"solid\"\r\n                menuClassName=\"min-w-max whitespace-nowrap\"\r\n            />\r\n        </div>\r\n    </Flex>\r\n}\r\n\r\nconst handleSelect = (value: ConfigureSettings) => {\r\n    console.log(\"Selected:\", value);\r\n};\r\n\r\n// Render function for items\r\nfunction renderConfigureOption(value: ConfigureSettings) {\r\n    return (\r\n        <div className=\"flex items-center\">\r\n            {value === ConfigureSettings.MANAGE_PLANS ? <PiPencil /> : <PiGear />}\r\n            <span className=\"ml-2\">{ConfigureSettingsOptions.find((opt) => opt.value === value)?.label}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const ProductVariantBlock = ({ productResponse }: { productResponse: ProductSingleNode }) => {\r\n    const { variants: { nodes } } = productResponse\r\n    return (\r\n        <Accordion\r\n            className=\"border-b last-of-type:border-b-0\"\r\n        >\r\n            <Accordion.Header className=\"items-start\" >\r\n                {({ open }) => (\r\n                    <div className=\"flex cursor-pointer items-center pb-3 text-md font-semibold\">\r\n                        Variants\r\n                        <BsChevronDown \r\n                            className={cn(\r\n                                \"h-4 w-4 -rotate-90 transform transition-transform duration-300 ms-2\",\r\n                                open && \"-rotate-0\"\r\n                            )}\r\n                        />\r\n                    </div>\r\n                )}\r\n            </Accordion.Header>\r\n            <Accordion.Body className=\"mb-7\">\r\n                {nodes.map((variant) => (\r\n                    <div key={variant.id}>\r\n                        <VariantDetailColumns variant={variant} />\r\n                    </div>\r\n                ))}\r\n            </Accordion.Body>\r\n        </Accordion >\r\n    )\r\n}\r\n\r\n","import { OneTimePlan, PayPerShipmentSellingPlan } from \"app/types/product/sellingPlans\";\r\n\r\nexport interface SellingPlanGroup {\r\n    appId: string;\r\n    createdAt: string;\r\n    id: string;\r\n    merchantCode: string;\r\n    name: string;\r\n    options: string[];\r\n    position: number;\r\n    sellingPlans: {\r\n        edges: Array<{\r\n            cursor: string;\r\n            node: {\r\n                category: string;\r\n                createdAt: string;\r\n                description: string | null;\r\n                position: number | null;\r\n                name: string;\r\n                options: string[];\r\n                id: string;\r\n                deliveryPolicy: {\r\n                    cutoff: number | null;\r\n                    interval?: string;\r\n                    intervalCount?: number;\r\n                    preAnchorBehavior?: string;\r\n                    intent?: string;\r\n                    createdAt?: string;\r\n                    anchors?: any[];\r\n                    fulfillmentExactTime?: string | null;\r\n                };\r\n            };\r\n        }>;\r\n    };\r\n}\r\n\r\nexport interface SellingPlanGroupEdge {\r\n    cursor: string;\r\n    node: SellingPlanGroup;\r\n}\r\n\r\nexport interface PayPerShipmentSellingPlanFrontend extends PayPerShipmentSellingPlan {\r\n    id: string\r\n    position: number,\r\n    createdAt?: string,\r\n}\r\n\r\nexport interface PayPerShipmentPlanGroup {\r\n    groupName: string;\r\n    id: string;\r\n    sellingPlans: PayPerShipmentSellingPlanFrontend[]\r\n}\r\n\r\nexport const getSellingPlanGroup = (\r\n    sellingPlanGroups: SellingPlanGroupEdge[], // Accepts an array of SellingPlanGroupEdge\r\n    planGroupName: string\r\n): SellingPlanGroup | any => {\r\n    for (const group of sellingPlanGroups) {\r\n        if (group.node.merchantCode === planGroupName) {\r\n            return group.node; // Return the matching SellingPlanGroup\r\n        }\r\n    }\r\n    return null; // Return null if no matching plan group is found\r\n};\r\n\r\nexport const processOneTimeGroup = (sellingPlanGroup: any): OneTimePlan => {\r\n    const sellingPlan = sellingPlanGroup.sellingPlans.edges[0]?.node;\r\n\r\n    return {\r\n        enable: !!sellingPlan,\r\n        planName: sellingPlan?.name || '',\r\n        groupId: sellingPlanGroup?.id,\r\n        sellingPlanId: sellingPlan?.id,\r\n\r\n        // Combine all policy processors\r\n        ...processPricingPolicy(sellingPlan),\r\n        ...processInventoryPolicy(sellingPlan),\r\n        ...processDeliveryPolicy(sellingPlan),\r\n        ...processBillingPolicy(sellingPlan)\r\n    };\r\n}\r\n\r\n\r\n// Pricing Policy Processor\r\nconst processPricingPolicy = (sellingPlan: any) => ({\r\n    pricingPolicyEnable: !!sellingPlan?.pricingPolicies?.length,\r\n    pricingPolicyAdjustmentType:\r\n        sellingPlan?.pricingPolicies?.[0]?.adjustmentType || 'FIXED_AMOUNT',\r\n    pricingPolicyAdjustmentValue:\r\n        sellingPlan?.pricingPolicies?.[0]?.adjustmentValue?.percentage || sellingPlan?.pricingPolicies?.[0]?.adjustmentValue?.amount,\r\n});\r\n\r\n// Inventory Policy Processor\r\nconst processInventoryPolicy = (sellingPlan: any) => ({\r\n    inventoryPolicyEnable: !!sellingPlan?.inventoryPolicy,\r\n    inventoryPolicyReserve:\r\n        sellingPlan?.inventoryPolicy?.reserve || 'ON_FULFILLMENT',\r\n});\r\n\r\n// Delivery Policy Processor\r\nconst processDeliveryPolicy = (sellingPlan: any) => ({\r\n    deliveryPolicyEnable: !!sellingPlan?.deliveryPolicy,\r\n    deliveryPolicyAnchorsCutoffDay: sellingPlan?.deliveryPolicy?.cutoff || 0,\r\n    deliveryPolicyAnchorsDay: 1,\r\n    deliveryPolicyAnchorsMonth: 1,\r\n    deliveryPolicyAnchorsType: 'MONTHDAY' as 'MONTHDAY' | 'WEEKDAY' | 'YEARDAY',\r\n    deliveryPolicyCutoff: sellingPlan?.deliveryPolicy?.cutoff || 0,\r\n    deliveryPolicyFulfillmentExactTime:\r\n        sellingPlan?.deliveryPolicy?.fulfillmentExactTime || null,\r\n    deliveryPolicyFulfillmentTrigger:\r\n        sellingPlan?.deliveryPolicy?.fulfillmentTrigger || 'ANCHOR',\r\n    deliveryPolicyIntent:\r\n        sellingPlan?.deliveryPolicy?.intent || 'FULFILLMENT_BEGIN',\r\n    deliveryPolicyPreAnchorBehavior:\r\n        sellingPlan?.deliveryPolicy?.preAnchorBehavior || 'ASAP',\r\n    preAnchorBehavior:\r\n        sellingPlan?.deliveryPolicy?.preAnchorBehavior || 'ASAP',\r\n});\r\n\r\n// Billing Policy Processor\r\nconst processBillingPolicy = (sellingPlan: any) => ({\r\n    billingPolicyEnable: !!sellingPlan?.billingPolicy,\r\n    billingPolicyCheckoutChargeType:\r\n        sellingPlan?.billingPolicy?.checkoutCharge?.type || 'PRICE',\r\n    billingPolicyCheckoutChargeValue:\r\n        sellingPlan?.billingPolicy?.checkoutCharge?.value?.percentage || 0,\r\n    billingPolicyRemainingBalanceChargeExactTime:\r\n        sellingPlan?.billingPolicy?.remainingBalanceChargeExactTime || '',\r\n    billingPolicyRemainingBalanceChargeTimeAfterCheckout:\r\n        sellingPlan?.billingPolicy?.remainingBalanceChargeTimeAfterCheckout || '',\r\n    billingPolicyRemainingBalanceChargeTrigger:\r\n        sellingPlan?.billingPolicy?.remainingBalanceChargeTrigger || \"NO_REMAINING_BALANCE\"\r\n});\r\n\r\nexport const processPayPerShipmentGroup = (sellingPlanGroup: any): PayPerShipmentPlanGroup => {\r\n    return {\r\n        groupName: sellingPlanGroup?.name || \"Unnamed Group\",\r\n        id: sellingPlanGroup?.id,\r\n        sellingPlans: sellingPlanGroup.sellingPlans.edges.map(({ node }: any, index: number): PayPerShipmentSellingPlanFrontend => ({\r\n            id: node.id,\r\n            createdAt: node?.createdAt || '',\r\n            position: node?.position || index + 1,\r\n            planName: node?.name || \"Unnamed Plan\",\r\n            showDescription: !!node.description,\r\n            category: node.category || \"SUBSCRIPTION\",\r\n            descriptionContent: node.description || \"\",\r\n\r\n            // Pricing Policy\r\n            pricingPolicyEnable: !!node.pricingPolicies?.length,\r\n            pricingPolicyAdjustmentType: node.pricingPolicies?.[0]?.adjustmentType || \"FIXED_AMOUNT\",\r\n            pricingPolicyAdjustmentValue: node.pricingPolicies?.[0]?.adjustmentValue?.percentage || 0,\r\n            pricingPolicyAfterCycleEnable: false,\r\n            pricingPolicyAfterCycle: 0,\r\n            pricingPolicyAfterCycleAdjustmentType: \"FIXED_AMOUNT\",\r\n            pricingPolicyAfterCycleAdjustmentValue: 0,\r\n\r\n            // Inventory Policy\r\n            inventoryPolicyEnable: !!node.inventoryPolicy,\r\n            inventoryPolicyReserve: node.inventoryPolicy?.reserve || \"ON_FULFILLMENT\",\r\n\r\n            // Delivery Policy\r\n            deliveryPolicyEnable: !!node.deliveryPolicy,\r\n            deliveryPolicyAnchorsCutoffDay: node.deliveryPolicy?.cutoff || 0,\r\n            deliveryPolicyAnchorsDay: 1,\r\n            deliveryPolicyAnchorsMonth: 1,\r\n            deliveryPolicyAnchorsType: \"WEEKDAY\", // Assuming it's a weekly plan, update logic if needed\r\n            deliveryPolicyCutoff: node.deliveryPolicy?.cutoff || 0,\r\n            deliveryPolicyFulfillmentExactTime: node.deliveryPolicy?.fulfillmentExactTime || null,\r\n            deliveryPolicyFulfillmentTrigger: node.deliveryPolicy?.fulfillmentTrigger || \"ANCHOR\",\r\n            deliveryPolicyIntent: node.deliveryPolicy?.intent || \"FULFILLMENT_BEGIN\",\r\n            deliveryPolicyPreAnchorBehavior: node.deliveryPolicy?.preAnchorBehavior || \"ASAP\",\r\n\r\n            // Recurring Delivery Policy\r\n            deliveryRecurringPolicyEnable: !!node.deliveryPolicy?.interval,\r\n            preAnchorBehavior: node.deliveryPolicy?.preAnchorBehavior || \"ASAP\",\r\n            deliveryRecurringPolicyAnchorsCutoffDay: node.deliveryPolicy?.cutoff || 0,\r\n            deliveryRecurringPolicyAnchorsDay: 1,\r\n            deliveryRecurringPolicyAnchorsMonth: 1,\r\n            deliveryRecurringPolicyAnchorsType: \"WEEKDAY\",\r\n            deliveryRecurringPolicyCutoff: node.deliveryPolicy?.cutoff || 0,\r\n            deliveryRecurringPolicyIntent: node.deliveryPolicy?.intent || \"FULFILLMENT_BEGIN\",\r\n            deliveryRecurringPolicyInterval: node.deliveryPolicy?.interval || null,\r\n            deliveryRecurringPolicyIntervalCount: node.deliveryPolicy?.intervalCount || 0,\r\n            deliveryRecurringPreAnchorBehavior: node.deliveryPolicy?.preAnchorBehavior || \"ASAP\",\r\n\r\n            // Recurring Billing Policy\r\n            billingRecurringPolicyEnable: !!node.billingPolicy?.interval,\r\n            billingRecurringPolicyInterval: node.billingPolicy?.interval || \"WEEK\",\r\n            billingRecurringPolicyIntervalCount: node.billingPolicy?.intervalCount || 0,\r\n            billingRecurringPolicyMinCycles: node.billingPolicy?.minCycles || 0,\r\n            billingRecurringPolicyMaxCycles: node.billingPolicy?.maxCycles || 0,\r\n            billingRecurringPolicyAnchorsCutoffDay: 0, // Default, update as needed\r\n            billingRecurringPolicyAnchorsDay: 1,\r\n            billingRecurringPolicyAnchorsMonth: 1,\r\n            billingRecurringPolicyAnchorsType: \"WEEKDAY\",\r\n        }))\r\n    };\r\n};\r\n\r\n\r\n","import { OneTimePlan, SellingPlanPricingPolicyAdjustmentType } from \"app/types/product/sellingPlans\";\r\nimport { Button, Modal, Title, ActionIcon, Loader } from \"rizzui\";\r\nimport { FaClock, FaGift, FaMoneyBill, FaTrash, FaXmark } from \"react-icons/fa6\";\r\nimport cn from \"app/packages/utils/class-names\";\r\nimport { formatPrice } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { useFetcher } from \"@remix-run/react\";\r\nimport { useAtom } from \"jotai\";\r\nimport { productAtom } from \"app/states/productAtom\";\r\nimport { useEffect, useMemo, useState } from \"react\";\r\nimport { OneTimePlanForm } from \"../../selling-plan-groups/OneTimePlanSettings/OneTimePlanForm\";\r\nimport { createPlanPageStates } from \"app/states/plansAtom\";\r\nimport { defaultOneTimePlan } from \"../../selling-plan-groups/PayPerShipment/default.plan\";\r\nimport toast from \"react-hot-toast\";\r\nimport { shopObject } from \"app/states/shopAtom\";\r\nimport { ConfirmationModal } from \"../../selling-plan-groups/components/ConfirmationModal\";\r\nimport CheckCircleIcon from \"app/packages/components/icons/check-circle\";\r\n\r\n// Plan Header Component\r\nconst PlanHeader = ({\r\n    planName,\r\n    children,\r\n    className }: {\r\n        planName: string,\r\n        children?: React.ReactNode,\r\n        className?: string\r\n    }) => (\r\n    <div className={cn(\"flex gap-2\", className)}>\r\n        <div className=\"flex gap-2\">\r\n            <FaMoneyBill className=\"text-green-600 text-xl\" />\r\n            <h4 className=\"text-base font-semibold text-gray-900\">\r\n                {planName || \"Unnamed Plan\"}\r\n            </h4>\r\n        </div>\r\n        {children}\r\n    </div>\r\n);\r\n\r\n// Plan Details Component\r\nconst PlanDetails = ({\r\n    pricingPolicyAdjustmentValue,\r\n    pricingPolicyAdjustmentType,\r\n}: {\r\n    pricingPolicyAdjustmentValue: number;\r\n    pricingPolicyAdjustmentType: SellingPlanPricingPolicyAdjustmentType;\r\n}) => {\r\n    const [shop] = useAtom(shopObject);\r\n    const { currencyFormats: { moneyWithCurrencyFormat } } = shop;\r\n    const formattedPrice = useMemo(() => {\r\n        if (pricingPolicyAdjustmentType === \"FIXED_AMOUNT\" || pricingPolicyAdjustmentType === \"PRICE\") {\r\n            return formatPrice(pricingPolicyAdjustmentValue, moneyWithCurrencyFormat);\r\n        }\r\n        return null;\r\n    }, [pricingPolicyAdjustmentValue, pricingPolicyAdjustmentType, moneyWithCurrencyFormat]);\r\n\r\n    return (\r\n        <div className=\"flex justify-between items-center text-sm text-gray-700\">\r\n            <div className=\"flex flex-col gap-1\">\r\n                <p>\r\n                    <FaClock className=\"inline-block text-blue-500 mr-1\" />\r\n                    <strong>Plan Type:</strong> One-time Purchase\r\n                </p>\r\n                {pricingPolicyAdjustmentType === \"PERCENTAGE\" && (\r\n                    <p className=\"text-green-600 font-medium\">\r\n                        <FaGift className=\"inline-block text-yellow-500 mr-1\" />\r\n                        <strong>Discount:</strong> {pricingPolicyAdjustmentValue}%\r\n                    </p>\r\n                )}\r\n                {formattedPrice && (\r\n                    <p className=\"text-green-600 font-medium\">\r\n                        <FaGift className=\"inline-block text-yellow-500 mr-1\" />\r\n                        <strong>\r\n                            {pricingPolicyAdjustmentType === \"FIXED_AMOUNT\" || pricingPolicyAdjustmentType === \"PERCENTAGE\" ? \"Discount:\" : \"Price:\"}\r\n                        </strong> {formattedPrice}\r\n                    </p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n// Plan Actions Component\r\nconst PlanActions = ({\r\n    OneTimeGroup\r\n}: {\r\n    OneTimeGroup: OneTimePlan\r\n}) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [showDeleteConfirmationModal, setShowDeleteConfirmationModal] = useState(false);\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const fetcher = useFetcher<any>();\r\n\r\n\r\n    const handleMangePlanClick = () => {\r\n        setIsModalOpen(true); // Open the modal\r\n    }\r\n\r\n    const handleConfirmDeletePlan = () => {\r\n        setIsLoading(true);\r\n        const { sellingPlanId, groupId } = OneTimeGroup;\r\n        if (!groupId || !sellingPlanId) {\r\n            toast.error(\"Somethink wrong Please try again \");\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"sellingPlanId\", sellingPlanId);\r\n        formData.append(\"groupId\", groupId);\r\n        formData.append(\"action\", 'deleteOneTimePlan');\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <div className=\"flex justify-end gap-2 mt-2\">\r\n            <Button\r\n                variant={\"outline\" as any}\r\n                size=\"sm\"\r\n                onClick={handleMangePlanClick}\r\n            >\r\n                <CheckCircleIcon className=\"mr-1 text-blue-500\" /> Edit\r\n            </Button>\r\n            <Button\r\n                variant={\"outline\" as any}\r\n                size=\"sm\" color=\"danger\"\r\n                onClick={() => setShowDeleteConfirmationModal(true)}\r\n                isLoading={isLoading}\r\n                loader={<Loader variant=\"spinner\" />}\r\n            >\r\n                <FaTrash className=\"mr-1 text-red-500\" /> Delete\r\n            </Button>\r\n\r\n            <OneTimeEditModal\r\n                modalState={isModalOpen}\r\n                setModalState={setIsModalOpen}\r\n            />\r\n            <ConfirmationModal\r\n                isOpen={showDeleteConfirmationModal}\r\n                title=\"Delete Onetime\"\r\n                message=\"Are you sure you want to delete Onetime Plan?\"\r\n                onConfirm={handleConfirmDeletePlan}\r\n                onCancel={() => setShowDeleteConfirmationModal(false)}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nconst OneTimeEditModal = ({\r\n    modalState,\r\n    setModalState\r\n}: any) => {\r\n    const [productResponse] = useAtom(productAtom);\r\n    const [createPlanPageState, setCreatePlanPageState] = useAtom(createPlanPageStates);\r\n    const fetcher = useFetcher<any>();\r\n    const [loader, setLoader] = useState(false);\r\n    const [currentPlan, setCurrentPlan] = useState<OneTimePlan>(defaultOneTimePlan);\r\n\r\n    // Only initialize `currentPlan` when the modal first opens\r\n    useEffect(() => {\r\n        if (modalState && createPlanPageState?.oneTimeGroup) {\r\n            setCurrentPlan(createPlanPageState.oneTimeGroup);\r\n        }\r\n    }, [modalState]); // Runs only when `modalState` changes\r\n\r\n    const handleChange = <T extends keyof OneTimePlan>(field: T, value: OneTimePlan[T]) => {\r\n        setCurrentPlan((prevPlan) => ({\r\n            ...prevPlan,\r\n            [field]: value\r\n        }));\r\n\r\n        setCreatePlanPageState((prevState: any) => ({\r\n            ...prevState,\r\n            oneTimeGroup: {\r\n                ...prevState.oneTimeGroup,\r\n                [field]: value\r\n            }\r\n        }));\r\n    };\r\n\r\n    const handleSavePlan = async () => {\r\n        setLoader(true);\r\n        const { groupId } = currentPlan;\r\n        if (!groupId) {\r\n            toast.error(\"Please select a group.\");\r\n            setLoader(false);\r\n            return;\r\n        }\r\n        const formData = new FormData();\r\n        formData.append(\"plans\", JSON.stringify(currentPlan));\r\n        formData.append(\"groupId\", groupId);\r\n        formData.append(\"action\", 'updateOneTimePlan');\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setLoader(false);\r\n            setModalState(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalState}\r\n            onClose={() => setModalState(false)}\r\n            overlayClassName=\"backdrop-blur\"\r\n            containerClassName=\"!w-[90%] sm:!w-[600px] !max-w-4xl !shadow-2xl\"\r\n        >\r\n            <div className=\"m-auto px-7 pt-6 pb-8\">\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Edit Plan</Title>\r\n                    <ActionIcon\r\n                        size=\"sm\"\r\n                        variant={\"text\" as any}\r\n                        onClick={() => setModalState(false)}\r\n                    >\r\n                        <FaXmark\r\n                            className=\"h-auto w-6\"\r\n                            strokeWidth={1.8}\r\n                        />\r\n                    </ActionIcon>\r\n                </div>\r\n                <div className=\"w-full\">\r\n                    <OneTimePlanForm\r\n                        currentPlan={currentPlan}\r\n                        onChange={handleChange as any}\r\n                        onSave={handleSavePlan}\r\n                        productTitle={productResponse?.title || \"\"}\r\n                        tabListClassName=\"w-[35%]\"\r\n                        tabPanelClassName=\"w-[79%]\"\r\n                        saveButtonProps={{ isLoading: loader, loader: <Loader variant=\"spinner\" /> }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    );\r\n};\r\n\r\n\r\n\r\n// Main OneTimePlansList Component\r\nconst OneTimePlansList = ({\r\n    OneTimeGroup\r\n}: {\r\n    OneTimeGroup: OneTimePlan\r\n}) => {\r\n    const { planName,\r\n        pricingPolicyAdjustmentValue,\r\n        pricingPolicyAdjustmentType\r\n    } = OneTimeGroup;\r\n    return (\r\n        <div className=\"flex w-full cursor-pointer flex-col gap-y-4 rounded-[10px] border border-muted p-4 lg:gap-y-2 sm:p-[30px]\">\r\n            <PlanHeader planName={planName} />\r\n            <PlanDetails\r\n                pricingPolicyAdjustmentValue={pricingPolicyAdjustmentValue}\r\n                pricingPolicyAdjustmentType={pricingPolicyAdjustmentType}\r\n            />\r\n            <PlanActions OneTimeGroup={OneTimeGroup} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default OneTimePlansList;\r\n\r\nexport { PlanHeader, PlanDetails, PlanActions };","\r\nexport enum ConfigureSettings {\r\n    MANAGE_PLANS = \"manage_plans\",\r\n    // MANAGE_VARIANTS_PLANS = \"manage_variants_plans\",\r\n}\r\n\r\n// Labels for dropdown items\r\nexport const ConfigureSettingsLabels: Record<ConfigureSettings, string> = {\r\n    [ConfigureSettings.MANAGE_PLANS]: \"Manage Plans\",\r\n    // [ConfigureSettings.MANAGE_VARIANTS_PLANS]: \"Manage Variant Plans\",\r\n};\r\n\r\n// Dropdown options\r\nexport const ConfigureSettingsOptions = Object.values(ConfigureSettings).map((status) => ({\r\n    value: status,\r\n    label: ConfigureSettingsLabels[status],\r\n}));\r\n\r\n","import { useEffect, useState } from \"react\";\r\nimport { PayPerShipmentPlanGroup, PayPerShipmentSellingPlanFrontend } from \"../utils/sellingPlansGroupUtils\";\r\nimport { PlanHeader } from \"./OneTimePlans\";\r\nimport { FaCopy, FaEllipsisVertical, FaGear, FaPencil, FaRepeat, FaShip, FaTag, FaTrash, FaXmark } from \"react-icons/fa6\";\r\nimport { Flex, Text, Title, Box, Dropdown, ActionIcon, Loader, Button, Modal } from \"rizzui\";\r\nimport { messages } from \"app/config/messages\";\r\nimport { closestCenter, DndContext, DragEndEvent } from \"@dnd-kit/core\";\r\nimport { arrayMove, SortableContext, useSortable, verticalListSortingStrategy } from \"@dnd-kit/sortable\";\r\nimport { CSS } from \"@dnd-kit/utilities\";\r\nimport toast from \"react-hot-toast\";\r\nimport { Link, useFetcher, useNavigate, useParams } from \"@remix-run/react\";\r\nimport { productAtom } from \"app/states/productAtom\";\r\nimport { useAtom } from \"jotai\";\r\nimport { extractNumericId, formatDate } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { ConfirmationModal } from \"../../selling-plan-groups/components/ConfirmationModal\";\r\nimport { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport { PayPerShipmentSellingPlan } from \"app/types/product/sellingPlans\";\r\nimport { OneTimePlanForm } from \"../../selling-plan-groups/OneTimePlanSettings/OneTimePlanForm\";\r\n\r\nconst PayperShipmentPlansList = ({\r\n    shipmentGroup,\r\n    plansKey,\r\n    setRefreshKey\r\n}: {\r\n    shipmentGroup: PayPerShipmentPlanGroup | null;\r\n    plansKey: string,\r\n    setRefreshKey: any\r\n}) => {\r\n    if (!shipmentGroup) return null\r\n    const { groupName, sellingPlans, id } = shipmentGroup;\r\n    const numericSellingPlanGroupId = extractNumericId(id);\r\n    // Sort the sellingPlans array by the \"position\" property\r\n    const sortedSellingPlans = [...sellingPlans].sort((a, b) => a.position - b.position);\r\n    const [sellingPlansState, setSellingPlansState] = useState(sortedSellingPlans);\r\n    const [hasChanges, setHasChanges] = useState(false);\r\n    const [loader, setLoader] = useState(false);\r\n    const fetcher = useFetcher<any>();\r\n    const [productResponse, setProduct] = useAtom(productAtom);\r\n    const navigate = useNavigate();\r\n    const { productId } = useParams();\r\n\r\n    /** Handles reordering when dragging ends */\r\n    const handleDragEnd = (event: DragEndEvent) => {\r\n        const { active, over } = event;\r\n        if (!over || active.id === over.id) return;\r\n        const oldIndex = sellingPlansState.findIndex(({ id }: PayPerShipmentSellingPlanFrontend) => id === active.id);\r\n        const newIndex = sellingPlansState.findIndex(({ id }: PayPerShipmentSellingPlanFrontend) => id === over.id);\r\n        setSellingPlansState(arrayMove(sellingPlansState, oldIndex, newIndex));\r\n        setHasChanges(true);\r\n    };\r\n\r\n    /** Function to compare two arrays for equality */\r\n    const arraysAreEqual = (arr1: any[], arr2: any[]) => {\r\n        if (arr1.length !== arr2.length) return false;\r\n        return arr1.every((item, index) => item.id === arr2[index].id);\r\n    };\r\n\r\n\r\n    /** Handle save changes */\r\n    const handleSaveChanges = () => {\r\n        const productId = extractNumericId(productResponse.id);\r\n        setLoader(true);\r\n        const formData = new FormData();\r\n        formData.append(\"plans\", JSON.stringify(sellingPlansState));\r\n        formData.append(\"groupId\", id);\r\n        formData.append(\"action\", 'updatePlanOrder');\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `/merchant/products/${productId}`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n\r\n    };\r\n\r\n    const handleMangePlanClick = () => {\r\n        const productId = extractNumericId(productResponse.id);\r\n        navigate(`/merchant/products/${productId}/plans?plansUpdate=yes`)\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n                setHasChanges(false); // Reset changes after saving\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setLoader(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <div className=\"flex w-full cursor-pointer flex-col gap-y-6 rounded-[10px] border border-muted p-4 lg:gap-y-2 sm:p-[30px]\">\r\n            <PlanHeader className=\"mb-4 flex-col\" planName={groupName} children={<Text>{messages.products.subscriptionPlanDnD}</Text>} />\r\n            <DndContext collisionDetection={closestCenter} onDragEnd={handleDragEnd}>\r\n                <SortableContext items={sellingPlansState.map(({ id }: PayPerShipmentSellingPlanFrontend) => id)} strategy={verticalListSortingStrategy}>\r\n                    {/* Render each selling plan */}\r\n                    {sellingPlansState.map((plan) => (\r\n                        <SortablePlan\r\n                            key={plan.id}\r\n                            id={plan.id}\r\n                            plan={plan}\r\n                            shipmentGroup={shipmentGroup}\r\n                            setRefreshKey={setRefreshKey}\r\n                        />\r\n                    ))}\r\n                </SortableContext>\r\n            </DndContext>\r\n\r\n            {/* Conditionally render the Save Changes button */}\r\n            <div className=\"flex items-center justify-end gap-2\">\r\n                <div className=\"flex items-center\">\r\n                    <Button variant={\"text\" as any} onClick={handleMangePlanClick}>\r\n                        <FaGear className=\"text-primary\" />\r\n                        <Text className=\"ms-2 text-primary font-semibold\">Manage plans</Text>\r\n                    </Button>\r\n                    <Link className=\"flex items-center\" to={`/merchant/products/${productId}/variant-plans?groupId=${numericSellingPlanGroupId}`} >\r\n                        <FaGear className=\"text-primary\" />\r\n                        <Text className=\"ms-2 text-primary font-semibold\">Manage variant plans</Text>\r\n                    </Link>\r\n                </div>\r\n                {hasChanges && (\r\n                    <Button\r\n                        onClick={handleSaveChanges}\r\n                        className=\"px-4 py-2 rounded-md text-white bg-blue-500 hover:bg-blue-600\"\r\n                        isLoading={loader}\r\n                        loader={<Loader variant=\"spinner\" />}\r\n                    >\r\n                        Save Changes\r\n                    </Button>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst SortablePlan = ({\r\n    id,\r\n    plan,\r\n    shipmentGroup,\r\n    setRefreshKey\r\n}: {\r\n    id: string;\r\n    plan: PayPerShipmentSellingPlanFrontend,\r\n    shipmentGroup: PayPerShipmentPlanGroup,\r\n    setRefreshKey: any\r\n}) => {\r\n    const { attributes, listeners, setNodeRef, transform, transition } = useSortable({ id });\r\n\r\n    const style = {\r\n        transform: CSS.Transform.toString(transform),\r\n        transition,\r\n        backgroundColor: '#EDEEF9'\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-4 rounded-lg mt-2\" ref={setNodeRef} style={style} {...attributes} {...listeners}>\r\n            <PlanDetails\r\n                sellingPlan={plan}\r\n                shipmentGroup={shipmentGroup}\r\n                setRefreshKey={setRefreshKey}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nconst PlanDetails = ({\r\n    sellingPlan,\r\n    shipmentGroup,\r\n    setRefreshKey\r\n}: {\r\n    sellingPlan: PayPerShipmentSellingPlanFrontend,\r\n    shipmentGroup: PayPerShipmentPlanGroup,\r\n    setRefreshKey: any\r\n}) => {\r\n    const planName = sellingPlan.planName || \"Unnamed Plan\";\r\n    const category = sellingPlan.category?.charAt(0).toUpperCase() + sellingPlan.category?.slice(1).toLowerCase() || \"Subscription\";\r\n\r\n    // Ships Every Calculation (from Delivery Policy)\r\n    const deliveryInterval = sellingPlan.deliveryRecurringPolicyInterval || \"MONTH\";\r\n    const deliveryCount = sellingPlan.deliveryRecurringPolicyIntervalCount || 1;\r\n    const shipsEvery = `Ships every ${deliveryCount} ${deliveryInterval.toLowerCase()}${deliveryCount > 1 ? \"s\" : \"\"}.`;\r\n\r\n    // Pricing Policy (Discount)\r\n    const discountValue = sellingPlan.pricingPolicyAdjustmentValue || 0;\r\n    const discountType = sellingPlan.pricingPolicyAdjustmentType?.toLowerCase() || \"fixed amount\";\r\n    const discountText = `${discountValue}% ${discountType}`;\r\n\r\n    return (\r\n        <div className=\"flex flex-col gap-1\">\r\n            <Flex align=\"center\" direction=\"row\" gap=\"2\" justify=\"between\" >\r\n                <Box className=\"flex gap-2\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24px\" height=\"24px\" viewBox=\"0 0 25 25\" fill=\"none\">\r\n                        <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M9.5 8C10.3284 8 11 7.32843 11 6.5C11 5.67157 10.3284 5 9.5 5C8.67157 5 8 5.67157 8 6.5C8 7.32843 8.67157 8 9.5 8ZM9.5 14C10.3284 14 11 13.3284 11 12.5C11 11.6716 10.3284 11 9.5 11C8.67157 11 8 11.6716 8 12.5C8 13.3284 8.67157 14 9.5 14ZM11 18.5C11 19.3284 10.3284 20 9.5 20C8.67157 20 8 19.3284 8 18.5C8 17.6716 8.67157 17 9.5 17C10.3284 17 11 17.6716 11 18.5ZM15.5 8C16.3284 8 17 7.32843 17 6.5C17 5.67157 16.3284 5 15.5 5C14.6716 5 14 5.67157 14 6.5C14 7.32843 14.6716 8 15.5 8ZM17 12.5C17 13.3284 16.3284 14 15.5 14C14.6716 14 14 13.3284 14 12.5C14 11.6716 14.6716 11 15.5 11C16.3284 11 17 11.6716 17 12.5ZM15.5 20C16.3284 20 17 19.3284 17 18.5C17 17.6716 16.3284 17 15.5 17C14.6716 17 14 17.6716 14 18.5C14 19.3284 14.6716 20 15.5 20Z\" fill=\"#121923\" />\r\n                    </svg>\r\n                    <Title className=\"text-lg font-semibold\">{planName}</Title>\r\n                </Box>\r\n                <PlanActions\r\n                    sellingPlan={sellingPlan}\r\n                    shipmentGroup={shipmentGroup}\r\n                    setRefreshKey={setRefreshKey}\r\n                />\r\n            </Flex>\r\n            <Box className=\"ms-8 mt-3\">\r\n                <Text className=\"text-gray-600\">\r\n                    <FaRepeat className=\"inline-block mr-1\" />\r\n                    {category}\r\n                </Text>\r\n                <Text className=\"text-blue-600\">\r\n                    <FaShip className=\"inline-block mr-1\" />\r\n                    {shipsEvery}\r\n                </Text>\r\n                <Text className=\"text-green-600\">\r\n                    <FaTag className=\"inline-block mr-1\" />\r\n                    {discountText}\r\n                </Text>\r\n            </Box>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst PlanActions = ({\r\n    sellingPlan,\r\n    shipmentGroup,\r\n    setRefreshKey\r\n}: {\r\n    sellingPlan: PayPerShipmentSellingPlanFrontend,\r\n    shipmentGroup: PayPerShipmentPlanGroup,\r\n    setRefreshKey: any\r\n}) => {\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    return (\r\n        <Box className=\"flex items-center\">\r\n            <ActionIcon\r\n                variant={\"text\" as any}\r\n                onPointerDown={(e) => e.stopPropagation()}\r\n                onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    setIsModalOpen(true)\r\n                }}\r\n            >\r\n                <FaPencil className=\"mr-2 h-4 w-4\" />\r\n            </ActionIcon>\r\n            <PlanDropDowns\r\n                sellingPlan={sellingPlan}\r\n                shipmentGroup={shipmentGroup}\r\n                setRefreshKey={setRefreshKey}\r\n\r\n            />\r\n            <SellingPlanEditModal\r\n                modalState={isModalOpen}\r\n                setModalState={setIsModalOpen}\r\n                sellingPlan={sellingPlan}\r\n                shipmentGroup={shipmentGroup}\r\n                setRefreshKey={setRefreshKey}\r\n            />\r\n        </Box>\r\n    );\r\n};\r\n\r\nconst SellingPlanEditModal = ({\r\n    modalState,\r\n    setModalState,\r\n    sellingPlan,\r\n    shipmentGroup,\r\n    setRefreshKey\r\n}: any) => {\r\n    const [currentPlan, setCurrentPlan] = useState<PayPerShipmentSellingPlan>(sellingPlan);\r\n    const [loader, setLoader] = useState(false);\r\n    const fetcher = useFetcher<any>();\r\n    const handleChange = <T extends keyof PayPerShipmentSellingPlan>(field: T, value: PayPerShipmentSellingPlan[T]) => {\r\n        setCurrentPlan((prevPlan) => ({\r\n            ...prevPlan,\r\n            [field]: value\r\n        }));\r\n    };\r\n\r\n    const handleSavePlan = async () => {\r\n        setLoader(true);\r\n        console.log('shipmentGroup', shipmentGroup)\r\n        const formData = new FormData();\r\n        formData.append(\"plans\", JSON.stringify(currentPlan));\r\n        formData.append(\"groupId\", shipmentGroup.id);\r\n        formData.append(\"action\", 'updatePayPerShipmentPlan');\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n                setRefreshKey((prevKey: any) => prevKey + 1);\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setLoader(false);\r\n            setModalState(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n    return (\r\n        <Modal\r\n            isOpen={modalState}\r\n            onClose={() => setModalState(false)}\r\n            overlayClassName=\"backdrop-blur\"\r\n            containerClassName=\"!w-[90%] sm:!w-[600px] !max-w-4xl !shadow-2xl\"\r\n        >\r\n            <div className=\"m-auto px-7 pt-6 pb-8\">\r\n                <div className=\"mb-7 flex items-center justify-between\">\r\n                    <Title as=\"h3\">Edit Plan</Title>\r\n                    <ActionIcon\r\n                        size=\"sm\"\r\n                        variant={\"text\" as any}\r\n                        onClick={() => setModalState(false)}\r\n                        onPointerDown={(e) => e.stopPropagation()}\r\n                    >\r\n                        <FaXmark\r\n                            className=\"h-auto w-6\"\r\n                            strokeWidth={1.8}\r\n                        />\r\n                    </ActionIcon>\r\n                </div>\r\n                <div className=\"w-full\">\r\n                    <OneTimePlanForm\r\n                        currentPlan={currentPlan as any}\r\n                        onChange={handleChange as any}\r\n                        onSave={handleSavePlan}\r\n                        productTitle={\"\"}\r\n                        tabListClassName=\"w-[35%]\"\r\n                        tabPanelClassName=\"w-[79%]\"\r\n                        saveButtonProps={{ isLoading: loader, loader: <Loader variant=\"spinner\" /> }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nconst PlanDropDowns = ({\r\n    sellingPlan,\r\n    shipmentGroup,\r\n    setRefreshKey\r\n}: {\r\n    sellingPlan: PayPerShipmentSellingPlanFrontend,\r\n    shipmentGroup: PayPerShipmentPlanGroup,\r\n    setRefreshKey: any\r\n}) => {\r\n    const fetcher = useFetcher<any>();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [showDeleteConfirmationModal, setShowDeleteConfirmationModal] = useState(false);\r\n    const [product] = useAtom<ProductSingleNode>(productAtom);\r\n\r\n    const handleConfirmDeletePlan = () => {\r\n        setIsLoading(true);\r\n        const { sellingPlanGroups } = product;\r\n        const groupId = shipmentGroup.id;\r\n        const sellingPlanId = sellingPlan.id;\r\n\r\n        if (!groupId || !sellingPlanId) {\r\n            toast.error('Required data missing')\r\n            setIsLoading(false)\r\n            return;\r\n        }\r\n\r\n        const selectedSellingPlanGroup = sellingPlanGroups.edges.find(edge => edge.node.id === groupId)?.node || null;\r\n\r\n        if (!selectedSellingPlanGroup) {\r\n            toast.error('Selling plan group not found')\r\n            setIsLoading(false);\r\n            return;\r\n        }\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"sellingPlanId\", sellingPlanId);\r\n        formData.append(\"groupId\", groupId);\r\n\r\n        const action = isSingleSellingPlan(selectedSellingPlanGroup) ? 'deletePayPerShipmentPlanGroup' : 'deletePayPerShipmentPlan';\r\n        formData.append(\"action\", action);\r\n\r\n        fetcher.submit(formData, {\r\n            method: \"POST\",\r\n            action: `.`,\r\n            encType: \"multipart/form-data\",\r\n        });\r\n    }\r\n\r\n    const isSingleSellingPlan = (sellingPlanGroup: any): boolean => {\r\n        return sellingPlanGroup.sellingPlans.edges.length === 1;\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (fetcher.state === \"idle\" && fetcher.data) {\r\n            if (fetcher?.data?.success) {\r\n                toast.success(\"Changes saved successfully!\");\r\n                setRefreshKey((prevKey: any) => prevKey + 1);\r\n            } else {\r\n                toast.error(fetcher?.data?.error);\r\n            }\r\n            setIsLoading(false);\r\n        }\r\n    }, [fetcher.state, fetcher.data]);\r\n\r\n\r\n    return (\r\n        <Dropdown placement=\"bottom-end\" className=\"min-w-250\">\r\n            <Dropdown.Trigger\r\n                className={\"flex items-center\"}\r\n                onPointerDown={(e) => e.stopPropagation()}\r\n                onClick={(e) => e.stopPropagation()}\r\n            >\r\n                <FaEllipsisVertical className=\"h-5 w-5\" />\r\n            </Dropdown.Trigger>\r\n            <Dropdown.Menu className=\"divide-y min-w-[210px]\">\r\n                <div className=\"mb-2\">\r\n                    <Dropdown.Item>\r\n                        <Button className=\"px-0 py-2\" variant={\"text\" as any} >\r\n                            <FaPencil className=\"mr-2 h-4 w-4\" />\r\n                            Edit Plan\r\n                        </Button>\r\n                    </Dropdown.Item>\r\n\r\n                    <Dropdown.Item>\r\n                        <Button\r\n                            isLoading={isLoading}\r\n                            loader={<Loader variant=\"spinner\" />}\r\n                            className=\"px-0 py-2\"\r\n                            variant={\"text\" as any}\r\n                            onPointerDown={(e) => e.stopPropagation()}\r\n                            onClick={(e) => {\r\n                                e.stopPropagation();\r\n                                setShowDeleteConfirmationModal(true)\r\n                            }}\r\n                        >\r\n                            <FaTrash className=\"mr-2 h-4 w-4\" />\r\n                            Delete\r\n                        </Button>\r\n\r\n                        <ConfirmationModal\r\n                            isOpen={showDeleteConfirmationModal}\r\n                            title=\"Delete Plan\"\r\n                            message=\"Are you sure you want to delete Plan?\"\r\n                            onConfirm={handleConfirmDeletePlan}\r\n                            onCancel={() => setShowDeleteConfirmationModal(false)}\r\n                        />\r\n                    </Dropdown.Item>\r\n\r\n                    <Dropdown.Item>\r\n                        <Button className=\"px-0 py-2\" variant={\"text\" as any} >\r\n                            <FaCopy className=\"mr-2 h-4 w-4\" />\r\n                            Checkout Link\r\n                        </Button>\r\n                    </Dropdown.Item>\r\n\r\n                    <hr className=\"my-3\" />\r\n                    <Dropdown.Item>\r\n                        <Flex direction=\"col\" gap=\"1\">\r\n                            <Text className=\"font-semibold text-[#848BD4] text-lg uppercase\">Created on</Text>\r\n                            <Text className=\"text-left\">{formatDate(sellingPlan?.createdAt as string)}</Text>\r\n                        </Flex>\r\n                    </Dropdown.Item>\r\n                </div>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n    );\r\n};\r\n\r\nexport default PayperShipmentPlansList;","import { Link, useNavigate, useParams } from \"@remix-run/react\";\r\nimport { extractNumericId } from \"app/packages/utils/shopifyIdUtils\";\r\nimport { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport { useEffect, useState } from \"react\";\r\nimport {\r\n    getSellingPlanGroup,\r\n    processOneTimeGroup,\r\n    processPayPerShipmentGroup\r\n} from \"../utils/sellingPlansGroupUtils\";\r\nimport OneTimePlansList from \"./OneTimePlans\";\r\nimport { Button, Flex, Text } from \"rizzui\";\r\nimport { PiGear } from \"react-icons/pi\";\r\nimport { ConfigureSettingsLabels } from \"../dropdownConfig\";\r\nimport PayperShipmentPlansList from \"./PayperShipmentPlansList\";\r\nimport { useAtom } from \"jotai\";\r\nimport { createPlanPageStates } from \"app/states/plansAtom\";\r\n\r\nexport const PlansGroupsInformation = ({ productResponse }: {\r\n    productResponse: ProductSingleNode\r\n}) => {\r\n    // State to store filtered selling plans\r\n    const [filteredSellingPlans, setFilteredSellingPlans] = useState<any[]>([]);\r\n    const navigate = useNavigate();\r\n    const [createPlanPageState, setCreatePlanPageState] = useAtom(createPlanPageStates);\r\n\r\n    useEffect(() => {\r\n        if (!productResponse) return;\r\n        const { sellingPlanGroups, currentAppInstallation } = productResponse as any;\r\n        const appIdGraphQL = currentAppInstallation?.app?.id || \"\";\r\n        const appIdNumeric = extractNumericId(appIdGraphQL); // Convert GraphQL ID to numeric\r\n        // Filter selling plan groups that belong to this app\r\n        if (sellingPlanGroups && sellingPlanGroups.edges) {\r\n            const filteredPlans = sellingPlanGroups.edges.filter(\r\n                (edge: any) => extractNumericId(edge.node.appId) === appIdNumeric\r\n            );\r\n            setFilteredSellingPlans(filteredPlans);\r\n        }\r\n    }, [productResponse]);\r\n\r\n    const OneTimeGroups = getSellingPlanGroup(filteredSellingPlans, \"Onetime Plan Group\");\r\n    const processedOneTimeGroup = OneTimeGroups ? processOneTimeGroup(OneTimeGroups) : null;\r\n    const PayPerShipmentGroup = getSellingPlanGroup(filteredSellingPlans, \"PayPerShipment Plan Group\");\r\n    const processedPayPerShipmentGroup = PayPerShipmentGroup ? processPayPerShipmentGroup(PayPerShipmentGroup) : null;\r\n    const PrePaidShipmentGroup = getSellingPlanGroup(filteredSellingPlans, \"PrePaid Plan Group\");\r\n    const processedPrePaidShipmentGroup = PrePaidShipmentGroup ? processPayPerShipmentGroup(PrePaidShipmentGroup) : null;\r\n    const [refreshKey, setRefreshKey] = useState(0);\r\n\r\n\r\n    useEffect(() => {\r\n        const newState = {\r\n            payPerShipmentGroup: {\r\n                groupName: processedPayPerShipmentGroup?.groupName || \"\",\r\n                sellingPlansToUpdate: processedPayPerShipmentGroup?.sellingPlans || [],\r\n                groupId: processedPayPerShipmentGroup?.id\r\n            },\r\n            oneTimeGroup: {\r\n                groupName: processedOneTimeGroup?.planName || \"\",\r\n                sellingPlansToCreate: [processedOneTimeGroup],\r\n                groupId: processedOneTimeGroup?.groupId\r\n            },\r\n            prePaidSubscriptionsGroup: {\r\n                groupName: processedPrePaidShipmentGroup?.groupName || \"PrePaid Subscription Plan Group\",\r\n                sellingPlansToUpdate: processedPrePaidShipmentGroup?.sellingPlans || [],\r\n                groupId: processedPrePaidShipmentGroup?.id\r\n            },\r\n        };\r\n\r\n        // Compare new state with the previous state to prevent unnecessary updates\r\n        if (JSON.stringify(createPlanPageState) !== JSON.stringify(newState)) {\r\n            setCreatePlanPageState(newState as any);\r\n        }\r\n    }, [processedOneTimeGroup, processedPayPerShipmentGroup, processedPrePaidShipmentGroup]);\r\n\r\n    return (\r\n        <Flex gap=\"5\">\r\n            {filteredSellingPlans.length > 0 ? (\r\n                <div className=\"w-full flex flex-col gap-5\">\r\n                    {processedOneTimeGroup && <OneTimePlansList\r\n                        OneTimeGroup={processedOneTimeGroup}\r\n                    />}\r\n                    {processedPayPerShipmentGroup && <PayperShipmentPlansList\r\n                        plansKey={`payper-${refreshKey}`}\r\n                        shipmentGroup={processedPayPerShipmentGroup}\r\n                        setRefreshKey={setRefreshKey}\r\n                    />}\r\n                    {processedPrePaidShipmentGroup && <PayperShipmentPlansList\r\n                        shipmentGroup={processedPrePaidShipmentGroup}\r\n                        plansKey={`prepaid-${refreshKey}`}\r\n                        setRefreshKey={setRefreshKey}\r\n                    />}\r\n                </div>\r\n            ) : (\r\n                <Flex direction=\"col\" gap=\"7\">\r\n                    <Text className=\"mt-2\">No selling plans found.</Text>\r\n                    <Link\r\n                        to={`/merchant/products/${extractNumericId(productResponse?.id)}/plans`}\r\n                        className=\"rounded-md text-sm font-bold flex items-center text-primary\"\r\n                    >\r\n                        <PiGear />\r\n                        <Text className=\"ms-2\">{ConfigureSettingsLabels.manage_plans}</Text>\r\n                    </Link>\r\n                </Flex>\r\n            )\r\n            }\r\n        </Flex >\r\n    )\r\n}","import { useNavigate } from \"@remix-run/react\";\r\nimport { messages } from \"app/config/messages\";\r\nimport CustomDropdown from \"app/packages/components/dropdown\";\r\nimport cn from \"app/packages/utils/class-names\";\r\nimport { PiGear, PiPencil, PiRepeatFill } from \"react-icons/pi\";\r\nimport { Flex, Title } from \"rizzui\";\r\nimport { ConfigureSettings, ConfigureSettingsOptions } from \"../dropdownConfig\";\r\nimport { extractNumericId } from \"app/packages/utils/shopifyIdUtils\";\r\n\r\nexport const SubscriptionPlansHeader = ({ productResponse }: any) => {\r\n    const navigate = useNavigate();\r\n    return <Flex justify=\"between\" align=\"center\">\r\n        <Flex align=\"center\">\r\n            <span\r\n                className={cn(\r\n                    'me-2 inline-flex size-5 items-center justify-center rounded-md [&>svg]:size-5',\r\n                    'text-gray-800 dark:text-gray-500 dark:group-hover:text-gray-700'\r\n                )}\r\n            >\r\n                <PiRepeatFill />\r\n            </span>\r\n            <Title as=\"h3\" className=\"text-base font-medium xl:text-lg\">\r\n                {messages.products.subscriptionPlanTitle}\r\n            </Title>\r\n\r\n        </Flex>\r\n\r\n        <CustomDropdown\r\n            label=\"Configure\"\r\n            options={ConfigureSettingsOptions}\r\n            onSelect={(value) => {\r\n                if (value === ConfigureSettings.MANAGE_PLANS) {\r\n                    navigate(`/merchant/products/${extractNumericId(productResponse?.id)}/plans`);\r\n                }else{\r\n                    navigate(`/merchant/products/${extractNumericId(productResponse?.id)}/variant-plans`);\r\n                }\r\n            }}\r\n            renderOption={renderConfigureOption}\r\n            variant=\"solid\"\r\n            menuClassName=\"min-w-max whitespace-nowrap\"\r\n        />\r\n    </Flex>\r\n}\r\n\r\nfunction renderConfigureOption(value: ConfigureSettings) {\r\n    return (\r\n        <div className=\"flex items-center\">\r\n            {value === ConfigureSettings.MANAGE_PLANS ? <PiPencil /> : <PiGear />}\r\n            <span className=\"ml-2\">{ConfigureSettingsOptions.find((opt) => opt.value === value)?.label}</span>\r\n        </div>\r\n    );\r\n}\r\n","import { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport { PlansGroupsInformation } from \"./components/PlansGroupsInformation\";\r\nimport { SubscriptionPlansHeader } from \"./components/SubscriptionPlansHeader\";\r\n\r\nexport default function SubscriptionPlansGroups({ productResponse }: { productResponse: ProductSingleNode }) {\r\n    return (\r\n        <div className=\"\">\r\n            <SubscriptionPlansHeader productResponse={productResponse} />\r\n            <hr />\r\n            <div className=\"my-6\">\r\n                <PlansGroupsInformation productResponse={productResponse} />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { Link } from \"@remix-run/react\";\r\nimport { routes } from \"app/config/routes\";\r\nimport PageHeader from \"app/shared/page-header\";\r\nimport { ProductSingleNode } from \"app/types/product/ProductNode\";\r\nimport ProductDetails from \"./productDetails\";\r\nimport SubscriptionPlansGroups from \"./subscriptionPlans\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Badge, Box, MultiSelect, Text, Title } from \"rizzui\";\r\nimport { formatDate } from \"app/packages/utils/shopifyIdUtils\";\r\n\r\nconst pageHeader = {\r\n    breadcrumb: [\r\n        {\r\n            href: routes.products.products,\r\n            name: 'Products',\r\n        },\r\n        {\r\n            name: 'Edit',\r\n        },\r\n    ],\r\n};\r\n\r\n\r\nexport default function ProductEditMain({ productResponse }: {\r\n    productResponse: ProductSingleNode | any\r\n}) {\r\n    console.log('productResponse', productResponse)\r\n    return (\r\n        <>\r\n            <PageHeader title={productResponse.title} breadcrumb={pageHeader.breadcrumb}>\r\n                <div className=\"mt-4 flex items-center gap-3 lg:mt-0\">\r\n                    <Link\r\n                        to={routes.products.products}\r\n                        className=\"w-full lg:w-auto\"\r\n                    >\r\n                    </Link>\r\n                </div>\r\n            </PageHeader>\r\n            <div className=\"container mx-auto\">\r\n                <div className=\"grid grid-cols-12 gap-x-6\">\r\n                    <div className=\"col-span-12 lg:col-span-8 xl:col-span-9\">\r\n                        <ProductDetails productResponse={productResponse} />\r\n                        <SubscriptionPlansGroups productResponse={productResponse} />\r\n                    </div>\r\n\r\n                    <div className=\"col-span-12 lg:col-span-4 xl:col-span-3 hidden lg:block\">\r\n                        <ProductSatusBlock productResponse={productResponse} />\r\n                        <ProductInCollection productResponse={productResponse} />\r\n                        <ProductChangeBlock productResponse={productResponse} />\r\n                    </div>\r\n                </div>\r\n            </div >\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nconst ProductInCollection = ({ productResponse }: { productResponse: ProductSingleNode }) => {\r\n    const options = [\r\n        { label: 'Apple 🍎', value: 'apple' },\r\n        { label: 'Banana 🍌', value: 'banana' },\r\n        { label: 'Cherry 🍒', value: 'cherry' },\r\n    ];\r\n\r\n    const [value, setValue] = useState([]);\r\n    return (\r\n        <Box className=\"rounded-[10px] border border-muted p-4 mt-5\">\r\n            <Title as=\"h3\" className=\"text-[#848BD4] font-medium xl:text-lg\">Billion Grid Collection</Title>\r\n            <div className=\"flex items-center gap-3\">\r\n                <MultiSelect\r\n                    value={value}\r\n                    options={options}\r\n                    label=\"Multi Select\"\r\n                    onChange={setValue as any}\r\n                />\r\n            </div>\r\n        </Box>\r\n    )\r\n}\r\n\r\nconst ProductSatusBlock = ({ productResponse }: { productResponse: ProductSingleNode }) => {\r\n    const {\r\n        status\r\n    } = productResponse\r\n    return (\r\n        <Box className=\"rounded-[10px] border border-muted p-4\">\r\n            <div>\r\n                <Title as=\"h3\" className=\"text-[#848BD4] font-medium xl:text-lg\">Product Status</Title>\r\n                <div className=\"flex items-center gap-3\">\r\n                    <Badge\r\n                        renderAsDot\r\n                        color={status.toLowerCase() === 'active' ? 'success' : 'danger'}\r\n                        size=\"md\"\r\n                    />\r\n                    <Text>{productResponse.status}</Text>\r\n                </div>\r\n            </div>\r\n\r\n            <div>\r\n                <Title as=\"h3\" className=\"text-[#848BD4] font-medium xl:text-lg\">Online Store Status</Title>\r\n                <div className=\"flex items-center gap-3\">\r\n                    <Badge\r\n                        renderAsDot\r\n                        color={status.toLowerCase() === 'active' ? 'success' : 'danger'}\r\n                        size=\"md\"\r\n                    />\r\n                    <Text>Published</Text>\r\n                </div>\r\n            </div>\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\nconst ProductChangeBlock = ({ productResponse }: { productResponse: ProductSingleNode }) => {\r\n    const {\r\n        createdAt,\r\n        updatedAt\r\n    } = productResponse\r\n\r\n    return (\r\n        <Box className=\"rounded-[10px] border border-muted p-4 mt-5\">\r\n            <div>\r\n                <Title as=\"h3\" className=\"text-[#848BD4] font-medium xl:text-lg\">Last Updated</Title>\r\n                <div className=\"flex items-center gap-3\">\r\n                    <Text className=\"text-sm\">{formatDate(updatedAt)}</Text>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"mt-3\">\r\n                <Title as=\"h3\" className=\"text-[#848BD4] font-medium xl:text-lg\">Created At</Title>\r\n                <div className=\"flex items-center gap-3\">\r\n                    <Text className=\"text-sm\">{formatDate(createdAt)}</Text>\r\n                </div>\r\n            </div>\r\n        </Box>\r\n    )\r\n}","\r\nexport const DELETE_SELLING_PLAN_GROUP = `#graphql\r\nmutation sellingPlanGroupDelete($id: ID!) {\r\n  sellingPlanGroupDelete(id: $id) {\r\n    deletedSellingPlanGroupId\r\n    userErrors {\r\n      field\r\n      message\r\n    }\r\n  }\r\n}`;","import { ActionFunctionArgs, json, LoaderFunctionArgs, redirect } from '@remix-run/node';\r\nimport { useLoaderData } from '@remix-run/react';\r\nimport { getAuthCookie, mergeQueryParams } from 'app/packages/utils/cookieAuth';\r\nimport { authenticate } from 'app/shopify.server';\r\nimport { AdminApiContextWithoutRest } from 'node_modules/@shopify/shopify-app-remix/dist/ts/server/clients';\r\nimport { PRODUCT_SINGLE_QUERY } from 'app/graphql/queries/products/querySingleProduct';\r\nimport { generateGraphQLId, ShopifyObjectType } from 'app/packages/utils/shopifyIdUtils';\r\nimport { ProductSingleNode } from 'app/types/product/ProductNode';\r\nimport ProductEditMain from 'app/shared/products/product-edit';\r\nimport { useIsMounted } from 'app/packages/hooks/use-is-mounted';\r\nimport { CURRENT_APP_INSTALLATION } from 'app/graphql/queries/queryCurrentAppInstallation';\r\nimport { useAtom } from 'jotai';\r\nimport { productAtom } from 'app/states/productAtom';\r\nimport { useEffect } from 'react';\r\nimport { CURRENT_SHOP } from 'app/graphql/queries/queryShop';\r\nimport { ERROR_MESSAGES } from './merchant.products_.$productId_.plans';\r\nimport createPlanAPIUtils from 'app/shared/products/create-plans/createPlanAPIUtils';\r\nimport createRecurringPlanUtils from 'app/shared/products/create-plans/createRecurringPlanUtility';\r\nimport { UPDATE_SELLING_PLAN_GROUP } from 'app/graphql/mutations/sellingPlans/sellingPlanGroupUpdate';\r\nimport createOnetimePlanUtils from 'app/shared/products/create-plans/createOneTimePlanUtils';\r\nimport { shopObject } from 'app/states/shopAtom';\r\nimport { DELETE_SELLING_PLAN_GROUP } from 'app/graphql/mutations/sellingPlans/sellingPlanGroupDelete';\r\n\r\nexport const loader = async ({\r\n  request,\r\n  params\r\n}: LoaderFunctionArgs) => {\r\n  const cookieHeader = request.headers.get(\"Cookie\");\r\n  const authData = await getAuthCookie(cookieHeader);\r\n  if (!authData) {\r\n    throw redirect(\"/auth/login\");\r\n  }\r\n  const updatedRequest = mergeQueryParams(request, authData.query);\r\n  await authenticate.admin(updatedRequest);\r\n  const response = await authenticate.admin(updatedRequest);\r\n  const { productId } = params;\r\n  if (!response || !response.admin || !productId) {\r\n    throw new Error(\"Authentication failed: Admin data missing\");\r\n  }\r\n  const { admin } = response;\r\n  const criticalData = await loadCriticalData(admin, parseInt(productId));\r\n\r\n  return {\r\n    apiKey: process.env.SHOPIFY_API_KEY || \"\",\r\n    product: criticalData.product as ProductSingleNode,\r\n  };\r\n\r\n};\r\n\r\nconst handleUpdatePlanOrder = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  formData: FormData\r\n) => {\r\n  const variables = generateReOrderVariables(formData);\r\n  const result = await createPlanAPIUtils.executeShopifyMutation(\r\n    UPDATE_SELLING_PLAN_GROUP,\r\n    admin,\r\n    variables\r\n  );\r\n  const userErrors = result?.data?.sellingPlanGroupCreate?.userErrors || [];\r\n  if (userErrors.length > 0) {\r\n    return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n  }\r\n\r\n  return json({ success: true }, { status: 200 });\r\n\r\n}\r\n\r\nconst generateReOrderVariables = (\r\n  formData: FormData\r\n) => {\r\n  const plansString = formData.get(\"plans\")?.toString();\r\n  const groupId = formData.get(\"groupId\")?.toString();\r\n  const sellingPlans = plansString ? JSON.parse(plansString) : [];\r\n  const variables = createRecurringPlanUtils.createVariablesSellingPlanReorder(groupId as string, sellingPlans);\r\n  return variables;\r\n}\r\n\r\nconst generateUpdateOneTimeVariables = (\r\n  formData: FormData\r\n) => {\r\n  const plansString = formData.get(\"plans\")?.toString();\r\n\r\n  if (!plansString) {\r\n    return json({ error: ERROR_MESSAGES.REQUIRED_PARAMS_MISSING }, { status: 400 });\r\n  }\r\n\r\n  const sellingPlanGroup = JSON.parse(plansString)\r\n  const variables = createOnetimePlanUtils.createGraphQLVariablesOneTimesUpdate(sellingPlanGroup);\r\n  return variables;\r\n}\r\n\r\nconst handleUpdateOneTimePlan = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  formData: FormData\r\n) => {\r\n  const variables = generateUpdateOneTimeVariables(formData);\r\n  const result = await createPlanAPIUtils.executeShopifyMutation(\r\n    UPDATE_SELLING_PLAN_GROUP,\r\n    admin,\r\n    variables\r\n  );\r\n  const userErrors = result?.data?.sellingPlanGroupUpdate?.userErrors || [];\r\n  if (userErrors.length > 0) {\r\n    return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n  }\r\n\r\n  return json({ success: true }, { status: 200 });\r\n}\r\n\r\nconst generateDeleteGroupVariables = (\r\n  formData: FormData\r\n) => {\r\n  const sellingPlanGroupId = formData.get(\"groupId\")?.toString();\r\n  return {\r\n    variables: {\r\n      id: sellingPlanGroupId\r\n    }\r\n  }\r\n}\r\n\r\nconst handleDeleteOneTimePlan = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  formData: FormData\r\n) => {\r\n  const variables = generateDeleteGroupVariables(formData);\r\n  const result = await createPlanAPIUtils.executeShopifyMutation(\r\n    DELETE_SELLING_PLAN_GROUP,\r\n    admin,\r\n    variables\r\n  );\r\n  const userErrors = result?.data?.sellingPlanGroupUpdate?.userErrors || [];\r\n  if (userErrors.length > 0) {\r\n    return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n  }\r\n\r\n  return json({ success: true }, { status: 200 });\r\n}\r\n\r\nconst generateDeleteSellingPlanVariables = (formData: FormData, isDeleteGroup: boolean) => {\r\n  if (isDeleteGroup) {\r\n    return generateDeleteGroupVariables(formData)\r\n  }\r\n  const sellingPlanId = formData.get(\"sellingPlanId\");\r\n  const groupId = formData.get(\"groupId\");\r\n  return {\r\n    variables: {\r\n      id: groupId,\r\n      input: {\r\n        sellingPlansToDelete: [sellingPlanId]\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\r\nconst handleDeletePayPerShipmentPlan = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  formData: FormData,\r\n  isDeleteGroup: boolean = false\r\n) => {\r\n  const variables = generateDeleteSellingPlanVariables(formData, isDeleteGroup);\r\n  console.log('variables for delete' ,variables);\r\n  const query = isDeleteGroup ? DELETE_SELLING_PLAN_GROUP : UPDATE_SELLING_PLAN_GROUP\r\n  const result = await createPlanAPIUtils.executeShopifyMutation(\r\n    query,\r\n    admin,\r\n    variables\r\n  );\r\n\r\n  console.log('result for delete' ,result);\r\n  const userErrors = result?.data?.sellingPlanGroupUpdate?.userErrors || [];\r\n  if (userErrors.length > 0) {\r\n    return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n  }\r\n\r\n  return json({ success: true }, { status: 200 });\r\n}\r\n\r\nconst handleUpdatePayPerShipmentPlan = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  formData: FormData,\r\n) => {\r\n  const variables = generateUpdatePlanVariables(formData);\r\n  const result = await createPlanAPIUtils.executeShopifyMutation(\r\n    UPDATE_SELLING_PLAN_GROUP,\r\n    admin,\r\n    variables\r\n  );\r\n\r\n  console.log('result', JSON.stringify(result))\r\n  const userErrors = result?.data?.sellingPlanGroupCreate?.userErrors || [];\r\n  if (userErrors.length > 0) {\r\n    return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n  }\r\n\r\n  return json({ success: true }, { status: 200 });\r\n}\r\n\r\nconst generateUpdatePlanVariables = (\r\n  formData: FormData\r\n) => {\r\n  const plansString = formData.get(\"plans\")?.toString();\r\n  const groupId = formData.get(\"groupId\")?.toString();\r\n  const sellingPlans = plansString ? JSON.parse(plansString) : [];\r\n  const variables = createRecurringPlanUtils.createVariablesSellingPlanUpdate(groupId as string, sellingPlans);\r\n  return variables;\r\n}\r\n\r\nexport async function action({\r\n  request,\r\n  params\r\n}: ActionFunctionArgs) {\r\n  if (request.method !== \"POST\") {\r\n    return json({ error: ERROR_MESSAGES.METHOD_NOT_ALLOWED }, { status: 405 });\r\n  }\r\n\r\n  try {\r\n    const admin = await createPlanAPIUtils.authenticateRequest(request);\r\n    if (!admin) return json({ error: ERROR_MESSAGES.UNAUTHORIZED }, { status: 401 });\r\n    const formData = await request.formData();\r\n    const action = formData.get(\"action\")?.toString();\r\n    if (!action) return json({ error: ERROR_MESSAGES.REQUIRED_PARAMS_MISSING }, { status: 400 });\r\n    let response;\r\n    switch (action) {\r\n      case 'updatePlanOrder':\r\n        response = await handleUpdatePlanOrder(admin, formData);\r\n        break;\r\n      case 'updateOneTimePlan':\r\n        response = await handleUpdateOneTimePlan(admin, formData);\r\n        break;\r\n      case 'deleteOneTimePlan':\r\n        response = await handleDeleteOneTimePlan(admin, formData);\r\n        break;\r\n      case 'deletePayPerShipmentPlan':\r\n        response = await handleDeletePayPerShipmentPlan(admin, formData);\r\n        break;\r\n      case 'deletePayPerShipmentPlanGroup':\r\n        response = await handleDeletePayPerShipmentPlan(admin, formData, true);\r\n        break;\r\n      case 'updatePayPerShipmentPlan':\r\n        response = await handleUpdatePayPerShipmentPlan(admin, formData);\r\n        break;\r\n      default:\r\n        return json({ error: ERROR_MESSAGES.ACTION_NOT_FOUND }, { status: 402 });\r\n    }\r\n\r\n    return response;\r\n\r\n  } catch (error) {\r\n    console.error(\"Unexpected error:\", error);\r\n    return json({ error: ERROR_MESSAGES.INTERNAL_SERVER_ERROR }, { status: 500 });\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Load data necessary for rendering content above the fold. This is the critical data\r\n * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.\r\n * @param {AdminInstance}\r\n */\r\nconst loadCriticalData = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  productId: number\r\n) => {\r\n  try {\r\n    const variables = generateVariables(productId);\r\n    // Run both GraphQL queries in parallel\r\n    const [\r\n      productResponse,\r\n      appResponse,\r\n      shopResponse\r\n    ] = await Promise.all([\r\n      admin.graphql(PRODUCT_SINGLE_QUERY, variables),\r\n      admin.graphql(CURRENT_APP_INSTALLATION),\r\n      admin.graphql(CURRENT_SHOP),\r\n    ]);\r\n    const [\r\n      { data: { product } },\r\n      { data: { currentAppInstallation } },\r\n      { data: { shop } }\r\n    ] = await Promise.all([\r\n      productResponse.json(),\r\n      appResponse.json(),\r\n      shopResponse.json(),\r\n    ]);\r\n\r\n    // Attach `currentAppInstallation` to the product\r\n    return { product: { ...product, currentAppInstallation, shop } };\r\n\r\n  } catch (error) {\r\n    console.error(\"Error loading critical data:\", error);\r\n    throw new Error(\"Failed to load critical product data\");\r\n  }\r\n};\r\n\r\nconst generateVariables = (productId: number) => {\r\n  const graphqlProductId = generateGraphQLId(\r\n    productId,\r\n    ShopifyObjectType.Product\r\n  );\r\n  return {\r\n    variables: {\r\n      id: graphqlProductId\r\n    }\r\n  }\r\n}\r\n\r\nconst ProductEdit = () => {\r\n  const { apiKey, product } = useLoaderData<typeof loader>();\r\n  const [, setProduct] = useAtom(productAtom);\r\n  const [, setShopObject] = useAtom(shopObject);\r\n  useEffect(() => {\r\n    if (product) {\r\n      setProduct(product);\r\n      setShopObject(product.shop);\r\n    }\r\n  }, [product, setProduct]);\r\n\r\n  const isMounted = useIsMounted();\r\n  if (!isMounted) {\r\n    return null;\r\n  }\r\n\r\n  if (!product) {\r\n    return <div>Product not found</div>\r\n  }\r\n  return <ProductEditMain\r\n    productResponse={product}\r\n  />\r\n}\r\n\r\nexport default ProductEdit","import { ActionFunction } from '@remix-run/node';\r\n\r\nimport db from '../db.server';\r\nimport { authenticate } from 'app/shopify.server';\r\n\r\n\r\nexport const action: ActionFunction = async ({ request }) => {\r\n    const { topic, shop, session } = await authenticate.webhook(request);\r\n\r\n    switch (topic) {\r\n       case 'PRODUCTS_UPDATE':\r\n            const body = await request.json();\r\n            console.log(`Received ${topic} webhook for ${shop}`);\r\n        default:\r\n            throw new Response('Unhandled webhook topic', { status: 404 });\r\n    }\r\n\r\n    throw new Response();\r\n};\r\n","export const createWebhooksHandler = async (\r\n    topic: string,\r\n    shop: string,\r\n    session: any\r\n) => {\r\n    console.log(topic, shop, session);\r\n\r\n}","import type { ActionFunctionArgs } from \"@remix-run/node\";\r\nimport { authenticate } from \"../shopify.server\";\r\nimport db from \"../db.server\";\r\nimport { createWebhooksHandler } from \"app/webhookHandlers/createWebhooksHandler\";\r\n\r\nexport const action = async ({ request }: ActionFunctionArgs) => {\r\n    const { payload, session, topic, shop } = await authenticate.webhook(request);\r\n    console.log(`Received ${topic} webhook for ${shop}`);\r\n    createWebhooksHandler(topic, shop, session);\r\n    const current = payload.current as string[];\r\n    if (session) {\r\n        await db.session.update({   \r\n            where: {\r\n                id: session.id\r\n            },\r\n            data: {\r\n                scope: current.toString(),\r\n            },\r\n        });\r\n    }\r\n    return new Response();\r\n};\r\n","import type { ActionFunctionArgs } from \"@remix-run/node\";\r\nimport { authenticate } from \"../shopify.server\";\r\nimport db from \"../db.server\";\r\n\r\nexport const action = async ({ request }: ActionFunctionArgs) => {\r\n  const { shop, session, topic } = await authenticate.webhook(request);\r\n\r\n  console.log(`Received ${topic} webhook for ${shop}`);\r\n\r\n  // Webhook requests can trigger multiple times and after an app has already been uninstalled.\r\n  // If this webhook already ran, the session may have been deleted previously.\r\n  if (session) {\r\n    await db.session.deleteMany({ where: { shop } });\r\n  }\r\n\r\n  return new Response();\r\n};\r\n","import { PAGE_INFO_FRAGMENT } from \"app/graphql/fragments/pageInfo\";\r\n\r\nexport const SUBSCRIPTION_CONTRACTS_QUERY = `#graphql\r\n ${PAGE_INFO_FRAGMENT}\r\nquery SubscriptionContracts(\r\n    $first: Int\r\n    $after: String\r\n    $before: String\r\n    $last: Int\r\n    $query: String\r\n    $reverse: Boolean\r\n) {\r\n   subscriptionContracts(\r\n      first: $first\r\n      after: $after\r\n      before: $before\r\n      last: $last\r\n      query: $query\r\n      reverse: $reverse\r\n   ){\r\n        edges{\r\n            cursor\r\n            node{\r\n                id\r\n                lines(first: 10){\r\n                    edges{\r\n                        cursor\r\n                        node{\r\n                            variantTitle\r\n                            quantity\r\n                            lineDiscountedPrice{\r\n                                amount\r\n                                currencyCode\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                deliveryPolicy{\r\n                    interval\r\n                    intervalCount\r\n                }\r\n                billingPolicy{\r\n                    intervalCount\r\n                    interval\r\n                }\r\n                customer{\r\n                    firstName\r\n                    lastName\r\n                    email\r\n                    displayName\r\n                }\r\n                status\r\n                nextBillingDate\r\n                createdAt\r\n                updatedAt\r\n            }\r\n        }\r\n        pageInfo{\r\n            ...PageInfo\r\n        }\r\n    }\r\n}`;\r\n","\"use client\";\n\nimport { type Table as ReactTableType } from \"@tanstack/react-table\";\nimport {\n  ActionIcon,\n  Box,\n  Flex,\n  Grid,\n  Select,\n  SelectOption,\n  Text,\n} from \"rizzui\";\nimport {\n  PiCaretLeftBold,\n  PiCaretRightBold,\n  PiCaretDoubleLeftBold,\n  PiCaretDoubleRightBold,\n} from \"react-icons/pi\";\nimport cn from \"app/packages/utils/class-names\";\nimport { PageInfo } from \"app/types/product/ProductNode\";\n\nconst options = [\n  { value: 5, label: \"5\" },\n  { value: 10, label: \"10\" },\n  { value: 50, label: \"50\" },\n  { value: 100, label: \"100\" },\n  { value: 250, label: \"250\" },\n];\n\nexport default function TablePagination<TData extends Record<string, any>>({\n  table,\n  showSelectedCount = false,\n  className,\n  onPageSizeChange,\n  onPageChange,\n  pageInfo\n}: {\n  table: ReactTableType<TData>;\n  showSelectedCount?: boolean;\n  className?: string;\n  onPageSizeChange?: (newSize: number) => void;\n  onPageChange?: (cursor: string | null, direction: \"prev\" | \"next\") => void;\n  pageInfo: PageInfo\n}) {\n  const { endCursor, hasNextPage, hasPreviousPage, startCursor } = pageInfo\n\n  // Handle Page Size Change\n  const handlePageSizeChange = (v: SelectOption) => {\n    if (onPageSizeChange) {\n      table.setPageSize(Number(v.value));\n      onPageSizeChange(Number(v.value)); // Calls API when the value is changed\n    }\n  };\n\n  return (\n    <Flex\n      gap=\"6\"\n      align=\"center\"\n      justify=\"between\"\n      className={cn(\"container\", className)}\n    >\n      <Flex align=\"center\" className=\"w-auto shrink-0\">\n        <Text className=\"hidden font-normal text-gray-600 md:block\">\n          Rows per page\n        </Text>\n        <Select\n          size=\"sm\"\n          variant=\"flat\"\n          options={options}\n          className=\"w-13\"\n          value={table.getState().pagination.pageSize}\n          onChange={handlePageSizeChange}\n          suffixClassName=\"[&>svg]:size-3\"\n          selectClassName=\"font-semibold text-xs ring-0 shadow-sm h-7\"\n          optionClassName=\"font-medium text-xs px-2 justify-center\"\n        />\n      </Flex>\n\n      {showSelectedCount && (\n        <Box className=\"hidden @2xl:block w-full\">\n          <Text>\n            {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n            {table.getFilteredRowModel().rows.length} row(s) selected.\n          </Text>\n        </Box>\n      )}\n\n      {\n        (hasNextPage || hasPreviousPage) && (\n          <Flex justify=\"end\" align=\"center\">\n            <Text className=\"hidden font-normal text-gray-600 3xl:block\">\n              Page {table.getState().pagination.pageIndex + 1} of{\" \"}\n              {table.getPageCount().toLocaleString()}\n            </Text>\n            <Grid gap=\"2\" columns=\"2\">\n              <ActionIcon\n                size=\"sm\"\n                rounded=\"lg\"\n                variant={\"outline\" as any}\n                aria-label=\"Go to previous page\"\n                onClick={() => onPageChange?.(startCursor, \"prev\")}\n                disabled={!hasPreviousPage}\n                className=\"text-gray-900 shadow-sm disabled:text-gray-400 disabled:shadow-none\"\n              >\n                <PiCaretLeftBold className=\"size-3.5\" />\n              </ActionIcon>\n              <ActionIcon\n                size=\"sm\"\n                rounded=\"lg\"\n                variant={\"outline\" as any}\n                aria-label=\"Go to next page\"\n                onClick={() => onPageChange?.(endCursor, \"next\")}\n                disabled={!hasNextPage}\n                className=\"text-gray-900 shadow-sm disabled:text-gray-400 disabled:shadow-none\"\n              >\n                <PiCaretRightBold className=\"size-3.5\" />\n              </ActionIcon>\n            </Grid>\n          </Flex>\n        )}\n    </Flex>\n  );\n}\n","'use client';\n\nimport { createColumnHelper } from '@tanstack/react-table';\nimport { SubscriptionContractSubscriptionStatus, TableData, TransformedContract } from 'app/types/subscription/subscriptionQueryTypes';\nimport { Badge, Box, Button, Checkbox, Dropdown, Flex, Text } from 'rizzui';\nimport { BsCalendarDate } from \"react-icons/bs\";\nimport { GoPencil } from \"react-icons/go\";\nimport { MdOutlineCancel } from \"react-icons/md\";\nimport { FaRegTrashAlt } from \"react-icons/fa\";\nimport { formatDate } from 'app/packages/utils/shopifyIdUtils';\nimport { Link } from '@remix-run/react';\n\nconst columnHelper = createColumnHelper<TableData>();\n\nexport const contractColumns = [\n\n  columnHelper.display({\n    id: 'select',\n    size: 50,\n    header: ({ table }) => (\n      <Checkbox\n        className=\"ps-3.5\"\n        aria-label=\"Select all rows\"\n        checked={table.getIsAllPageRowsSelected()}\n        onChange={() => table.toggleAllPageRowsSelected()}\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        className=\"ps-3.5\"\n        aria-label=\"Select row\"\n        checked={row.getIsSelected()}\n        onChange={() => row.toggleSelected()}\n      />\n    ),\n  }),\n\n  columnHelper.accessor('id', {\n    id: 'subscripitionId',\n    size: 200,\n    header: 'Subscription ID',\n    cell: ({ row }) => <Link to={`${row.original.id}`} className=\"text-sm text-primary\">{row.original.id}</Link>,\n  }),\n\n  columnHelper.display({\n    id: 'variantTitle',\n    size: 200,\n    header: 'Product/Variant',\n    cell: ({ row }) => <Text className=\"text-sm\">{row.original.variantTitle}</Text>,\n  }),\n\n  columnHelper.display({\n    id: 'price',\n    size: 150,\n    header: 'Price',\n    cell: ({ row }) => {\n      const price = row.original.lineDiscountedPrice\n      return (\n        <Text className=\"text-sm\">\n          {price}\n        </Text>\n      )\n    },\n  }),\n\n  columnHelper.display({\n    id: 'quantity',\n    size: 100,\n    header: 'Quantity',\n    cell: ({ row }) => <Text className=\"text-sm\">{row.original.quantity}</Text>,\n  }),\n\n  columnHelper.display({\n    id: 'deliveryPolicy',\n    size: 200,\n    header: 'Delivery Policy',\n    cell: ({ row }) => (\n      <Box>\n        <Text className=\"text-sm\">\n          {`Ships every ${row.original.deliveryPolicyIntervalCount} ${row.original.deliveryPolicyInterval.toLowerCase()}`}\n        </Text>\n        <Text className=\"text-sm\">\n          {`Charges ${row.original.billingPolicyIntervalCount} ${row.original.billingPolicyInterval.toLowerCase()}`}\n        </Text>\n      </Box>\n    ),\n  }),\n\n  columnHelper.display({\n    id: 'nextBillingDate',\n    size: 250,\n    header: 'Next Charge Date',\n    cell: ({ row }) => {\n      const nextChargeDate = row.original.nextBillingDate;\n      const convertedDate = formatDate(nextChargeDate);\n      return (\n        <Box className='flex flex-col'>\n          <Text className=\"text-sm\">\n            {convertedDate}\n          </Text>\n        </Box>\n      )\n    }\n  }),\n\n  columnHelper.display({\n    id: 'customer',\n    size: 250,\n    header: 'Customer',\n    cell: ({ row }) => (\n      <Box className='flex flex-col'>\n        <Text className=\"text-sm\">\n          {`${row.original.customerName}`}\n        </Text>\n        <Text className=\"text-sm\">{row.original.customerEmail}</Text>\n      </Box>\n    ),\n  }),\n\n  columnHelper.display({\n    id: 'status',\n    size: 250,\n    header: 'Status',\n    cell: ({ row }) => {\n      const status = row.original.status as SubscriptionContractSubscriptionStatus\n\n      // Map status to badge colors\n      const statusColors: Record<SubscriptionContractSubscriptionStatus, string> = {\n        [SubscriptionContractSubscriptionStatus.ACTIVE]: \"success\",\n        [SubscriptionContractSubscriptionStatus.CANCELLED]: \"danger\",\n        [SubscriptionContractSubscriptionStatus.EXPIRED]: \"gray\",\n        [SubscriptionContractSubscriptionStatus.FAILED]: \"warning\",\n        [SubscriptionContractSubscriptionStatus.PAUSED]: \"info\",\n      };\n      return (\n        <Box className='flex gap-3 items-center'>\n          <Badge renderAsDot color={statusColors[status] as any} />\n          <Text className='capitalize'>{status}</Text>\n        </Box>\n      )\n    }\n  }),\n\n\n  columnHelper.display({\n    id: 'actions',\n    size: 100,\n    header: 'Actions',\n    cell: ({ row }) => {\n      const subscripition = row.original\n      return (\n        <SubscriptionActions subscripition={subscripition} />\n      )\n    }\n  }),\n];\n\n\nconst SubscriptionActions = ({ subscripition }: { subscripition: TransformedContract }) => {\n\n  const actionItems = [\n    { icon: <BsCalendarDate />, label: \"Reschedule next order\" },\n    { icon: <GoPencil />, label: \"Edit frequency\" },\n    { icon: <GoPencil />, label: \"Edit subscription product\" },\n    { icon: <MdOutlineCancel />, label: \"Cancel\" },\n    { icon: <FaRegTrashAlt />, label: \"Delete\" }\n  ];\n  return (\n    <Dropdown>\n      <Dropdown.Trigger>\n        <Button\n          as='span'\n          color='primary'\n          variant={\"text\" as any}\n        >\n          <Text className='text-primary text-sm'>Actions</Text>\n        </Button>\n      </Dropdown.Trigger>\n      <Dropdown.Menu className='min-w-[285px]'>\n        {actionItems.map(({ icon, label }, index) => (\n          <Dropdown.Item key={index}>\n            <Flex align='center' gap='2'>\n              {icon && <span className=\"mr-2\">{icon}</span>}\n              <Text>{label}</Text>\n            </Flex>\n          </Dropdown.Item>\n        ))}\n      </Dropdown.Menu>\n    </Dropdown>\n  )\n}","\"use client\";\n\nimport { Button, Text } from \"rizzui\";\nimport { Table as ReactTableType } from \"@tanstack/react-table\";\n\ninterface TableToolbarProps<TData extends Record<string, any>> {\n  table: ReactTableType<TData>;\n  showDownloadButton?: boolean;\n  onExport?: () => void;\n}\n\nexport default function TableFooter<TData extends Record<string, any>>({\n  table,\n  showDownloadButton = true,\n  onExport,\n}: TableToolbarProps<TData>) {\n  const checkedItems = table\n    .getSelectedRowModel()\n    .rows.map((row) => row.original);\n  const meta = table.options.meta;\n\n  if (checkedItems.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className=\"sticky bottom-0 left-0 z-10 mt-2.5 flex w-full items-center justify-between rounded-md border border-gray-300 bg-gray-0 px-5 py-3.5 text-gray-900 shadow-sm dark:border-gray-300 dark:bg-gray-100 dark:text-white dark:active:bg-gray-100\">\n      <div>\n        <Text as=\"strong\">{checkedItems.length}</Text>\n        {checkedItems.length >= 2 ? \" Categories\" : \" Category\"} selected{\" \"}\n        <Button\n          size=\"sm\"\n          variant=\"text\"\n          className=\"underline\"\n          color=\"danger\"\n          onClick={() => meta?.handleMultipleDelete?.(checkedItems)}\n        >\n          Delete Them\n        </Button>\n      </div>\n      {showDownloadButton && (\n        <Button\n          size=\"sm\"\n          onClick={onExport}\n          className=\"dark:bg-gray-300 dark:text-gray-800\"\n        >\n          Download {checkedItems.length}{\" \"}\n          {checkedItems.length > 1 ? \"Items\" : \"Item\"}\n        </Button>\n      )}\n    </div>\n  );\n}\n","import { useNavigate, useSearchParams } from '@remix-run/react';\r\n\r\nexport const usePaginationAndFilterHandlers = () => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const navigate = useNavigate();\r\n\r\n  // Function to trigger GraphQL API reload when page size changes\r\n  const handlePageSizeChange = (newSize: number) => {\r\n    searchParams.set(\"first\", newSize.toString());\r\n    navigate(`?${searchParams.toString()}`); // Triggers Remix loader to fetch new data\r\n  };\r\n\r\n  // Handle Pagination Changes (Single `action` Param)\r\n  const handlePageChange = (cursor: string | null, action: \"next\" | \"prev\") => {\r\n    if (cursor) {\r\n      searchParams.set(\"action\", action);\r\n      searchParams.set(\"cursor\", cursor);\r\n    } else {\r\n      searchParams.delete(\"action\");\r\n      searchParams.delete(\"cursor\");\r\n    }\r\n    navigate(`?${searchParams.toString()}`);\r\n  };\r\n\r\n  const handleStatusChange = (selectedStatus: string | null) => {\r\n    const queryFilter = selectedStatus ? selectedStatus : null;\r\n    if (queryFilter) {\r\n      searchParams.set(\"status\", queryFilter);\r\n    } else {\r\n      searchParams.delete(\"status\");\r\n    }\r\n\r\n    navigate(`?${searchParams.toString()}`);\r\n  };\r\n\r\n  const handlePublishedStatusChange = (selectedStatus: string | null) => {\r\n    const queryFilter = selectedStatus ? selectedStatus : null;\r\n    if (queryFilter) {\r\n      searchParams.set(\"onlineStoreStatus\", queryFilter);\r\n    } else {\r\n      searchParams.delete(\"onlineStoreStatus\");\r\n    }\r\n    navigate(`?${searchParams.toString()}`);\r\n  };\r\n\r\n  const handleUpdatedDateChange = (selectedStatus: string | null) => {\r\n    const queryFilter = selectedStatus ? selectedStatus : null;\r\n    if (queryFilter) {\r\n      searchParams.set(\"updatedAt\", queryFilter);\r\n    } else {\r\n      searchParams.delete(\"updatedAt\");\r\n    }\r\n    navigate(`?${searchParams.toString()}`);\r\n  };\r\n\r\n  const handleCreatedDateChange = (selectedStatus: string | null) => {\r\n    const queryFilter = selectedStatus ? selectedStatus : null;\r\n    if (queryFilter) {\r\n      searchParams.set(\"createdAt\", queryFilter);\r\n    } else {\r\n      searchParams.delete(\"createdAt\");\r\n    }\r\n    navigate(`?${searchParams.toString()}`);\r\n  };\r\n\r\n  const handleQuerySearch = (query: string, type = \"query\", SearchByOptions: { label: string; value: string }[] = []) => {\r\n    if (SearchByOptions && SearchByOptions.length) {\r\n      SearchByOptions.forEach(option => searchParams.delete(option.value));\r\n    }\r\n    if (query) {\r\n      searchParams.set(type, query);\r\n    } else {\r\n      searchParams.delete(type);\r\n    }\r\n    navigate(`?${searchParams.toString()}`);\r\n  };\r\n\r\n  const handleLastBillingAttemptErrorChange = (selectedStatus: string | null) => {\r\n    const queryFilter = selectedStatus ? selectedStatus : null;\r\n    if (queryFilter) {\r\n      searchParams.set(\"lastBillingAttemptError\", queryFilter);\r\n    } else {\r\n      searchParams.delete(\"lastBillingAttemptError\");\r\n    }\r\n    navigate(`?${searchParams.toString()}`);\r\n  };\r\n\r\n  return {\r\n    handlePageSizeChange,\r\n    handlePageChange,\r\n    handleStatusChange,\r\n    handlePublishedStatusChange,\r\n    handleQuerySearch,\r\n    handleUpdatedDateChange,\r\n    handleCreatedDateChange,\r\n    handleLastBillingAttemptErrorChange\r\n  };\r\n};","\"use client\";\n\nimport { Select, type SelectProps, type SelectOption } from \"rizzui\";\nimport cn from \"app/packages/utils/class-names\";\n\nexport default function StatusField({\n  placeholder = \"Select status\",\n  dropdownClassName,\n  ...props\n}: SelectProps<SelectOption>) {\n  return (\n    <Select\n      inPortal={false}\n      placeholder={placeholder}\n      selectClassName=\"h-9 min-w-[150px]\"\n      dropdownClassName={cn(\"p-1.5 !z-0\", dropdownClassName)}\n      optionClassName=\"h-9\"\n      {...props}\n    />\n  );\n}\n","\"use client\";\n\nimport React, { useState } from \"react\";\nimport { PiMagnifyingGlassBold, PiFunnel, PiXBold } from \"react-icons/pi\";\nimport { Button, ActionIcon, Input, Title, Drawer } from \"rizzui\";\nimport cn from \"app/packages/utils/class-names\";\nimport { ToggleColumns } from \"app/packages/components/legacy-table\";\nimport useMediaQuery from \"app/packages/hooks/use-media\";\n\n// const Drawer = dynamic(() => import('rizzui').then((module) => module.Drawer), {\n//   ssr: false,\n// });\n\nexport function FilterDrawerView({\n  isOpen,\n  drawerTitle,\n  setOpenDrawer,\n  children,\n}: React.PropsWithChildren<{\n  drawerTitle?: string;\n  hasSearched?: boolean;\n  setOpenDrawer: React.Dispatch<React.SetStateAction<boolean>>;\n  isOpen?: boolean;\n}>) {\n  return (\n    <Drawer\n      size=\"sm\"\n      isOpen={isOpen ?? false}\n      onClose={() => setOpenDrawer(false)}\n      overlayClassName=\"dark:bg-opacity-40 dark:backdrop-blur-md\"\n      containerClassName=\"dark:bg-gray-100\"\n      className=\"z-[9999]\"\n    >\n      <div className=\"flex h-full flex-col p-5\">\n        <div className=\"-mx-5 mb-6 flex items-center justify-between border-b border-muted px-5 pb-4\">\n          <Title as=\"h5\">{drawerTitle}</Title>\n          <ActionIcon\n            size=\"sm\"\n            rounded=\"full\"\n            variant={\"text\" as any}\n            title={\"Close Filter\"}\n            onClick={() => setOpenDrawer(false)}\n          >\n            <PiXBold className=\"h-4 w-4\" />\n          </ActionIcon>\n        </div>\n        <div className=\"flex-grow\">\n          <div className=\"grid grid-cols-1 gap-6 [&_.price-field>span.mr-2]:mb-1.5 [&_.price-field]:flex-col [&_.price-field]:items-start [&_.react-datepicker-wrapper]:w-full [&_.react-datepicker-wrapper_.w-72]:w-full [&_.text-gray-500]:text-gray-700 [&_button.h-9]:h-10 sm:[&_button.h-9]:h-11 [&_label>.h-9]:h-10 sm:[&_label>.h-9]:h-11 [&_label>.w-24.h-9]:w-full\">\n            {children}\n          </div>\n        </div>\n        <Button\n          size=\"lg\"\n          onClick={() => setOpenDrawer(false)}\n          className=\"mt-5 h-11 w-full text-sm\"\n        >\n          Show Results\n        </Button>\n      </div>\n    </Drawer>\n  );\n}\n\nexport type TableFilterProps = {\n  searchTerm: string;\n  onSearchClear: () => void;\n  onSearchChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n  columns: { [key: string]: any }[];\n  checkedColumns: string[];\n  setCheckedColumns: React.Dispatch<React.SetStateAction<string[]>>;\n  hideIndex?: number;\n  children?: React.ReactNode;\n  drawerTitle?: string;\n  hasSearched?: boolean;\n  showSearchOnTheRight?: boolean;\n  enableDrawerFilter?: boolean;\n  menu?: React.ReactNode;\n};\n\nexport default function TableFilter({\n  searchTerm,\n  onSearchClear,\n  onSearchChange,\n  columns,\n  checkedColumns,\n  setCheckedColumns,\n  hideIndex,\n  drawerTitle = \"Table Filters\",\n  hasSearched,\n  enableDrawerFilter = false,\n  showSearchOnTheRight = false,\n  menu,\n  children,\n}: TableFilterProps) {\n  const isMediumScreen = useMediaQuery(\"(max-width: 1860px)\");\n  const [showFilters, setShowFilters] = useState(true);\n  const [openDrawer, setOpenDrawer] = useState(false);\n\n  return (\n    <div className=\"table-filter mb-4 flex items-center justify-between\">\n      <div className=\"flex flex-wrap items-center gap-4\">\n        {!showSearchOnTheRight ? (\n          <Input\n            type=\"search\"\n            placeholder=\"Search by anything...\"\n            value={searchTerm}\n            onClear={onSearchClear}\n            onChange={onSearchChange}\n            inputClassName=\"h-9\"\n            clearable={true}\n            prefix={<PiMagnifyingGlassBold className=\"h-4 w-4\" />}\n          />\n        ) : null}\n\n        {showSearchOnTheRight && enableDrawerFilter ? (\n          <>{menu ? menu : null}</>\n        ) : null}\n\n        {children && (\n          <>\n            {isMediumScreen || enableDrawerFilter ? (\n              <FilterDrawerView\n                isOpen={openDrawer}\n                setOpenDrawer={setOpenDrawer}\n                drawerTitle={drawerTitle}\n                hasSearched={hasSearched}\n              >\n                {children}\n              </FilterDrawerView>\n            ) : (\n              <>{showFilters ? children : null}</>\n            )}\n          </>\n        )}\n      </div>\n\n      <div className=\"ms-4 flex flex-shrink-0 items-center\">\n        {showSearchOnTheRight ? (\n          <Input\n            type=\"search\"\n            placeholder=\"Search by anything...\"\n            value={searchTerm}\n            onClear={onSearchClear}\n            onChange={onSearchChange}\n            inputClassName=\"h-9\"\n            clearable={true}\n            prefix={<PiMagnifyingGlassBold className=\"h-4 w-4\" />}\n            className=\"me-2.5\"\n          />\n        ) : null}\n\n        {children ? (\n          <Button\n            {...(isMediumScreen || enableDrawerFilter\n              ? {\n                  onClick: () => {\n                    setOpenDrawer(() => !openDrawer);\n                  },\n                }\n              : { onClick: () => setShowFilters(() => !showFilters) })}\n            variant={\"outline\" as any}\n            className={cn(\n              \"me-2.5 h-9 pe-3 ps-2.5\",\n              !(isMediumScreen || enableDrawerFilter) &&\n                showFilters &&\n                \"border-dashed border-gray-700\"\n            )}\n          >\n            <PiFunnel className=\"me-1.5 h-[18px] w-[18px]\" strokeWidth={1.7} />\n            {!(isMediumScreen || enableDrawerFilter) && showFilters\n              ? \"Hide Filters\"\n              : \"Filters\"}\n          </Button>\n        ) : null}\n\n        <ToggleColumns\n          columns={columns}\n          checkedColumns={checkedColumns}\n          setCheckedColumns={setCheckedColumns}\n          hideIndex={hideIndex}\n        />\n      </div>\n    </div>\n  );\n}\n","\"use client\";\n\nimport { PiTextColumns } from \"react-icons/pi\";\nimport { ActionIcon, Checkbox, Popover, Title } from \"rizzui\";\nimport { type Table as ReactTableType } from \"@tanstack/react-table\";\n\nexport default function ToggleColumns<TData extends Record<string, any>>({\n  table,\n}: {\n  table: ReactTableType<TData>;\n}) {\n  return (\n    <Popover shadow=\"sm\" placement=\"bottom-end\">\n      <Popover.Trigger>\n        <ActionIcon\n          variant=\"outline\"\n          title=\"Toggle Columns\"\n          className=\"h-9 p-1\"\n        >\n          <PiTextColumns strokeWidth={3} className=\"size-6\" />\n        </ActionIcon>\n      </Popover.Trigger>\n      <Popover.Content className=\"z-0\">\n        <div className=\"p-2 text-left rtl:text-right\">\n          <Title as=\"h6\" className=\"mb-6 px-0.5 text-sm font-semibold\">\n            Toggle Columns\n          </Title>\n          <div className=\"grid grid-cols-2 gap-6\">\n            {table.getAllLeafColumns().map((column) => {\n              return (\n                typeof column.columnDef.header === \"string\" &&\n                column.columnDef.header.length > 0 && (\n                  <Checkbox\n                    key={column.id}\n                    label={<>{column.columnDef.header}</>}\n                    checked={column.getIsVisible()}\n                    onChange={column.getToggleVisibilityHandler()}\n                  />\n                )\n              );\n            })}\n          </div>\n        </div>\n      </Popover.Content>\n    </Popover>\n  );\n}\n","import { useEffect, useState } from \"react\";\r\n\r\n/**\r\n * Custom hook to debounce a value change.\r\n * @param value - The input value to debounce.\r\n * @param delay - The debounce delay in milliseconds (default 300ms).\r\n * @returns The debounced value.\r\n */\r\nexport function useDebounce<T>(value: T, delay = 300): T {\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n\r\n    useEffect(() => {\r\n        const handler = setTimeout(() => {\r\n            setDebouncedValue(value);\r\n        }, delay);\r\n\r\n        return () => clearTimeout(handler);\r\n    }, [value, delay]);\r\n\r\n    return debouncedValue;\r\n}","export enum SubscriptionContractStatus {\r\n    ACTIVE = \"active\",\r\n    CANCELLED = \"cancelled\",\r\n    EXPIRED = \"expired\",\r\n    FAILED = \"failed\",\r\n    PAUSED = \"paused\",\r\n}\r\n\r\nexport const statusLabels: Record<SubscriptionContractStatus, string> = {\r\n    [SubscriptionContractStatus.ACTIVE]: \"Active\",\r\n    [SubscriptionContractStatus.CANCELLED]: \"Cancelled\",\r\n    [SubscriptionContractStatus.EXPIRED]: \"Expired\",\r\n    [SubscriptionContractStatus.FAILED]: \"Failed\",\r\n    [SubscriptionContractStatus.PAUSED]: \"Paused\",\r\n};\r\n\r\nexport type FiltersHandlerType = {\r\n    handleStatusChange: (selectedStatus: string | null) => void;\r\n    handleQuerySearch: (query: string, type?: string, SearchByOptions?: { label: string; value: string }[]) => void;\r\n    handleUpdatedDateChange: (date: string | null) => void;\r\n    handleCreatedDateChange: (date: string | null) => void;\r\n    handleLastBillingAttemptErrorChange: (selectedValue: string | null) => void;\r\n};\r\n\r\nexport enum SubscriptionContractLastBillingErrorType{\r\n    CUSTOMER_ERROR = \"CUSTOMER_ERROR\",\r\n    PAYMENT_ERROR = \"PAYMENT_ERROR\",\r\n    INVENTORY_ERROR = \"INVENTORY_ERROR\",\r\n    OTHER = \"OTHER\",\r\n}\r\n\r\nexport const lastBillingErrorTypeLabels: Record<SubscriptionContractLastBillingErrorType, string> = {\r\n    [SubscriptionContractLastBillingErrorType.CUSTOMER_ERROR]: \"Customer Error\",\r\n    [SubscriptionContractLastBillingErrorType.PAYMENT_ERROR]: \"Payment Error\",\r\n    [SubscriptionContractLastBillingErrorType.INVENTORY_ERROR]: \"Inventory Error\",\r\n    [SubscriptionContractLastBillingErrorType.OTHER]: \"Other\",\r\n};","'use client';\n\nimport DateFiled from 'app/packages/components/controlled-table/date-field';\nimport PriceField from 'app/packages/components/controlled-table/price-field';\nimport StatusField from 'app/packages/components/controlled-table/status-field';\nimport { FilterDrawerView } from 'app/packages/components/controlled-table/table-filter';\nimport ToggleColumns from 'app/packages/components/table-utils/toggle-columns';\nimport { getDateRangeStateValues } from 'app/packages/utils/get-formatted-date';\nimport { type Table as ReactTableType } from '@tanstack/react-table';\nimport { useEffect, useRef, useState } from 'react';\nimport {\n  PiFunnel,\n  PiMagnifyingGlassBold,\n  PiTrash,\n  PiTrashDuotone,\n} from 'react-icons/pi';\nimport { Badge, Box, Button, Flex, Input, Select, Text } from 'rizzui';\nimport { messages } from 'app/config/messages';\nimport { useSearchParams } from '@remix-run/react';\nimport { useDebounce } from 'app/packages/hooks/use-debounce';\nimport { basename } from 'path/posix';\nimport { FiltersHandlerType, lastBillingErrorTypeLabels, statusLabels, SubscriptionContractLastBillingErrorType, SubscriptionContractStatus } from './types';\nimport { DatePicker } from 'app/packages/ui/datepicker';\n\ninterface TableToolbarProps<T extends Record<string, any>> {\n  table: ReactTableType<T>;\n  filtersHanlder: FiltersHandlerType\n}\n\nexport default function Filters<TData extends Record<string, any>>({\n  table,\n  filtersHanlder\n}: TableToolbarProps<TData>) {\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const isMultipleSelected = table.getSelectedRowModel().rows.length > 1;\n  const {\n    options: { meta },\n  } = table;\n\n  const { handleQuerySearch, handleStatusChange } = filtersHanlder\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchValue, setSearchValue] = useState(searchParams.get('query') ?? \"\");\n  const debouncedSearch = useDebounce(searchValue, 300);\n  const [searchObj, setSearchObj] = useState({})\n  const [searchBy, setSearchBy] = useState<string>('')\n  const prevSearchByRef = useRef<string>();\n  const [placeholderMappingState, setPlaceholderMapping] = useState(\"Search for anything...\")\n\n\n\n  const SearchByOptions = [\n    { label: 'All', value: 'all' },\n    { label: 'Customer Email', value: 'customer_email' },\n    { label: 'Subscription ID', value: 'id' },\n    { label: 'Product ID', value: 'productId' },\n    { label: 'Variant ID', value: 'variantId' },\n  ];\n\n  const clearFilters = () => {\n    table.resetGlobalFilter();\n    table.resetColumnFilters();\n    setSearchValue(\"\");\n    handleQuerySearch(\"\");\n    handleStatusChange(null);\n    setSearchParams({});\n  };\n  const placeholderMapping: { [key: string]: string } = {\n    \"all\": 'Search for anything...',\n    \"customer_email\": 'johndoe@gmail.com',\n    \"id\": '12345',\n    \"productId\": 'Product ID 12345',\n    \"variantId\": 'Variant Id 12345',\n  };\n\n\n  const handleSearchValue = (value: string) => {\n    setSearchValue(value)\n  }\n\n  return (\n    <Flex align=\"center\" justify=\"between\" className=\"mb-4\">\n      <Box className='flex items-center gap-3 flex-grow'>\n        <Select\n          placeholder='Search By '\n          label=\"\"\n          options={SearchByOptions}\n          value={searchBy}\n          onChange={(option: any) => {\n            setSearchValue(\"\")\n            setPlaceholderMapping(placeholderMapping[option.value])\n            setSearchBy(option.value)\n          }}\n          className='w-[25%]'\n        />\n        <Input\n          type=\"search\"\n          placeholder={placeholderMappingState}\n          value={searchValue}\n          onClear={() => {\n            clearFilters();\n            setSearchValue('')\n          }}\n          onChange={(e) => handleSearchValue(e.target.value)}\n          inputClassName=\"h-9\"\n          clearable={true}\n          prefix={<PiMagnifyingGlassBold className=\"size-4\" />}\n          className='w-[50%]'\n        />\n\n        <Button\n          variant={\"flat\" as any}\n          onClick={() => {\n            SearchByOptions.forEach(option => searchParams.delete(option.value));\n            handleQuerySearch(debouncedSearch, searchBy, SearchByOptions);\n          }}\n          className=\"h-9\"\n        >\n          Search\n        </Button>\n      </Box>\n\n      <FilterDrawerView\n        isOpen={openDrawer}\n        drawerTitle={messages.products.filters.title}\n        setOpenDrawer={setOpenDrawer}\n      >\n        <div className=\"grid grid-cols-1 gap-6\">\n          <FilterElements table={table} filtersHanlder={filtersHanlder} />\n        </div>\n      </FilterDrawerView>\n\n      <Flex align=\"center\" gap=\"3\" className=\"w-auto\">\n        {isMultipleSelected ? (\n          <Button\n            color=\"danger\"\n            variant={\"outline\" as any}\n            className=\"h-[34px] gap-2 text-sm\"\n            onClick={() => { }}\n          >\n            <PiTrash size={18} />\n            Delete\n          </Button>\n        ) : null}\n\n        <Button\n          variant={\"outline\" as any}\n          onClick={() => setOpenDrawer(!openDrawer)}\n          className=\"h-9 pe-3 ps-2.5\"\n        >\n          <PiFunnel className=\"me-1.5 size-[18px]\" strokeWidth={1.7} />\n          Filters\n        </Button>\n\n        <Button variant={\"flat\" as any} className=\"h-9 bg-gray-200/70\" onClick={clearFilters}>\n          <PiTrashDuotone className=\"me-1.5 h-[17px] w-[17px]\" /> Clear Filters\n        </Button>\n\n        <ToggleColumns table={table} />\n      </Flex>\n    </Flex>\n  );\n}\n\nfunction FilterElements<T extends Record<string, any>>({\n  table,\n  filtersHanlder\n}: TableToolbarProps<T>) {\n\n  const { handleStatusChange, handleUpdatedDateChange, handleCreatedDateChange, handleLastBillingAttemptErrorChange } = filtersHanlder\n  const [searchParams] = useSearchParams();\n\n  // Generate status options array\n  const statusOptions = Object.values(SubscriptionContractStatus).map((status) => ({\n    value: status,\n    label: statusLabels[status],\n  }));\n\n  // Generate last billing attempt error\n  const lastBillingAttemptErrorOptions = Object.values(SubscriptionContractLastBillingErrorType).map((status) => ({\n    value: status,\n    label: lastBillingErrorTypeLabels[status],\n  }));\n\n  return (\n    <>\n      <StatusField\n        options={statusOptions}\n        value={searchParams.get('status')}\n        onChange={(value: string) => {\n          handleStatusChange(value);\n        }\n        }\n        getOptionValue={(option: { value: any }) => option.value}\n        getOptionDisplayValue={(option: { value: any }) =>\n          renderOptionDisplayValue(option.value)\n        }\n        displayValue={(selected: any) => renderOptionDisplayValue(selected)}\n        dropdownClassName=\"!z-20 h-auto top-15\"\n        className={'w-auto'}\n        label={`${messages.products.filters.status.title}`}\n      />\n      <DatePicker\n        selected={searchParams.get('updatedAt') ? new Date(searchParams.get('updatedAt')!) : null}\n        onChange={(date: Date | null) => {\n          const isoDate = date ? date.toISOString() : null;\n          handleUpdatedDateChange(isoDate);\n        }}\n        dateFormat=\"yyyy-MM-dd'T'HH:mm:ss'Z'\"\n        placeholderText=\"Select Updated Date\"\n        popperPlacement=\"bottom-end\"\n        showMonthYearPicker={false}\n        inputProps={{\n          variant: \"text\",\n          inputClassName:\n            \"rizzui-input-container flex items-center peer w-full transition duration-200 px-3.5 py-2 text-sm h-10 rounded-md border border-muted ring-muted bg-transparent\",\n          label: \"Select Updated Date\"\n        }}\n        className=\"w-full\"\n      />\n\n      <DatePicker\n        selected={searchParams.get('createdAt') ? new Date(searchParams.get('createdAt')!) : null}\n        onChange={(date: Date | null) => {\n          const isoDate = date ? date.toISOString() : null;\n          handleCreatedDateChange(isoDate);\n        }}\n        dateFormat=\"yyyy-MM-dd'T'HH:mm:ss'Z'\"\n        placeholderText=\"Select Created Date\"\n        popperPlacement=\"bottom-end\"\n        showMonthYearPicker={false}\n        inputProps={{\n          variant: \"text\",\n          inputClassName:\n            \"rizzui-input-container flex items-center peer w-full transition duration-200 px-3.5 py-2 text-sm h-10 rounded-md border border-muted ring-muted bg-transparent\",\n          label: \"Select Created Date\"\n        }}\n        className=\"w-full\"\n      />\n\n      <StatusField\n        options={lastBillingAttemptErrorOptions}\n        value={searchParams.get('lastBillingAttemptError')}\n        onChange={(value: string) => {\n          handleLastBillingAttemptErrorChange(value);\n        }\n        }\n        getOptionValue={(option: { value: any }) => option.value}\n        getOptionDisplayValue={(option: { value: any }) =>\n          renderBillingAttemptError(option.value)\n        }\n        displayValue={(selected: any) => renderBillingAttemptError(selected)}\n        dropdownClassName=\"!z-20 h-auto top-15\"\n        className={'w-auto'}\n        label={`Billing Attempt Error`}\n      />\n\n    </>\n  );\n}\n\nexport function renderBillingAttemptError(value: SubscriptionContractLastBillingErrorType) {\n  switch (value) {\n    case SubscriptionContractLastBillingErrorType.CUSTOMER_ERROR:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"warning\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-warning\">\n            Customer Error\n          </Text>\n        </div>\n      );\n    case SubscriptionContractLastBillingErrorType.INVENTORY_ERROR:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"danger\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-danger\">\n            Inventory Error\n          </Text>\n        </div>\n      );\n    case SubscriptionContractLastBillingErrorType.PAYMENT_ERROR:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"secondary\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-secondary\">\n            Payment Error\n          </Text>\n        </div>\n      );\n    case SubscriptionContractLastBillingErrorType.OTHER:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color={\"secondary\" as any} renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize\">\n            Other Error\n          </Text>\n        </div>\n      );\n  }\n}\n\n\nexport function renderOptionDisplayValue(value: SubscriptionContractStatus) {\n  switch (value) {\n    case SubscriptionContractStatus.ACTIVE:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"success\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-success\">\n            {statusLabels[value]}\n          </Text>\n        </div>\n      );\n    case SubscriptionContractStatus.CANCELLED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"warning\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-warning\">\n            {statusLabels[value]}\n          </Text>\n        </div>\n      );\n    case SubscriptionContractStatus.EXPIRED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"secondary\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-secondary\">\n            {statusLabels[value]}\n          </Text>\n        </div>\n      );\n    case SubscriptionContractStatus.FAILED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"danger\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-danger\">\n            {statusLabels[value]}\n          </Text>\n        </div>\n      );\n    case SubscriptionContractStatus.PAUSED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"info\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-info\">\n            {statusLabels[value]}\n          </Text>\n        </div>\n      );\n  }\n}\n\n\n","'use client';\r\n\r\nimport { useTanStackTable } from 'app/packages/components/table/custom/use-TanStack-Table';\r\nimport TablePagination from 'app/packages/components/table/pagination';\r\nimport { contractColumns } from './columns';\r\nimport TableFooter from 'app/packages/components/table/footer';\r\nimport { TableClassNameProps } from 'app/packages/components/table/table-types';\r\nimport cn from 'app/packages/utils/class-names';\r\nimport { useNavigate } from '@remix-run/react';\r\nimport { useEffect, useMemo } from 'react';\r\nimport { usePaginationAndFilterHandlers } from 'app/packages/hooks/use-pagination-and-filters-handler';\r\nimport { extractNumericId, formatPrice } from 'app/packages/utils/shopifyIdUtils';\r\nimport MainTable from 'app/packages/components/table';\r\nimport { SubscriptionContractNode, SubscriptionContractsResponse, TableData } from 'app/types/subscription/subscriptionQueryTypes';\r\nimport { PageInfo } from 'app/types/product/ProductNode';\r\nimport Filters from './filters';\r\nimport { FiltersHandlerType } from './types';\r\n\r\nexport default function SubscriptionsTable({\r\n  pageSize,\r\n  hideFilters = false,\r\n  hidePagination = false,\r\n  hideFooter = false,\r\n  classNames = {\r\n    container: 'border border-muted rounded-md',\r\n    rowClassName: 'last:border-0 cursor-pointer',\r\n  },\r\n  paginationClassName,\r\n  responseData\r\n}: {\r\n  pageSize?: number;\r\n  hideFilters?: boolean;\r\n  hidePagination?: boolean;\r\n  hideFooter?: boolean;\r\n  classNames?: TableClassNameProps;\r\n  paginationClassName?: string;\r\n  responseData: SubscriptionContractsResponse\r\n}) {\r\n\r\n  const {\r\n    handlePageSizeChange,\r\n    handlePageChange,\r\n    handleStatusChange,\r\n    handleUpdatedDateChange,\r\n    handleQuerySearch,\r\n    handleLastBillingAttemptErrorChange,\r\n    handleCreatedDateChange\r\n  } = usePaginationAndFilterHandlers();\r\n  const navigate = useNavigate();\r\n\r\n  console.log('responseData', responseData);\r\n\r\n  const { response: { subscriptionContracts: { pageInfo } } } = responseData;\r\n\r\n  // Transform GraphQL response to fit `useTanStackTable`\r\n  const tableData = useMemo(() => (responseData ? transformShopifyContract(responseData, navigate) : []), [responseData]);\r\n\r\n  const { table, setData } = useTanStackTable<TableData>({\r\n    tableData: tableData,\r\n    columnConfig: contractColumns,\r\n    options: {\r\n      initialState: {\r\n        pagination: {\r\n          pageIndex: 0,\r\n          pageSize: pageSize,\r\n        },\r\n      },\r\n      enableColumnResizing: false,\r\n    },\r\n  });\r\n\r\n  const selectedData = table\r\n    .getSelectedRowModel()\r\n    .rows.map((row) => row.original);\r\n\r\n  function handleExportData() {\r\n    console.log('handleExportData products table')\r\n  }\r\n\r\n  const filtersHanlder: FiltersHandlerType = {\r\n    handleStatusChange,\r\n    handleQuerySearch,\r\n    handleUpdatedDateChange,\r\n    handleCreatedDateChange,\r\n    handleLastBillingAttemptErrorChange\r\n  }\r\n\r\n  // Update table data here \r\n  useEffect(() => {\r\n    setData(tableData)\r\n  }, [tableData, setData]);\r\n\r\n  return (\r\n    <>\r\n      {!hideFilters && <Filters table={table} filtersHanlder={filtersHanlder} />}\r\n      <MainTable table={table} variant=\"minimal\" classNames={classNames}  />\r\n      {!hideFooter && <TableFooter table={table} onExport={handleExportData} />}\r\n      {!hidePagination && (\r\n        <TablePagination\r\n          table={table}\r\n          className={cn('py-4', paginationClassName)}\r\n          onPageSizeChange={handlePageSizeChange}\r\n          pageInfo={pageInfo as PageInfo}\r\n          onPageChange={(cursor, action) => handlePageChange(cursor, action)}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nconst transformShopifyContract = (responseData: SubscriptionContractsResponse, navigate: any): TableData[] => {\r\n  const { response:\r\n    { subscriptionContracts,\r\n      shop:\r\n      {\r\n        currencyFormats: {\r\n          moneyFormat\r\n        }\r\n      }\r\n    }\r\n  } = responseData\r\n  return subscriptionContracts.edges.map(({ node }: { node: SubscriptionContractNode }) => ({\r\n    id: extractNumericId(node.id),\r\n    variantTitle: node.lines.edges[0]?.node.variantTitle || \"Unknown Plan\",\r\n    quantity: node.lines.edges[0]?.node.quantity || 1,\r\n    lineDiscountedPrice: formatPrice(parseFloat(node.lines.edges[0]?.node.lineDiscountedPrice?.amount), moneyFormat) || formatPrice(parseFloat(\"0.0\"), moneyFormat),\r\n    deliveryPolicyInterval: node.deliveryPolicy?.interval || \"N/A\",\r\n    deliveryPolicyIntervalCount: node.deliveryPolicy?.intervalCount || 0,\r\n    billingPolicyInterval: node.billingPolicy?.interval || \"N/A\",\r\n    billingPolicyIntervalCount: node.billingPolicy?.intervalCount || 0,\r\n    customerFirstName: node.customer?.firstName || \"Unknown\",\r\n    customerLastName: node.customer?.lastName || \"Unknown\",\r\n    customerName: node.customer?.displayName || \"Unknown\",\r\n    customerEmail: node.customer?.email || \"Unknown\",\r\n    status: node.status,\r\n    moneyFormat: moneyFormat,\r\n    nextBillingDate: node.nextBillingDate,\r\n    onRowClick: () => { }\r\n  }));\r\n};\r\n","import React from 'react'\r\nimport PageHeader from '../page-header'\r\nimport { Link } from '@remix-run/react'\r\nimport { routes } from 'app/config/routes'\r\nimport SubscriptionsTable from './SubscriptionsTable/table';\r\nimport { SubscriptionContractsResponse } from 'app/types/subscription/subscriptionQueryTypes';\r\n\r\nconst pageHeader = {\r\n    title: 'Subscriptions',\r\n    breadcrumb: [\r\n        {\r\n            href: routes.subscriptions.dashboard,\r\n            name: 'Products',\r\n        },\r\n        {\r\n            name: 'List',\r\n        },\r\n    ],\r\n};\r\n\r\n\r\nconst SubscriptionsList = ({ responseData, first }: { responseData: SubscriptionContractsResponse, first: number }) => {\r\n    return (\r\n        <div>\r\n            <PageHeader title={pageHeader.title} breadcrumb={pageHeader.breadcrumb}>\r\n                <div className=\"mt-4 flex items-center gap-3 lg:mt-0\">\r\n                    <Link\r\n                        to={routes.subscriptions.dashboard}\r\n                        className=\"w-full lg:w-auto\"\r\n                    >\r\n                    </Link>\r\n                </div>\r\n            </PageHeader>\r\n\r\n            <SubscriptionsTable responseData={responseData} pageSize={first} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SubscriptionsList","export enum ProductStatus {\r\n    ACTIVE = \"ACTIVE\",\r\n    ARCHIVED = \"ARCHIVED\",\r\n    DRAFT = \"DRAFT\",\r\n}\r\n\r\nexport enum ProductPublicationStatus {\r\n    APPROVED = \"approved\",\r\n    REJECTED = \"rejected\",\r\n    NEEDS_ACTION = \"needs_action\",\r\n    AWAITING_REVIEW = \"awaiting_review\",\r\n    PUBLISHED = \"published\",\r\n    DEMOTED = \"demoted\",\r\n    SCHEDULED = \"scheduled\",\r\n    PROVISIONALLY_PUBLISHED = \"provisionally_published\",\r\n}\r\n\r\n// Corrected Mapping for Display Labels\r\nexport const ProductPublicationStatusLabels: Record<ProductPublicationStatus, string> = {\r\n    [ProductPublicationStatus.APPROVED]: \"Approved\",\r\n    [ProductPublicationStatus.REJECTED]: \"Rejected\",\r\n    [ProductPublicationStatus.NEEDS_ACTION]: \"Needs Action\",\r\n    [ProductPublicationStatus.AWAITING_REVIEW]: \"Awaiting Review\",\r\n    [ProductPublicationStatus.PUBLISHED]: \"Published\",\r\n    [ProductPublicationStatus.DEMOTED]: \"Demoted\",\r\n    [ProductPublicationStatus.SCHEDULED]: \"Scheduled\",\r\n    [ProductPublicationStatus.PROVISIONALLY_PUBLISHED]: \"Provisionally Published\",\r\n};\r\n\r\n// Fixed `publicationStatusOptions` Mapping\r\nexport const publicationStatusOptions = Object.values(ProductPublicationStatus).map((status) => ({\r\n    value: status,\r\n    label: ProductPublicationStatusLabels[status],\r\n}));\r\n\r\n\r\n// Mapping object for display labels\r\nexport const ProductStatusLabels: Record<ProductStatus, string> = {\r\n    [ProductStatus.ACTIVE]: \"Active\",\r\n    [ProductStatus.ARCHIVED]: \"Archived\",\r\n    [ProductStatus.DRAFT]: \"Draft\",\r\n};\r\n\r\nexport const statusOptions = Object.values(ProductStatus).map((status) => ({\r\n    value: status,\r\n    label: ProductStatusLabels[status],\r\n}));\r\n\r\n\r\nexport type FiltersHandlerType = {\r\n    handleStatusChange: (selectedStatus: string | null) => void;\r\n    handleQuerySearch: (query: string, type?: string, SearchByOptions?: { label: string; value: string }[]) => void;\r\n    handlePublishedStatusChange: (query: string) => void;\r\n};\r\n\r\nexport enum PublishedStatus {\r\n    PUBLISHED = \"published\",\r\n    UNPUBLISHED = \"unpublished\",\r\n    \r\n}\r\nexport const PublishedStatusLabels: Record<PublishedStatus, string> = {\r\n    [PublishedStatus.PUBLISHED]: \"Published\",\r\n    [PublishedStatus.UNPUBLISHED]: \"Unpublished\",\r\n};\r\nexport const publishedStatusOptions = Object.values(PublishedStatus).map((status) => ({\r\n    value: status,\r\n    label: PublishedStatusLabels[status], // Use readable labels\r\n}));\r\n\r\nexport enum MainAppFilters {\r\n    QUERY = \"query\",\r\n    STORESTATUS = 'onlineStoreStatus',\r\n    CUSTOMEREMAIL = 'customerEmail',\r\n    ID = 'id',\r\n    STATUS = 'status',\r\n    UPDATEDATE = 'updatedAt',\r\n    CREATEDATE = 'createdAt',\r\n    LASTBILLINGATTEMPTERROR = 'lastBillingAttemptError',\r\n}","import { LoaderFunctionArgs, redirect } from '@remix-run/node';\r\nimport { useLoaderData } from '@remix-run/react';\r\nimport { CURRENT_APP_INSTALLATION } from 'app/graphql/queries/queryCurrentAppInstallation';\r\nimport { CURRENT_SHOP } from 'app/graphql/queries/queryShop';\r\nimport { SUBSCRIPTION_CONTRACTS_QUERY } from 'app/graphql/queries/subscriptions/subscriptionContracts';\r\nimport { useIsMounted } from 'app/packages/hooks/use-is-mounted';\r\nimport {\r\n  getAuthCookie,\r\n  mergeQueryParams\r\n} from 'app/packages/utils/cookieAuth';\r\nimport SubscriptionsList from 'app/shared/subscriptions';\r\nimport { authenticate } from 'app/shopify.server';\r\nimport { MainAppFilters } from 'app/types/product/filtersData';\r\nimport {\r\n  SubscriptionContractsFilterQuery,\r\n  SubscriptionContractsNextParams,\r\n  SubscriptionContractsVariables\r\n} from 'app/types/subscription/subscriptionQueryTypes';\r\nimport { AdminApiContextWithoutRest } from 'node_modules/@shopify/shopify-app-remix/dist/ts/server/clients';\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n  const cookieHeader = request.headers.get(\"Cookie\");\r\n  const authData = await getAuthCookie(cookieHeader);\r\n  if (!authData) {\r\n    throw redirect(\"/auth/login\");\r\n  }\r\n\r\n  const url = new URL(request.url);\r\n  const first = Number(url.searchParams.get(\"first\")) || 10;\r\n  const action = url.searchParams.get(\"action\");\r\n  const cursor = url.searchParams.get(\"cursor\") || null;\r\n\r\n  // Determine whether to use `after` or `before`\r\n  const after = action === \"next\" ? cursor : null;\r\n  const before = action === \"prev\" ? cursor : null;\r\n\r\n  // Extract query filters from URL\r\n  const filters: SubscriptionContractsFilterQuery = {\r\n    query: url.searchParams.get(\"query\") || undefined,\r\n    onlineStoreStatus: url.searchParams.get(\"onlineStoreStatus\") || undefined,\r\n    customerEmail: url.searchParams.get(\"customer_email\") || undefined,\r\n    id: url.searchParams.get(\"id\") || undefined,\r\n    status: url.searchParams.get(\"status\") || undefined,\r\n    updatedAt: url.searchParams.get(\"updatedAt\") || undefined,\r\n    createdAt: url.searchParams.get(\"createdAt\") || undefined,\r\n    lastBillingAttemptError: url.searchParams.get(\"lastBillingAttemptError\") || undefined,\r\n  };\r\n\r\n  // Generate Shopify-compatible query string\r\n  const shopifyQuery = generateShopifyQuery(filters);\r\n\r\n  console.log(shopifyQuery, \"shopifyQuery\");\r\n\r\n  // Create a new request with merged query parameters\r\n  const updatedRequest = mergeQueryParams(request, authData.query);\r\n  const response = await authenticate.admin(updatedRequest);\r\n\r\n  if (!response || !response.admin) {\r\n    throw new Error(\"Authentication failed: Admin data missing\");\r\n  }\r\n  const { admin } = response;\r\n  // Await the critical data required to render initial state of the page\r\n  const criticalData = await loadCriticalData(admin, { first, after, before }, shopifyQuery);\r\n  return {\r\n    apiKey: process.env.SHOPIFY_API_KEY || \"\",\r\n    response: criticalData,\r\n    first\r\n  };\r\n};\r\n\r\n\r\nconst generateShopifyQuery = (filters: SubscriptionContractsFilterQuery): string | null => {\r\n  const queryParts: string[] = [];\r\n  let queryFilter = \"\";\r\n\r\n  console.log(filters, \"filters>>>>>>>>>>>\");\r\n\r\n  Object.entries(filters).forEach(([key, value]) => {\r\n    if (!value) return;\r\n\r\n    console.log('key', key, 'value', value);\r\n    console.log('key', MainAppFilters.CUSTOMEREMAIL);\r\n    switch (key) {\r\n      case MainAppFilters.CUSTOMEREMAIL:\r\n        queryFilter = `email:${value}`;\r\n      case MainAppFilters.ID:\r\n        queryFilter = `id:${value}`;\r\n        break;\r\n      case MainAppFilters.STATUS:\r\n        queryFilter = `status:${value}`;\r\n        break;\r\n      case MainAppFilters.UPDATEDATE:\r\n        queryFilter = `updated_at:${value}`;\r\n        break;\r\n      case MainAppFilters.CREATEDATE:\r\n        queryFilter = `created_at:${value}`;\r\n        break;\r\n      case MainAppFilters.LASTBILLINGATTEMPTERROR:\r\n        queryFilter = `last_billing_attempt_error_type:${value}`;\r\n        break;\r\n    }\r\n  });\r\n\r\n  if (queryFilter) {\r\n    queryParts.push(queryFilter);\r\n  }\r\n\r\n  console.log(queryParts, \"queryParts\");\r\n\r\n  return queryParts.length ? queryParts.join(\" \") : null;\r\n};\r\n\r\n\r\n/**\r\n * Load data necessary for rendering content above the fold. This is the critical data\r\n * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.\r\n * @param {AdminInstance}\r\n */\r\nconst loadCriticalData = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  pagination: SubscriptionContractsNextParams,\r\n  query?: string | null\r\n) => {\r\n  //  Generate variables dynamically in the required format\r\n  const variables = generatePaginationVariables(pagination, query);\r\n  console.log('Fetch Subscripionts Variables', variables);\r\n  const [\r\n    response,\r\n    appResponse,\r\n    shopResponse\r\n  ] = await Promise.all([\r\n    admin.graphql(SUBSCRIPTION_CONTRACTS_QUERY, variables),\r\n    admin.graphql(CURRENT_APP_INSTALLATION),\r\n    admin.graphql(CURRENT_SHOP),\r\n  ]);\r\n  const [\r\n    { data: { subscriptionContracts }, extensions },\r\n    { data: { currentAppInstallation } },\r\n    { data: { shop } }\r\n  ] = await Promise.all([\r\n    response.json(),\r\n    appResponse.json(),\r\n    shopResponse.json(),\r\n  ]);\r\n\r\n  console.log(JSON.stringify(extensions));\r\n\r\n  // Attach `currentAppInstallation` to the product\r\n  return { response: { subscriptionContracts: subscriptionContracts, currentAppInstallation, shop } };\r\n};\r\n\r\n/**\r\n * Utility function to generate the correct GraphQL variables dynamically\r\n *  Ensures correct `first` or `last` usage\r\n *  Removes unnecessary keys from the GraphQL query\r\n */\r\nconst generatePaginationVariables = (\r\n  pagination: SubscriptionContractsNextParams,\r\n  query?: string | null\r\n): { variables: SubscriptionContractsVariables } => {\r\n  const isGoingBack = !!pagination.before; // Check if navigating backward\r\n\r\n  //  Create partial object first, only setting necessary properties\r\n  let partialVariables: Partial<SubscriptionContractsVariables> = {\r\n    reverse: true,\r\n    query: query || undefined,\r\n  };\r\n\r\n  if (isGoingBack) {\r\n    partialVariables = {\r\n      ...partialVariables,\r\n      last: pagination.first,\r\n      before: pagination.before,\r\n\r\n    };\r\n  } else {\r\n    partialVariables = {\r\n      ...partialVariables,\r\n      first: pagination.first,\r\n      after: pagination.after,\r\n    };\r\n  }\r\n\r\n  return { variables: partialVariables as SubscriptionContractsVariables };\r\n};\r\n\r\n\r\n\r\nconst Subscriptions = () => {\r\n  const { apiKey, response, first } = useLoaderData<any>();\r\n  const isMounted = useIsMounted();\r\n  if (!isMounted) {\r\n    return null;\r\n  }\r\n  return (\r\n    <SubscriptionsList responseData={response} first={first} />\r\n  )\r\n}\r\n\r\nexport default Subscriptions","import { LoaderFunctionArgs, redirect } from '@remix-run/node';\r\nimport { Link, useLoaderData } from '@remix-run/react';\r\nimport { AppProvider } from '@shopify/shopify-app-remix/react';\r\nimport { routes } from 'app/config/routes';\r\nimport { getAuthCookie, mergeQueryParams } from 'app/packages/utils/cookieAuth';\r\nimport ExportButton from 'app/shared/export-button';\r\nimport PageHeader from 'app/shared/page-header';\r\nimport ProductsTable from 'app/shared/products/product-list/table';\r\nimport { authenticate } from 'app/shopify.server';\r\nimport { PiPlusBold } from 'react-icons/pi';\r\nimport { Button } from 'rizzui/button';\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n  const cookieHeader = request.headers.get(\"Cookie\");\r\n  const authData = await getAuthCookie(cookieHeader);\r\n  if (!authData) {\r\n    throw redirect(\"/auth/login\");\r\n  }\r\n\r\n  // Create a new request with merged query parameters\r\n  const updatedRequest = mergeQueryParams(request, authData.query);\r\n  await authenticate.admin(updatedRequest);\r\n\r\n  return { apiKey: process.env.SHOPIFY_API_KEY || \"\" };\r\n};\r\n\r\nconst pageHeader = {\r\n  title: 'Products',\r\n  breadcrumb: [\r\n    {\r\n      href: routes.products.products,\r\n      name: 'Products',\r\n    },\r\n    {\r\n      name: 'Selling Plan',\r\n    },\r\n  ],\r\n};\r\n\r\nconst Analytics = ({ Products = [] }) => {\r\n  const { apiKey } = useLoaderData<typeof loader>();\r\n  return (\r\n    <AppProvider isEmbeddedApp={false} apiKey={apiKey}>\r\n       <h1>Selling Plan</h1>\r\n    </AppProvider>\r\n  )\r\n}\r\n\r\nexport default Analytics","import { LoaderFunctionArgs, redirect } from '@remix-run/node';\r\nimport { Link, useLoaderData } from '@remix-run/react';\r\nimport { AppProvider } from '@shopify/shopify-app-remix/react';\r\nimport { routes } from 'app/config/routes';\r\nimport { getAuthCookie, mergeQueryParams } from 'app/packages/utils/cookieAuth';\r\nimport ExportButton from 'app/shared/export-button';\r\nimport PageHeader from 'app/shared/page-header';\r\nimport ProductsTable from 'app/shared/products/product-list/table';\r\nimport { authenticate } from 'app/shopify.server';\r\nimport { PiPlusBold } from 'react-icons/pi';\r\nimport { Button } from 'rizzui/button';\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n  const cookieHeader = request.headers.get(\"Cookie\");\r\n  const authData = await getAuthCookie(cookieHeader);\r\n  if (!authData) {\r\n    throw redirect(\"/auth/login\");\r\n  }\r\n\r\n  // Create a new request with merged query parameters\r\n  const updatedRequest = mergeQueryParams(request, authData.query);\r\n  await authenticate.admin(updatedRequest);\r\n\r\n  return { apiKey: process.env.SHOPIFY_API_KEY || \"\" };\r\n};\r\n\r\nconst pageHeader = {\r\n  title: 'Products',\r\n  breadcrumb: [\r\n    {\r\n      href: routes.products.products,\r\n      name: 'Products',\r\n    },\r\n    {\r\n      name: 'List',\r\n    },\r\n  ],\r\n};\r\n\r\nconst Analytics = ({ Products = [] }) => {\r\n  const { apiKey } = useLoaderData<typeof loader>();\r\n  return <h1>Analytics</h1>\r\n}\r\n\r\nexport default Analytics","export function replaceUnderscoreDash(str: string) {\n  return str.replace(/[_-]/g, \" \");\n}\n","\"use client\";\n\nimport cn from \"app/packages/utils/class-names\";\nimport { Badge, Flex, Text } from \"rizzui\";\nimport { replaceUnderscoreDash } from \"app/packages/utils/replace-underscore-dash\";\n\nconst statusColors = {\n  success: [\"text-green-dark\", \"bg-green-dark\"],\n  warning: [\"text-orange-dark\", \"bg-orange-dark\"],\n  danger: [\"text-red-dark\", \"bg-red-dark\"],\n  default: [\"text-gray-600\", \"bg-gray-600\"],\n};\n\nconst allStatus = {\n  online: statusColors.success,\n  offline: statusColors.default,\n  pending: statusColors.warning,\n  paid: statusColors.success,\n  overdue: statusColors.danger,\n  completed: statusColors.success,\n  cancelled: statusColors.danger,\n  publish: statusColors.success,\n  unpublished: statusColors.danger,\n  approved: statusColors.success,\n  rejected: statusColors.danger,\n  active: statusColors.success,\n  deactivated: statusColors.danger,\n  on_going: statusColors.warning,\n  at_risk: statusColors.danger,\n  delayed: statusColors.default,\n  draft: statusColors.default,\n  refunded: statusColors.default,\n};\n\nexport type StatusTypes = keyof typeof allStatus;\n\nexport function getStatusBadge(status: string) {\n  const statusLower = status.toLowerCase() as StatusTypes;\n  if (statusLower in allStatus) {\n    return (\n      <Flex align=\"center\" gap=\"2\" className=\"w-auto\">\n        <Badge renderAsDot className={allStatus[statusLower][1]} />\n        <Text\n          className={cn(\"font-medium capitalize\", allStatus[statusLower][0])}\n        >\n          {replaceUnderscoreDash(statusLower)}\n        </Text>\n      </Flex>\n    );\n  }\n  return (\n    <Flex align=\"center\" gap=\"2\" className=\"w-auto\">\n      <Badge renderAsDot className=\"bg-gray-600\" />\n      <Text className=\"font-medium capitalize text-gray-600\">\n        {replaceUnderscoreDash(statusLower)}\n      </Text>\n    </Flex>\n  );\n}\n","\"use client\";\n\nimport { Text, Avatar, AvatarProps } from \"rizzui\";\nimport cn from \"../utils/class-names\";\n\ninterface AvatarCardProps {\n  src: string;\n  name: string;\n  className?: string;\n  nameClassName?: string;\n  avatarProps?: AvatarProps;\n  description?: React.ReactNode;\n}\n\nexport default function AvatarCard({\n  src,\n  name,\n  className,\n  description,\n  avatarProps,\n  nameClassName,\n}: AvatarCardProps) {\n  return (\n    <figure className={cn(\"flex items-center gap-3\", className)}>\n      <Avatar name={name} src={src} {...avatarProps} />\n      <figcaption className=\"grid gap-0.5\">\n        <Text\n          className={cn(\n            \"font-lexend text-sm font-medium text-gray-900 dark:text-gray-700\",\n            nameClassName\n          )}\n        >\n          {name}\n        </Text>\n        {description && (\n          <Text className=\"text-[13px] text-gray-500\">{description}</Text>\n        )}\n      </figcaption>\n    </figure>\n  );\n}\n","\"use client\";\n\nimport cn from \"app/packages/utils/class-names\";\nimport { Badge, Flex } from \"rizzui\";\nimport { replaceUnderscoreDash } from \"app/packages/utils/replace-underscore-dash\";\n\nconst statusColors = {\n  subscription: [\"text-blue-600\", \"bg-blue-600\"],\n  onetime: [\"text-gray-600\", \"bg-gray-600\"],\n};\n\nexport function getPurchaseTypeBadge(purchaseType: any) {\n  const { oneTime, subscriptions } = purchaseType;\n\n  // If neither oneTime nor subscriptions exist, return null\n  if (!oneTime && !subscriptions) {\n    return null;\n  }\n\n  return (\n    <Flex direction={subscriptions && oneTime ? \"col\" : \"row\"} justify=\"center\" align=\"center\" gap=\"2\" className=\"w-auto\">\n      {subscriptions && (\n        <Badge className={cn(\"px-2 py-1 text-white\", statusColors.subscription[1])}>\n          {replaceUnderscoreDash(\"Subscription\")}\n        </Badge>\n      )}\n      {oneTime && (\n        <Badge className={cn(\"px-2 py-1 text-white\", statusColors.onetime[1])}>\n          {replaceUnderscoreDash(\"One-Time\")}\n        </Badge>\n      )}\n    </Flex>\n  );\n}\n","import dayjs from 'dayjs';\n\nexport function formatDate(\n  date?: Date,\n  format: string = 'DD MMM, YYYY'\n): string {\n  if (!date) return '';\n  return dayjs(date).format(format);\n}\n","import cn from '../utils/class-names';\nimport { formatDate } from '../utils/format-date';\n\ninterface DateCellProps {\n  date: Date;\n  className?: string;\n  dateFormat?: string;\n  dateClassName?: string;\n  timeFormat?: string;\n  timeClassName?: string;\n}\n\nexport default function DateCell({\n  date,\n  className,\n  timeClassName,\n  dateClassName,\n  dateFormat = 'MMMM D, YYYY',\n  timeFormat = 'h:mm A',\n}: DateCellProps) {\n  return (\n    <div className={cn('grid gap-1', className)}>\n      <time\n        dateTime={formatDate(date, 'YYYY-MM-DD')}\n        className={cn('font-medium text-gray-700', dateClassName)}\n      >\n        {formatDate(date, dateFormat)}\n      </time>\n      <time\n        dateTime={formatDate(date, 'HH:mm:ss')}\n        className={cn('text-[13px] text-gray-500', timeClassName)}\n      >\n        {formatDate(date, timeFormat)}\n      </time>\n    </div>\n  );\n}\n","'use client';\n\nimport { getStatusBadge } from 'app/packages/components/table-utils/get-status-badge';\nimport AvatarCard from 'app/packages/ui/avatar-card';\nimport { createColumnHelper } from '@tanstack/react-table';\nimport { Checkbox, Text } from 'rizzui';\nimport { Link } from '@remix-run/react';\nimport { TableData } from 'app/types/product/tableData';\nimport { getPurchaseTypeBadge } from 'app/packages/components/table-utils/get-purchase-type-badge';\nimport DateCell from 'app/packages/ui/date-cell';\n\nconst columnHelper = createColumnHelper<TableData>();\n\nexport const productsListColumns = [\n  columnHelper.display({\n    id: 'select',\n    size: 50,\n    header: ({ table }) => (\n      <Checkbox\n        className=\"ps-3.5\"\n        aria-label=\"Select all rows\"\n        checked={table.getIsAllPageRowsSelected()}\n        onChange={() => table.toggleAllPageRowsSelected()}\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        className=\"ps-3.5\"\n        aria-label=\"Select row\"\n        checked={row.getIsSelected()}\n        onChange={() => row.toggleSelected()}\n      />\n    ),\n  }),\n\n  columnHelper.display({\n    id: 'product',\n    size: 300,\n    header: 'Product',\n    cell: ({ row }) => (\n      <AvatarCard\n        src={row.original.image.url || ''}\n        name={row.original.title}\n        description={`${row.original.variantsCount} variants`}\n        avatarProps={{\n          name: row.original.title,\n          size: 'lg',\n          className: 'rounded-lg',\n        }}\n      />\n\n    ),\n  }),\n\n  columnHelper.display({\n    id: 'status',\n    size: 150,\n    header: 'Shopify status',\n    enableSorting: false,\n    cell: ({ row }) => {\n      return (\n        <div>\n          <div>\n            <span>Product</span>\n            <span>\n              {getStatusBadge(row.original.status)}\n            </span>\n          </div>\n        </div>\n      )\n    }\n  }),\n\n  columnHelper.display({\n    id: 'purchase_type',\n    size: 150,\n    header: 'Purchase types',\n    cell: ({ row }) => {\n      const { purchaseType } = row.original;\n      return getPurchaseTypeBadge(purchaseType)\n    }\n  }),\n\n  columnHelper.display({\n    id: 'frquencies',\n    size: 150,\n    header: 'Selling Plans ',\n    cell: ({ row }) => <Text className=\"text-sm\">{row.original.sellingPlanGroupsCount}</Text>,\n  }),\n\n  columnHelper.display({\n    id: 'createdAt',\n    size: 150,\n    header: 'Created At',\n    cell: ({ row }) => <DateCell date={new Date(row.original.createdAt)} />,\n  }),\n  \n];\n","'use client';\n\nimport DateFiled from 'app/packages/components/controlled-table/date-field';\nimport PriceField from 'app/packages/components/controlled-table/price-field';\nimport StatusField from 'app/packages/components/controlled-table/status-field';\nimport { FilterDrawerView } from 'app/packages/components/controlled-table/table-filter';\nimport ToggleColumns from 'app/packages/components/table-utils/toggle-columns';\nimport { getDateRangeStateValues } from 'app/packages/utils/get-formatted-date';\nimport { type Table as ReactTableType } from '@tanstack/react-table';\nimport { useEffect, useState } from 'react';\nimport {\n  PiFunnel,\n  PiMagnifyingGlassBold,\n  PiTrash,\n  PiTrashDuotone,\n} from 'react-icons/pi';\nimport { Badge, Button, Flex, Input, Text } from 'rizzui';\nimport { FiltersHandlerType, ProductPublicationStatus, ProductPublicationStatusLabels, ProductStatus, ProductStatusLabels, publicationStatusOptions, PublishedStatus, PublishedStatusLabels, publishedStatusOptions, statusOptions } from 'app/types/product/filtersData';\nimport { messages } from 'app/config/messages';\nimport { useSearchParams } from '@remix-run/react';\nimport { useDebounce } from 'app/packages/hooks/use-debounce';\n\ninterface TableToolbarProps<T extends Record<string, any>> {\n  table: ReactTableType<T>;\n  filtersHanlder: FiltersHandlerType\n}\n\nexport default function Filters<TData extends Record<string, any>>({\n  table,\n  filtersHanlder\n}: TableToolbarProps<TData>) {\n  const [openDrawer, setOpenDrawer] = useState(false);\n  const isMultipleSelected = table.getSelectedRowModel().rows.length > 1;\n  const {\n    options: { meta },\n  } = table;\n\n  const { handleQuerySearch, handleStatusChange, handlePublishedStatusChange } = filtersHanlder\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [searchValue, setSearchValue] = useState(searchParams.get('query') ?? \"\");\n  const debouncedSearch = useDebounce(searchValue, 300); // ✅ Apply debounce\n\n  // Apply debounced value to the table filter\n  useEffect(() => {\n    handleQuerySearch(debouncedSearch);\n  }, [debouncedSearch]);\n\n  const clearFilters = () => {\n    table.resetGlobalFilter();\n    table.resetColumnFilters();\n    setSearchValue(\"\"); \n    handleQuerySearch(\"\"); \n    handleStatusChange(null); \n    handlePublishedStatusChange(''); \n    setSearchParams({});\n  };\n\n  return (\n    <Flex align=\"center\" justify=\"between\" className=\"mb-4\">\n      <Input\n        type=\"search\"\n        placeholder={messages.products.filters.search.placeholder}\n        value={searchValue}\n        onClear={() => setSearchValue('')}\n        onChange={(e) => setSearchValue(e.target.value)}\n        inputClassName=\"h-9\"\n        clearable={true}\n        prefix={<PiMagnifyingGlassBold className=\"size-4\" />}\n      />\n\n      <FilterDrawerView\n        isOpen={openDrawer}\n        drawerTitle={messages.products.filters.title}\n        setOpenDrawer={setOpenDrawer}\n      >\n        <div className=\"grid grid-cols-1 gap-6\">\n          <FilterElements table={table} filtersHanlder={filtersHanlder} />\n        </div>\n      </FilterDrawerView>\n\n      <Flex align=\"center\" gap=\"3\" className=\"w-auto\">\n        {isMultipleSelected ? (\n          <Button\n            color=\"danger\"\n            variant={\"outline\" as any}\n            className=\"h-[34px] gap-2 text-sm\"\n            onClick={() => { }}\n          >\n            <PiTrash size={18} />\n            Delete\n          </Button>\n        ) : null}\n\n        <Button\n          variant={\"outline\" as any}\n          onClick={() => setOpenDrawer(!openDrawer)}\n          className=\"h-9 pe-3 ps-2.5\"\n        >\n          <PiFunnel className=\"me-1.5 size-[18px]\" strokeWidth={1.7} />\n          Filters\n        </Button>\n\n        <Button variant={\"flat\" as any} className=\"h-9 bg-gray-200/70\" onClick={clearFilters}>\n          <PiTrashDuotone className=\"me-1.5 h-[17px] w-[17px]\" /> Clear Filters\n        </Button>\n\n        <ToggleColumns table={table} />\n      </Flex>\n    </Flex>\n  );\n}\n\nfunction FilterElements<T extends Record<string, any>>({\n  table,\n  filtersHanlder\n}: TableToolbarProps<T>) {\n  // const priceFieldValue = (table.getColumn('amount')?.getFilterValue() ?? [\n  //   '',\n  //   '',\n  // ]) as string[];\n  // const createdDate = table.getColumn('createdAt')?.getFilterValue() ?? ([null, null] as any);\n  // const dueDate = table.getColumn('dueDate')?.getFilterValue() ?? ([null, null] as any);\n  // const isFiltered = table.getState().globalFilter || table.getState().columnFilters.length > 0;\n  const { handleStatusChange, handlePublishedStatusChange } = filtersHanlder\n  const [searchParams] = useSearchParams();\n\n  return (\n    <>\n      <StatusField\n        options={statusOptions}\n        value={searchParams.get('status')}\n        onChange={(value: string) => {\n          handleStatusChange(value);\n        }\n        }\n        getOptionValue={(option: { value: any }) => option.value}\n        getOptionDisplayValue={(option: { value: any }) =>\n          renderOptionDisplayValue(option.value)\n        }\n        displayValue={(selected: any) => renderOptionDisplayValue(selected)}\n        dropdownClassName=\"!z-20 h-auto top-15\"\n        className={'w-auto'}\n        label={`${messages.products.filters.status.title}`}\n      />\n\n      <StatusField\n        options={publishedStatusOptions}\n        value={searchParams.get('onlineStoreStatus')}\n        onChange={(value: string) => {\n          handlePublishedStatusChange(value);\n        }\n        }\n        getOptionValue={(option: { value: any }) => option.value}\n        getOptionDisplayValue={(option: { value: any }) =>\n          renderPublishedStatusOption(option.value)\n        }\n        displayValue={(selected: any) => renderPublishedStatusOption(selected)}\n        dropdownClassName=\"!z-20 h-auto top-15\"\n        className={'w-auto'}\n        label={`${messages.products.filters.publishedStatus.title}`}\n      />\n\n\n\n\n      {/* <PriceField\n        value={priceFieldValue}\n        onChange={(v) => table.getColumn('amount')?.setFilterValue(v)}\n        label=\"Amount\"\n      /> */}\n      {/* <DateFiled\n        selectsRange\n        dateFormat={'dd-MMM-yyyy'}\n        className=\"w-full\"\n        placeholderText=\"Select created date\"\n        endDate={getDateRangeStateValues(createdDate[1])!}\n        selected={getDateRangeStateValues(createdDate[0])}\n        startDate={getDateRangeStateValues(createdDate[0])!}\n        onChange={(date) => table.getColumn('createdAt')?.setFilterValue(date)}\n        inputProps={{\n          label: 'Created Date',\n        }}\n      /> */}\n      {/* {isFiltered && (\n        <Button\n          size=\"sm\"\n          onClick={() => {\n            table.resetGlobalFilter();\n            table.resetColumnFilters();\n          }}\n          variant={\"flat\" as any}\n          className=\"h-9 bg-gray-200/70\"\n        >\n          <PiTrashDuotone className=\"me-1.5 h-[17px] w-[17px]\" /> Clear\n        </Button>\n      )} */}\n    </>\n  );\n}\n\n\nexport function renderPublishedStatusOption(value: PublishedStatus) {\n  switch (value) {\n    case PublishedStatus.PUBLISHED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"success\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-green-dark\">\n            {PublishedStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case PublishedStatus.UNPUBLISHED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"danger\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-red-dark\">\n            {PublishedStatusLabels[value]}\n          </Text>\n        </div>\n      );\n\n  }\n}\n\n\nexport function renderPublicationStatusOption(value: ProductPublicationStatus) {\n  switch (value) {\n    case ProductPublicationStatus.APPROVED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"success\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-green-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.REJECTED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"danger\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-red-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.NEEDS_ACTION:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"warning\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-orange-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.AWAITING_REVIEW:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"info\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-blue-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.PUBLISHED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"primary\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-blue-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.DEMOTED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"info\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-gray-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.SCHEDULED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"secondary\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-purple-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductPublicationStatus.PROVISIONALLY_PUBLISHED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"secondary\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-gray-dark\">\n            {ProductPublicationStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    default:\n      return (\n        <div className=\"flex items-center\">\n          <Badge renderAsDot className=\"bg-gray-400\" />\n          <Text className=\"ms-2 font-medium capitalize text-gray-600\">\n            Unknown\n          </Text>\n        </div>\n      );\n  }\n}\n\n\n\nexport function renderOptionDisplayValue(value: ProductStatus) {\n  switch (value) {\n    case ProductStatus.ACTIVE:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"success\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-green-dark\">\n            {ProductStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductStatus.ARCHIVED:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"warning\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-orange-dark\">\n            {ProductStatusLabels[value]}\n          </Text>\n        </div>\n      );\n    case ProductStatus.DRAFT:\n      return (\n        <div className=\"flex items-center\">\n          <Badge color=\"danger\" renderAsDot />\n          <Text className=\"ms-2 font-medium capitalize text-red-dark\">\n            {ProductStatusLabels[value]}\n          </Text>\n        </div>\n      );\n  }\n}\n","'use client';\n\nimport { useTanStackTable } from 'app/packages/components/table/custom/use-TanStack-Table';\nimport TablePagination from 'app/packages/components/table/pagination';\nimport { productsListColumns } from './columns';\nimport Filters from './filters';\nimport TableFooter from 'app/packages/components/table/footer';\nimport { TableClassNameProps } from 'app/packages/components/table/table-types';\nimport cn from 'app/packages/utils/class-names';\nimport {  ProductSingleNode } from 'app/types/product/ProductNode';\nimport { useNavigate } from '@remix-run/react';\nimport { useEffect, useMemo } from 'react';\nimport { TableData } from 'app/types/product/tableData';\nimport { FiltersHandlerType } from 'app/types/product/filtersData';\nimport { usePaginationAndFilterHandlers } from 'app/packages/hooks/use-pagination-and-filters-handler';\nimport { extractNumericId } from 'app/packages/utils/shopifyIdUtils';\nimport { getSellingPlanGroup } from '../product-edit/utils/sellingPlansGroupUtils';\nimport MainTable from 'app/packages/components/table';\n\nexport default function ProductsTable({\n  pageSize,\n  hideFilters = false,\n  hidePagination = false,\n  hideFooter = false,\n  classNames = {\n    container: 'border border-muted rounded-md',\n    rowClassName: 'last:border-0 cursor-pointer',\n  },\n  paginationClassName,\n  responseData\n}: {\n  pageSize?: number;\n  hideFilters?: boolean;\n  hidePagination?: boolean;\n  hideFooter?: boolean;\n  classNames?: TableClassNameProps;\n  paginationClassName?: string;\n  responseData: any\n}) {\n\n  const {\n    handlePageSizeChange,\n    handlePageChange,\n    handleStatusChange,\n    handlePublishedStatusChange,\n    handleQuerySearch,\n  } = usePaginationAndFilterHandlers();\n  const navigate = useNavigate();\n\n  const { response: { products: { pageInfo } } } = responseData;\n\n  // Transform GraphQL response to fit `useTanStackTable`\n  const tableData = useMemo(() => (responseData ? transformShopifyProducts(responseData, navigate) : []), [responseData]);\n\n\n  const { table, setData } = useTanStackTable<TableData>({\n    tableData: tableData,\n    columnConfig: productsListColumns,\n    options: {\n      initialState: {\n        pagination: {\n          pageIndex: 0,\n          pageSize: pageSize,\n        },\n      },\n      enableColumnResizing: false,\n    },\n  });\n\n  const selectedData = table\n    .getSelectedRowModel()\n    .rows.map((row) => row.original);\n\n  function handleExportData() {\n    console.log('handleExportData products table')\n  }\n\n  const filtersHanlder: FiltersHandlerType = {\n    handleStatusChange,\n    handleQuerySearch,\n    handlePublishedStatusChange\n  }\n\n  // Update table data here \n  useEffect(() => {\n    setData(tableData)\n  }, [tableData, setData]);\n\n  return (\n    <>\n      {!hideFilters && <Filters table={table} filtersHanlder={filtersHanlder} />}\n      <MainTable table={table} variant=\"modern\" classNames={classNames} />\n      {!hideFooter && <TableFooter table={table} onExport={handleExportData} />}\n      {!hidePagination && (\n        <TablePagination\n          table={table}\n          className={cn('py-4', paginationClassName)}\n          onPageSizeChange={handlePageSizeChange}\n          pageInfo={pageInfo}\n          onPageChange={(cursor, action) => handlePageChange(cursor, action)}\n        />\n      )}\n    </>\n  );\n}\n\nconst transformShopifyProducts = (responseData: any, navigate: any): TableData[] => {\n  const { response: { products } } = responseData;\n  \n  return products.edges.map(({ node }: any) => ({\n    id: node.id, // Ensure each row has a unique `id`\n    title: node.title,\n    handle: node.handle,\n    createdAt: node.createdAt,\n    requiresSellingPlan: node.requiresSellingPlan,\n    status: node.status,\n    image: {\n      url: node.featuredMedia?.preview?.image?.url,\n      alt: node.featuredMedia?.alt\n    },\n    variantsCount: node?.variantsCount?.count,\n    onlineStorePreviewUrl: node?.onlineStorePreviewUrl,\n    numericId: extractNumericId(node.id),\n    purchaseType: getSellingPlanGroups(node, responseData),\n    sellingPlanGroupsCount: getSellingPlanGroupsCount(node, responseData),\n    onRowClick: () => navigate(`/merchant/products/${extractNumericId(node.id)}`)\n  }));\n};\n\nconst getSellingPlanGroupsCount = (node: ProductSingleNode, responseData: any) => {\n  const appIdGraphQL = responseData?.response?.currentAppInstallation?.app?.id || \"\";\n  const appIdNumeric = extractNumericId(appIdGraphQL);\n\n  const filteredPlans = node.sellingPlanGroups.edges.filter(\n    (edge: any) => extractNumericId(edge.node.appId) === appIdNumeric\n  );\n\n  return filteredPlans.length\n}\n\nconst getSellingPlanGroups = (node: ProductSingleNode, responseData: any) => {\n  if (!node?.sellingPlanGroups?.edges?.length) {\n    return { oneTime: false, subscriptions: false };\n  }\n\n  const appIdGraphQL = responseData?.response?.currentAppInstallation?.app?.id || \"\";\n  const appIdNumeric = extractNumericId(appIdGraphQL);\n\n  const filteredPlans = node.sellingPlanGroups.edges.filter(\n    (edge: any) => extractNumericId(edge.node.appId) === appIdNumeric\n  );\n\n  const hasOneTimeGroup = Boolean(getSellingPlanGroup(filteredPlans as any, \"Onetime Plan Group\"));\n  const hasSubscriptionGroups =\n    Boolean(getSellingPlanGroup(filteredPlans as any, \"PayPerShipment Plan Group\")) ||\n    Boolean(getSellingPlanGroup(filteredPlans as any, \"PrePaid Plan Group\"));\n\n  return {\n    oneTime: hasOneTimeGroup,\n    subscriptions: hasSubscriptionGroups,\n  };\n};\n","import { routes } from 'app/config/routes';\r\nimport PageHeader from '../page-header';\r\nimport { Link } from '@remix-run/react';\r\nimport ProductsTable from './product-list/table';\r\nimport { PageInfo, ProductsQueryResponse } from 'app/types/product/ProductNode';\r\n\r\nconst pageHeader = {\r\n  title: 'Products',\r\n  breadcrumb: [\r\n    {\r\n      href: routes.products.products,\r\n      name: 'Products',\r\n    },\r\n    {\r\n      name: 'List',\r\n    },\r\n  ],\r\n};\r\n\r\nexport default function Products({\r\n  responseData,\r\n  first\r\n}: {\r\n  responseData: any,\r\n  first: number\r\n  \r\n}) {\r\n  return (\r\n    <>\r\n      <PageHeader title={pageHeader.title} breadcrumb={pageHeader.breadcrumb}>\r\n        <div className=\"mt-4 flex items-center gap-3 lg:mt-0\">\r\n          <Link\r\n            to={routes.products.products}\r\n            className=\"w-full lg:w-auto\"\r\n          >\r\n          </Link>\r\n        </div>\r\n      </PageHeader>\r\n\r\n      <ProductsTable responseData={responseData} pageSize={first}  />\r\n    </>\r\n  )\r\n}\r\n\r\n\r\n","// productQueryTypes.ts\r\n\r\n// Interface for product query variables\r\nexport interface ProductQueryVariables {\r\n    first: number | null | undefined; // Number of products to fetch\r\n    last: number | null | undefined; // Number of products to fetch\r\n    after?: string | null; // Cursor for pagination (next page)\r\n    before?: string | null ; // Cursor for pagination (previous page)\r\n    query?: string; // Filter query, e.g., \"status:ACTIVE\"\r\n    reverse?: boolean; // Sorting order (true = DESC, false = ASC)\r\n    sortKey?: ProductSortKeys; // ✅ Use Enum for sorting options\r\n    savedSearchId?: string; // Optional saved search filter\r\n}\r\n\r\n// Enum for sortKey options\r\nexport enum ProductSortKeys {\r\n    ID = \"ID\",\r\n    TITLE = \"TITLE\",\r\n    VENDOR = \"VENDOR\",\r\n    CREATED_AT = \"CREATED_AT\",\r\n    UPDATED_AT = \"UPDATED_AT\",\r\n    PUBLISHED_AT = \"PUBLISHED_AT\",\r\n    BEST_SELLING = \"BEST_SELLING\",\r\n    PRICE = \"PRICE\",\r\n}","import { LoaderFunctionArgs, redirect } from '@remix-run/node';\r\nimport { useLoaderData, useMatches } from '@remix-run/react';\r\nimport { PRODUCTS_QUERY } from 'app/graphql/queries/products/queryProducts';\r\nimport { CURRENT_APP_INSTALLATION } from 'app/graphql/queries/queryCurrentAppInstallation';\r\nimport { CURRENT_SHOP } from 'app/graphql/queries/queryShop';\r\nimport { useIsMounted } from 'app/packages/hooks/use-is-mounted';\r\nimport { getAuthCookie, mergeQueryParams } from 'app/packages/utils/cookieAuth';\r\nimport Products from 'app/shared/products';\r\nimport { authenticate } from 'app/shopify.server';\r\nimport { MainAppFilters, ProductStatus } from 'app/types/product/filtersData';\r\nimport { ProductFilterQuery } from 'app/types/product/productFilterQuery';\r\nimport { ProductsQueryResponse } from 'app/types/product/ProductNode';\r\nimport { ProductPaginationNextParams } from 'app/types/product/productPagination';\r\nimport { ProductQueryVariables, ProductSortKeys } from 'app/types/product/productQueryTypes';\r\nimport { AdminApiContextWithoutRest } from 'node_modules/@shopify/shopify-app-remix/dist/ts/server/clients';\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n  const cookieHeader = request.headers.get(\"Cookie\");\r\n  const authData = await getAuthCookie(cookieHeader);\r\n  if (!authData) {\r\n    throw redirect(\"/auth/login\");\r\n  }\r\n\r\n  const url = new URL(request.url);\r\n  const first = Number(url.searchParams.get(\"first\")) || 10;\r\n  const action = url.searchParams.get(\"action\");\r\n  const cursor = url.searchParams.get(\"cursor\") || null;\r\n\r\n  // Determine whether to use `after` or `before`\r\n  const after = action === \"next\" ? cursor : null;\r\n  const before = action === \"prev\" ? cursor : null;\r\n\r\n  // Extract query filters from URL\r\n  const filters: ProductFilterQuery = {\r\n    status: url.searchParams.get(\"status\") as ProductStatus || undefined,\r\n    query: url.searchParams.get(\"query\") || undefined,\r\n    onlineStoreStatus: url.searchParams.get(\"onlineStoreStatus\") || undefined\r\n  };\r\n\r\n  // Generate Shopify-compatible query string\r\n  const shopifyQuery = generateShopifyQuery(filters);\r\n\r\n  // Create a new request with merged query parameters\r\n  const updatedRequest = mergeQueryParams(request, authData.query);\r\n  const response = await authenticate.admin(updatedRequest);\r\n\r\n  if (!response || !response.admin) {\r\n    throw new Error(\"Authentication failed: Admin data missing\");\r\n  }\r\n\r\n  const { admin } = response;\r\n\r\n  // Await the critical data required to render initial state of the page\r\n  const criticalData = await loadCriticalData(admin, { first, after, before }, shopifyQuery);\r\n\r\n  return {\r\n    apiKey: process.env.SHOPIFY_API_KEY || \"\",\r\n    response: criticalData,\r\n    first\r\n  };\r\n};\r\n\r\n/**\r\n * Load data necessary for rendering content above the fold. This is the critical data\r\n * needed to render the page. If it's unavailable, the whole page should 400 or 500 error.\r\n * @param {AdminInstance}\r\n */\r\nconst loadCriticalData = async (\r\n  admin: AdminApiContextWithoutRest,\r\n  pagination: ProductPaginationNextParams,\r\n  query?: string | null\r\n) => {\r\n  //  Generate variables dynamically in the required format\r\n  const variables = generatePaginationVariables(pagination, query);\r\n  const [\r\n    response,\r\n    appResponse,\r\n    shopResponse\r\n  ] = await Promise.all([\r\n    admin.graphql(PRODUCTS_QUERY, variables),\r\n    admin.graphql(CURRENT_APP_INSTALLATION),\r\n    admin.graphql(CURRENT_SHOP),\r\n  ]);\r\n  const [\r\n    { data: { products } },\r\n    { data: { currentAppInstallation } },\r\n    { data: { shop } }\r\n  ] = await Promise.all([\r\n    response.json(),\r\n    appResponse.json(),\r\n    shopResponse.json(),\r\n  ]);\r\n\r\n  // Attach `currentAppInstallation` to the product\r\n  return { response: { products: products, currentAppInstallation, shop } };\r\n};\r\n\r\nconst generateShopifyQuery = (filters: ProductFilterQuery): string | null => {\r\n  const queryParts: string[] = [];\r\n\r\n  Object.entries(filters).forEach(([key, value]) => {\r\n    if (!value) return;\r\n\r\n    switch (key) {\r\n      case MainAppFilters.QUERY:\r\n        queryParts.push(`${value}`);\r\n        break;\r\n      case MainAppFilters.STORESTATUS:\r\n      default:\r\n        queryParts.push(`published_status:\"${value}\"`);\r\n        break;\r\n    }\r\n  });\r\n\r\n  return queryParts.length ? queryParts.join(\" \") : null;\r\n};\r\n\r\n/**\r\n * Utility function to generate the correct GraphQL variables dynamically\r\n *  Ensures correct `first` or `last` usage\r\n *  Removes unnecessary keys from the GraphQL query\r\n */\r\nconst generatePaginationVariables = (\r\n  pagination: ProductPaginationNextParams,\r\n  query?: string | null\r\n): { variables: ProductQueryVariables } => {\r\n  const isGoingBack = !!pagination.before; // Check if navigating backward\r\n\r\n  //  Create partial object first, only setting necessary properties\r\n  let partialVariables: Partial<ProductQueryVariables> = {\r\n    reverse: true,\r\n    sortKey: ProductSortKeys.PUBLISHED_AT,\r\n    query: query || undefined,\r\n  };\r\n\r\n  if (isGoingBack) {\r\n    partialVariables = {\r\n      ...partialVariables,\r\n      last: pagination.first,\r\n      before: pagination.before,\r\n\r\n    };\r\n  } else {\r\n    partialVariables = {\r\n      ...partialVariables,\r\n      first: pagination.first,\r\n      after: pagination.after,\r\n    };\r\n  }\r\n\r\n  // Ensure `first` exists by asserting to `ProductQueryVariables`\r\n  return { variables: partialVariables as ProductQueryVariables };\r\n};\r\n\r\n\r\nconst Home = () => {\r\n  const { apiKey, response, first } = useLoaderData<typeof loader>();\r\n  const isMounted = useIsMounted();\r\n  if (!isMounted) {\r\n    return null;\r\n  }\r\n  return <Products responseData={response} first={first} />\r\n}\r\n\r\nexport default Home","import { LoaderFunctionArgs, redirect } from '@remix-run/node';\r\nimport { useLoaderData } from '@remix-run/react';\r\nimport { AppProvider } from '@shopify/shopify-app-remix/react';\r\nimport { getAuthCookie, mergeQueryParams } from 'app/packages/utils/cookieAuth';\r\nimport { authenticate } from 'app/shopify.server';\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n  const cookieHeader = request.headers.get(\"Cookie\");\r\n  const authData = await getAuthCookie(cookieHeader);\r\n  if (!authData) {\r\n    throw redirect(\"/auth/login\");\r\n  }\r\n\r\n  // Create a new request with merged query parameters\r\n  const updatedRequest = mergeQueryParams(request, authData.query);\r\n  await authenticate.admin(updatedRequest);\r\n\r\n  return { apiKey: process.env.SHOPIFY_API_KEY || \"\" };\r\n};\r\n\r\nconst Home = () => {\r\n  const { apiKey } = useLoaderData<typeof loader>();\r\n  return (\r\n    <h1>Home</h1>\r\n  )\r\n}\r\n\r\nexport default Home","import { LoaderFunctionArgs, redirect } from \"@remix-run/node\";\r\nimport { setAuthCookie } from \"app/packages/utils/cookieAuth\";\r\nimport { authenticate } from \"app/shopify.server\";\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n    await authenticate.admin(request);\r\n    const url = new URL(request.url);\r\n    const queryString = url.searchParams.toString();\r\n    const shop = url.searchParams.get(\"shop\");\r\n    const host = url.searchParams.get(\"host\");\r\n    const subscriptionId = url.searchParams.get(\"id\");\r\n\r\n    if (shop && host && subscriptionId) {\r\n\r\n        // Prepare cookie data\r\n        const cookieData = {\r\n            shop,\r\n            host,\r\n            query: queryString,\r\n        };\r\n\r\n        // Set the cookie\r\n        const cookieHeader = await setAuthCookie(cookieData);\r\n\r\n        // Redirect to /merchant/home\r\n        return redirect(`/merchant/subscriptions/${subscriptionId}`, {\r\n            headers: {\r\n                \"Set-Cookie\": cookieHeader,\r\n            },\r\n        });\r\n    } else {\r\n        throw redirect(\"/auth/login\");\r\n    }\r\n};\r\n","import \"C:/myfolder/MEANMEARN/Shopify/drift-charge-staging/node_modules/@shopify/polaris/build/esm/styles.css?transform-only\";export default \"__VITE_CSS_URL__433a2f6d79666f6c6465722f4d45414e4d4541524e2f53686f706966792f64726966742d6368617267652d73746167696e672f6e6f64655f6d6f64756c65732f4073686f706966792f706f6c617269732f6275696c642f65736d2f7374796c65732e6373733f7472616e73666f726d2d6f6e6c79__\"","import type { LoginError } from \"@shopify/shopify-app-remix/server\";\r\nimport { LoginErrorType } from \"@shopify/shopify-app-remix/server\";\r\n\r\ninterface LoginErrorMessage {\r\n  shop?: string;\r\n}\r\n\r\nexport function loginErrorMessage(loginErrors: LoginError): LoginErrorMessage {\r\n  if (loginErrors?.shop === LoginErrorType.MissingShop) {\r\n    return { shop: \"Please enter your shop domain to log in\" };\r\n  } else if (loginErrors?.shop === LoginErrorType.InvalidShop) {\r\n    return { shop: \"Please enter a valid shop domain to log in\" };\r\n  }\r\n\r\n  return {};\r\n}\r\n","import { useState } from \"react\";\r\nimport type { ActionFunctionArgs, LoaderFunctionArgs } from \"@remix-run/node\";\r\nimport { Form, useActionData, useLoaderData } from \"@remix-run/react\";\r\nimport {\r\n  AppProvider as PolarisAppProvider,\r\n  Button,\r\n  Card,\r\n  FormLayout,\r\n  Page,\r\n  Text,\r\n  TextField,\r\n} from \"@shopify/polaris\";\r\nimport polarisTranslations from \"@shopify/polaris/locales/en.json\";\r\nimport polarisStyles from \"@shopify/polaris/build/esm/styles.css?url\";\r\n\r\nimport { login } from \"../../shopify.server\";\r\n\r\nimport { loginErrorMessage } from \"./error.server\";\r\n\r\nexport const links = () => [{ rel: \"stylesheet\", href: polarisStyles }];\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n  const errors = loginErrorMessage(await login(request));\r\n\r\n  return { errors, polarisTranslations };\r\n};\r\n\r\nexport const action = async ({ request }: ActionFunctionArgs) => {\r\n  const errors = loginErrorMessage(await login(request));\r\n\r\n  return {\r\n    errors,\r\n  };\r\n};\r\n\r\nexport default function Auth() {\r\n  const loaderData = useLoaderData<typeof loader>();\r\n  const actionData = useActionData<typeof action>();\r\n  const [shop, setShop] = useState(\"\");\r\n  const { errors } = actionData || loaderData;\r\n\r\n  return (\r\n    <PolarisAppProvider i18n={loaderData.polarisTranslations}>\r\n      <Page>\r\n        <Card>\r\n          <Form method=\"post\">\r\n            <FormLayout>\r\n              <Text variant=\"headingMd\" as=\"h2\">\r\n                Log in\r\n              </Text>\r\n              <TextField\r\n                type=\"text\"\r\n                name=\"shop\"\r\n                label=\"Shop domain\"\r\n                helpText=\"example.myshopify.com\"\r\n                value={shop}\r\n                onChange={setShop}\r\n                autoComplete=\"on\"\r\n                error={errors.shop}\r\n              />\r\n              <Button submit>Log in</Button>\r\n            </FormLayout>\r\n          </Form>\r\n        </Card>\r\n      </Page>\r\n    </PolarisAppProvider>\r\n  );\r\n}\r\n","import type { LoaderFunctionArgs } from \"@remix-run/node\";\r\nimport { authenticate } from \"../shopify.server\";\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n  await authenticate.admin(request);\r\n\r\n  return null;\r\n};\r\n","import type { LoaderFunctionArgs } from \"@remix-run/node\";\r\nimport { redirect } from \"@remix-run/node\";\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n  const url = new URL(request.url);\r\n  if (url.searchParams.get(\"shop\")) {\r\n    throw redirect(`/app?${url.searchParams.toString()}`);\r\n  } else throw redirect(\"/auth/login\");\r\n\r\n};\r\n\r\n\r\n","import type { HeadersFunction, LoaderFunctionArgs } from \"@remix-run/node\";\r\nimport { Outlet, useLoaderData, useRouteError } from \"@remix-run/react\";\r\nimport { boundary } from \"@shopify/shopify-app-remix/server\";\r\nimport { AppProvider } from \"@shopify/shopify-app-remix/react\";\r\nimport polarisStyles from \"@shopify/polaris/build/esm/styles.css?url\";\r\n\r\nimport { authenticate } from \"../shopify.server\";\r\n\r\nexport const links = () => [{ rel: \"stylesheet\", href: polarisStyles }];\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n  await authenticate.admin(request);\r\n  return { apiKey: process.env.SHOPIFY_API_KEY || \"\" };\r\n};\r\n\r\nexport default function App() {\r\n  const { apiKey } = useLoaderData<typeof loader>();\r\n  return (\r\n    <AppProvider isEmbeddedApp={false} apiKey={apiKey}>\r\n      <Outlet />\r\n    </AppProvider>\r\n  );\r\n}\r\n\r\n// Shopify needs Remix to catch some thrown responses, so that their headers are included in the response.\r\nexport function ErrorBoundary() {\r\n  return boundary.error(useRouteError());\r\n}\r\n\r\nexport const headers: HeadersFunction = (headersArgs) => {\r\n  return boundary.headers(headersArgs);\r\n};\r\n","import {\r\n  Box,\r\n  Card,\r\n  Layout,\r\n  Link,\r\n  List,\r\n  Page,\r\n  Text,\r\n  BlockStack,\r\n} from \"@shopify/polaris\";\r\nimport { TitleBar } from \"@shopify/app-bridge-react\";\r\n\r\nexport default function AdditionalPage() {\r\n  return (\r\n    <Page>\r\n      <TitleBar title=\"Additional page\" />\r\n      <Layout>\r\n        <Layout.Section>\r\n          <Card>\r\n            <BlockStack gap=\"300\">\r\n              <Text as=\"p\" variant=\"bodyMd\">\r\n                The app template comes with an additional page which\r\n                demonstrates how to create multiple pages within app navigation\r\n                using{\" \"}\r\n                <Link\r\n                  url=\"https://shopify.dev/docs/apps/tools/app-bridge\"\r\n                  target=\"_blank\"\r\n                  removeUnderline\r\n                >\r\n                  App Bridge\r\n                </Link>\r\n                .\r\n              </Text>\r\n              <Text as=\"p\" variant=\"bodyMd\">\r\n                To create your own page and have it show up in the app\r\n                navigation, add a page inside <Code>app/routes</Code>, and a\r\n                link to it in the <Code>&lt;NavMenu&gt;</Code> component found\r\n                in <Code>app/routes/app.jsx</Code>.\r\n              </Text>\r\n            </BlockStack>\r\n          </Card>\r\n        </Layout.Section>\r\n        <Layout.Section variant=\"oneThird\">\r\n          <Card>\r\n            <BlockStack gap=\"200\">\r\n              <Text as=\"h2\" variant=\"headingMd\">\r\n                Resources\r\n              </Text>\r\n              <List>\r\n                <List.Item>\r\n                  <Link\r\n                    url=\"https://shopify.dev/docs/apps/design-guidelines/navigation#app-nav\"\r\n                    target=\"_blank\"\r\n                    removeUnderline\r\n                  >\r\n                    App nav best practices\r\n                  </Link>\r\n                </List.Item>\r\n              </List>\r\n            </BlockStack>\r\n          </Card>\r\n        </Layout.Section>\r\n      </Layout>\r\n    </Page>\r\n  );\r\n}\r\n\r\nfunction Code({ children }: { children: React.ReactNode }) {\r\n  return (\r\n    <Box\r\n      as=\"span\"\r\n      padding=\"025\"\r\n      paddingInlineStart=\"100\"\r\n      paddingInlineEnd=\"100\"\r\n      background=\"bg-surface-active\"\r\n      borderWidth=\"025\"\r\n      borderColor=\"border\"\r\n      borderRadius=\"100\"\r\n    >\r\n      <code>{children}</code>\r\n    </Box>\r\n  );\r\n}\r\n","import type { LoaderFunctionArgs } from \"@remix-run/node\";\r\nimport { authenticate } from \"../shopify.server\";\r\nimport { redirect } from \"@remix-run/react\";\r\nimport { setAuthCookie } from \"app/packages/utils/cookieAuth\";\r\n\r\nexport const loader = async ({ request }: LoaderFunctionArgs) => {\r\n  const url = new URL(request.url);\r\n  const queryString = url.searchParams.toString();\r\n  const shop = url.searchParams.get(\"shop\");\r\n  const host = url.searchParams.get(\"host\");\r\n\r\n  if (shop && host) {\r\n    // Prepare cookie data\r\n    const cookieData = {\r\n      shop,\r\n      host,\r\n      query: queryString,\r\n    };\r\n\r\n    // Set the cookie\r\n    const cookieHeader = await setAuthCookie(cookieData);\r\n\r\n    // Redirect to /merchant/home\r\n    return redirect(\"/merchant/home\", {\r\n      headers: {\r\n        \"Set-Cookie\": cookieHeader,\r\n      },\r\n    });\r\n  } else {\r\n    throw redirect(\"/auth/login\");\r\n  }\r\n};\r\n"],"names":["routes","menuItems","LAYOUT_OPTIONS","_a","Fragment","index","Title","cn","Badge","NextThemeProvider","Modal","links","App","ShopifyObjectType","formatDate","options","oneTimeGroup","generateInventoryPolicy","group","PlanHeader","Input","Switch","Text","Button","Flex","action","ActionIcon","Box","prev","SubscriptionContractSubscriptionStatus","SubscriptionBillingCycleScheduleEditInputScheduleEditReason","statusColors","Select","Loader","SubscriptionActions","_d","_c","_b","columnOrder","OtherAactions","ACTIONS","columnHelper","entry","FaCheck","OrderItem","ShippingDetails","pageHeader","loader","loadCriticalData","generateVariables","ConfigureSettings","ConfigureSettingsLabels","ConfigureSettingsOptions","renderConfigureOption","PlanDetails","PlanActions","id","productId","db","SubscriptionContractStatus","SubscriptionContractLastBillingErrorType","Filters","FilterElements","statusOptions","renderOptionDisplayValue","ProductStatus","ProductPublicationStatus","PublishedStatus","MainAppFilters","generateShopifyQuery","generatePaginationVariables","Analytics","Products","ProductSortKeys","Home","PolarisAppProvider","Link","redirect"],"mappings":"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","x_google_ignoreList":[234]}