// vite.config.ts
import { vitePlugin as remix } from "file:///C:/myfolder/MEANMEARN/Shopify/apex-feat-test/node_modules/@remix-run/dev/dist/index.js";
import { installGlobals } from "file:///C:/myfolder/MEANMEARN/Shopify/apex-feat-test/node_modules/@remix-run/node/dist/index.js";
import { defineConfig } from "file:///C:/myfolder/MEANMEARN/Shopify/apex-feat-test/node_modules/vite/dist/node/index.js";
import tsconfigPaths from "file:///C:/myfolder/MEANMEARN/Shopify/apex-feat-test/node_modules/vite-tsconfig-paths/dist/index.js";
installGlobals({ nativeFetch: true });
if (process.env.HOST && (!process.env.SHOPIFY_APP_URL || process.env.SHOPIFY_APP_URL === process.env.HOST)) {
  process.env.SHOPIFY_APP_URL = process.env.HOST;
  delete process.env.HOST;
}
var host = new URL(process.env.SHOPIFY_APP_URL || "http://localhost").hostname;
var hmrConfig;
if (host === "localhost") {
  hmrConfig = {
    protocol: "ws",
    host: "localhost",
    port: 64999,
    clientPort: 64999
  };
} else {
  hmrConfig = {
    protocol: "wss",
    host,
    port: parseInt(process.env.FRONTEND_PORT) || 8002,
    clientPort: 443
  };
}
var vite_config_default = defineConfig({
  server: {
    port: Number(process.env.PORT || 3e3),
    hmr: hmrConfig,
    fs: {
      // See https://vitejs.dev/config/server-options.html#server-fs-allow for more information
      allow: ["app", "node_modules"]
    }
  },
  plugins: [
    remix({
      ignoredRouteFiles: ["**/.*"],
      future: {
        v3_fetcherPersist: true,
        v3_relativeSplatPath: true,
        v3_throwAbortReason: true,
        v3_lazyRouteDiscovery: true,
        v3_singleFetch: false,
        v3_routeConfig: true
      }
    }),
    tsconfigPaths()
  ],
  build: {
    assetsInlineLimit: 0
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxteWZvbGRlclxcXFxNRUFOTUVBUk5cXFxcU2hvcGlmeVxcXFxhcGV4LWZlYXQtdGVzdFwiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9maWxlbmFtZSA9IFwiQzpcXFxcbXlmb2xkZXJcXFxcTUVBTk1FQVJOXFxcXFNob3BpZnlcXFxcYXBleC1mZWF0LXRlc3RcXFxcdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL0M6L215Zm9sZGVyL01FQU5NRUFSTi9TaG9waWZ5L2FwZXgtZmVhdC10ZXN0L3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgdml0ZVBsdWdpbiBhcyByZW1peCB9IGZyb20gXCJAcmVtaXgtcnVuL2RldlwiO1xyXG5pbXBvcnQgeyBpbnN0YWxsR2xvYmFscyB9IGZyb20gXCJAcmVtaXgtcnVuL25vZGVcIjtcclxuaW1wb3J0IHsgZGVmaW5lQ29uZmlnLCB0eXBlIFVzZXJDb25maWcgfSBmcm9tIFwidml0ZVwiO1xyXG5pbXBvcnQgdHNjb25maWdQYXRocyBmcm9tIFwidml0ZS10c2NvbmZpZy1wYXRoc1wiO1xyXG5cclxuaW5zdGFsbEdsb2JhbHMoeyBuYXRpdmVGZXRjaDogdHJ1ZSB9KTtcclxuXHJcbi8vIFJlbGF0ZWQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzI4MzUjaXNzdWVjb21tZW50LTExNDQxMDIxNzZcclxuLy8gUmVwbGFjZSB0aGUgSE9TVCBlbnYgdmFyIHdpdGggU0hPUElGWV9BUFBfVVJMIHNvIHRoYXQgaXQgZG9lc24ndCBicmVhayB0aGUgcmVtaXggc2VydmVyLiBUaGUgQ0xJIHdpbGwgZXZlbnR1YWxseVxyXG4vLyBzdG9wIHBhc3NpbmcgaW4gSE9TVCwgc28gd2UgY2FuIHJlbW92ZSB0aGlzIHdvcmthcm91bmQgYWZ0ZXIgdGhlIG5leHQgbWFqb3IgcmVsZWFzZS5cclxuaWYgKFxyXG4gIHByb2Nlc3MuZW52LkhPU1QgJiZcclxuICAoIXByb2Nlc3MuZW52LlNIT1BJRllfQVBQX1VSTCB8fFxyXG4gICAgcHJvY2Vzcy5lbnYuU0hPUElGWV9BUFBfVVJMID09PSBwcm9jZXNzLmVudi5IT1NUKVxyXG4pIHtcclxuICBwcm9jZXNzLmVudi5TSE9QSUZZX0FQUF9VUkwgPSBwcm9jZXNzLmVudi5IT1NUO1xyXG4gIGRlbGV0ZSBwcm9jZXNzLmVudi5IT1NUO1xyXG59XHJcblxyXG5jb25zdCBob3N0ID0gbmV3IFVSTChwcm9jZXNzLmVudi5TSE9QSUZZX0FQUF9VUkwgfHwgXCJodHRwOi8vbG9jYWxob3N0XCIpXHJcbiAgLmhvc3RuYW1lO1xyXG5cclxubGV0IGhtckNvbmZpZztcclxuaWYgKGhvc3QgPT09IFwibG9jYWxob3N0XCIpIHtcclxuICBobXJDb25maWcgPSB7XHJcbiAgICBwcm90b2NvbDogXCJ3c1wiLFxyXG4gICAgaG9zdDogXCJsb2NhbGhvc3RcIixcclxuICAgIHBvcnQ6IDY0OTk5LFxyXG4gICAgY2xpZW50UG9ydDogNjQ5OTksXHJcbiAgfTtcclxufSBlbHNlIHtcclxuICBobXJDb25maWcgPSB7XHJcbiAgICBwcm90b2NvbDogXCJ3c3NcIixcclxuICAgIGhvc3Q6IGhvc3QsXHJcbiAgICBwb3J0OiBwYXJzZUludChwcm9jZXNzLmVudi5GUk9OVEVORF9QT1JUISkgfHwgODAwMixcclxuICAgIGNsaWVudFBvcnQ6IDQ0MyxcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xyXG4gIHNlcnZlcjoge1xyXG4gICAgcG9ydDogTnVtYmVyKHByb2Nlc3MuZW52LlBPUlQgfHwgMzAwMCksXHJcbiAgICBobXI6IGhtckNvbmZpZyxcclxuICAgIGZzOiB7XHJcbiAgICAgIC8vIFNlZSBodHRwczovL3ZpdGVqcy5kZXYvY29uZmlnL3NlcnZlci1vcHRpb25zLmh0bWwjc2VydmVyLWZzLWFsbG93IGZvciBtb3JlIGluZm9ybWF0aW9uXHJcbiAgICAgIGFsbG93OiBbXCJhcHBcIiwgXCJub2RlX21vZHVsZXNcIl0sXHJcbiAgICB9LFxyXG4gIH0sXHJcbiAgcGx1Z2luczogW1xyXG4gICAgcmVtaXgoe1xyXG4gICAgICBpZ25vcmVkUm91dGVGaWxlczogW1wiKiovLipcIl0sXHJcbiAgICAgIGZ1dHVyZToge1xyXG4gICAgICAgIHYzX2ZldGNoZXJQZXJzaXN0OiB0cnVlLFxyXG4gICAgICAgIHYzX3JlbGF0aXZlU3BsYXRQYXRoOiB0cnVlLFxyXG4gICAgICAgIHYzX3Rocm93QWJvcnRSZWFzb246IHRydWUsXHJcbiAgICAgICAgdjNfbGF6eVJvdXRlRGlzY292ZXJ5OiB0cnVlLFxyXG4gICAgICAgIHYzX3NpbmdsZUZldGNoOiBmYWxzZSxcclxuICAgICAgICB2M19yb3V0ZUNvbmZpZzogdHJ1ZSxcclxuICAgICAgfSxcclxuICAgIH0pLFxyXG4gICAgdHNjb25maWdQYXRocygpLFxyXG4gIF0sXHJcbiAgYnVpbGQ6IHtcclxuICAgIGFzc2V0c0lubGluZUxpbWl0OiAwLFxyXG4gIH0sXHJcbn0pIHNhdGlzZmllcyBVc2VyQ29uZmlnO1xyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWdVLFNBQVMsY0FBYyxhQUFhO0FBQ3BXLFNBQVMsc0JBQXNCO0FBQy9CLFNBQVMsb0JBQXFDO0FBQzlDLE9BQU8sbUJBQW1CO0FBRTFCLGVBQWUsRUFBRSxhQUFhLEtBQUssQ0FBQztBQUtwQyxJQUNFLFFBQVEsSUFBSSxTQUNYLENBQUMsUUFBUSxJQUFJLG1CQUNaLFFBQVEsSUFBSSxvQkFBb0IsUUFBUSxJQUFJLE9BQzlDO0FBQ0EsVUFBUSxJQUFJLGtCQUFrQixRQUFRLElBQUk7QUFDMUMsU0FBTyxRQUFRLElBQUk7QUFDckI7QUFFQSxJQUFNLE9BQU8sSUFBSSxJQUFJLFFBQVEsSUFBSSxtQkFBbUIsa0JBQWtCLEVBQ25FO0FBRUgsSUFBSTtBQUNKLElBQUksU0FBUyxhQUFhO0FBQ3hCLGNBQVk7QUFBQSxJQUNWLFVBQVU7QUFBQSxJQUNWLE1BQU07QUFBQSxJQUNOLE1BQU07QUFBQSxJQUNOLFlBQVk7QUFBQSxFQUNkO0FBQ0YsT0FBTztBQUNMLGNBQVk7QUFBQSxJQUNWLFVBQVU7QUFBQSxJQUNWO0FBQUEsSUFDQSxNQUFNLFNBQVMsUUFBUSxJQUFJLGFBQWMsS0FBSztBQUFBLElBQzlDLFlBQVk7QUFBQSxFQUNkO0FBQ0Y7QUFFQSxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixRQUFRO0FBQUEsSUFDTixNQUFNLE9BQU8sUUFBUSxJQUFJLFFBQVEsR0FBSTtBQUFBLElBQ3JDLEtBQUs7QUFBQSxJQUNMLElBQUk7QUFBQTtBQUFBLE1BRUYsT0FBTyxDQUFDLE9BQU8sY0FBYztBQUFBLElBQy9CO0FBQUEsRUFDRjtBQUFBLEVBQ0EsU0FBUztBQUFBLElBQ1AsTUFBTTtBQUFBLE1BQ0osbUJBQW1CLENBQUMsT0FBTztBQUFBLE1BQzNCLFFBQVE7QUFBQSxRQUNOLG1CQUFtQjtBQUFBLFFBQ25CLHNCQUFzQjtBQUFBLFFBQ3RCLHFCQUFxQjtBQUFBLFFBQ3JCLHVCQUF1QjtBQUFBLFFBQ3ZCLGdCQUFnQjtBQUFBLFFBQ2hCLGdCQUFnQjtBQUFBLE1BQ2xCO0FBQUEsSUFDRixDQUFDO0FBQUEsSUFDRCxjQUFjO0FBQUEsRUFDaEI7QUFBQSxFQUNBLE9BQU87QUFBQSxJQUNMLG1CQUFtQjtBQUFBLEVBQ3JCO0FBQ0YsQ0FBQzsiLAogICJuYW1lcyI6IFtdCn0K
